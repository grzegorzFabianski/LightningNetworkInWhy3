<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="3000"/>
<prover id="2" name="Alt-Ergo" version="2.4.3" timelimit="100" steplimit="0" memlimit="3000"/>
<file format="whyml" proved="true">
<path name="basicTypes.mlw"/>
<theory name="BasicTypes" proved="true">
 <goal name="deltaNet&#39;vc" expl="VC for deltaNet" proved="true">
 <proof prover="2"><result status="valid" time="0.012217" steps="6"/></proof>
 </goal>
 <goal name="deltaWake&#39;vc" expl="VC for deltaWake" proved="true">
 <proof prover="2"><result status="valid" time="0.010894" steps="9"/></proof>
 </goal>
 <goal name="channelTimelock&#39;vc" expl="VC for channelTimelock" proved="true">
 <proof prover="2"><result status="valid" time="0.010556" steps="18"/></proof>
 </goal>
 <goal name="gammaStateTExt" proved="true">
 <proof prover="2"><result status="valid" time="0.008716" steps="10"/></proof>
 </goal>
</theory>
<theory name="BasicLemmasAndProofs" proved="true">
 <goal name="otherNeq&#39;vc" expl="VC for otherNeq" proved="true">
 <proof prover="2"><result status="valid" time="0.010279" steps="15"/></proof>
 </goal>
</theory>
<theory name="Util" proved="true">
 <goal name="unpackOption&#39;vc" expl="VC for unpackOption" proved="true">
 <proof prover="2"><result status="valid" time="0.004532" steps="4"/></proof>
 </goal>
 <goal name="option2&#39;vc" expl="VC for option2" proved="true">
 <proof prover="2"><result status="valid" time="0.006250" steps="0"/></proof>
 </goal>
 <goal name="optionAnd&#39;vc" expl="VC for optionAnd" proved="true">
 <proof prover="2"><result status="valid" time="0.003995" steps="0"/></proof>
 </goal>
 <goal name="optionOr&#39;vc" expl="VC for optionOr" proved="true">
 <proof prover="2"><result status="valid" time="0.007160" steps="0"/></proof>
 </goal>
 <goal name="compareFromInner" proved="true">
 <proof prover="2"><result status="valid" time="0.007208" steps="6"/></proof>
 </goal>
</theory>
<theory name="Compare" proved="true">
 <goal name="compareInt&#39;vc" expl="VC for compareInt" proved="true">
 <proof prover="2"><result status="valid" time="0.009202" steps="6"/></proof>
 </goal>
 <goal name="compareNonces&#39;vc" expl="VC for compareNonces" proved="true">
 <proof prover="2"><result status="valid" time="0.005747" steps="6"/></proof>
 </goal>
 <goal name="compareTimes&#39;vc" expl="VC for compareTimes" proved="true">
 <proof prover="2"><result status="valid" time="0.006036" steps="6"/></proof>
 </goal>
 <goal name="compareAmounts&#39;vc" expl="VC for compareAmounts" proved="true">
 <proof prover="1"><result status="valid" time="0.060264" steps="7667"/></proof>
 </goal>
 <goal name="compareSigs&#39;vc" expl="VC for compareSigs" proved="true">
 <proof prover="2"><result status="valid" time="0.009682" steps="6"/></proof>
 </goal>
 <goal name="compareIDs&#39;vc" expl="VC for compareIDs" proved="true">
 <proof prover="2"><result status="valid" time="0.010175" steps="6"/></proof>
 </goal>
 <goal name="compareOption&#39;vc" expl="VC for compareOption" proved="true">
 <proof prover="2"><result status="valid" time="0.007719" steps="56"/></proof>
 </goal>
 <goal name="compareInts&#39;vc" expl="VC for compareInts" proved="true">
 <proof prover="2"><result status="valid" time="0.008321" steps="6"/></proof>
 </goal>
 <goal name="compareList&#39;vc" expl="VC for compareList" proved="true">
 <proof prover="2"><result status="valid" time="0.030212" steps="329"/></proof>
 </goal>
 <goal name="compareParties&#39;vc" expl="VC for compareParties" proved="true">
 <proof prover="2"><result status="valid" time="0.010591" steps="12"/></proof>
 </goal>
 <goal name="compareDestinations&#39;vc" expl="VC for compareDestinations" proved="true">
 <proof prover="2"><result status="valid" time="0.011358" steps="14"/></proof>
 </goal>
 <goal name="compareArgs&#39;vc" expl="VC for compareArgs" proved="true">
 <proof prover="2"><result status="valid" time="0.010854" steps="81"/></proof>
 </goal>
 <goal name="compareConditionalOutputs&#39;vc" expl="VC for compareConditionalOutputs" proved="true">
 <proof prover="2"><result status="valid" time="0.011390" steps="94"/></proof>
 </goal>
 <goal name="compareSplits&#39;vc" expl="VC for compareSplits" proved="true">
 <proof prover="2"><result status="valid" time="0.006502" steps="6"/></proof>
 </goal>
 <goal name="compareHsSplits&#39;vc" expl="VC for compareHsSplits" proved="true">
 <proof prover="2"><result status="valid" time="0.014362" steps="25"/></proof>
 </goal>
 <goal name="compareContractStatus&#39;vc" expl="VC for compareContractStatus" proved="true">
 <proof prover="1"><result status="valid" time="0.109253" steps="18802"/></proof>
 </goal>
 <goal name="compareSimpleChannel&#39;vc" expl="VC for compareSimpleChannel" proved="true">
 <proof prover="1"><result status="valid" time="0.095451" steps="12940"/></proof>
 </goal>
 <goal name="compareMsgToGamma&#39;vc" expl="VC for compareMsgToGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.049971" steps="565"/></proof>
 </goal>
 <goal name="compareMsgQueueEntries&#39;vc" expl="VC for compareMsgQueueEntries" proved="true">
 <proof prover="2"><result status="valid" time="0.007651" steps="8"/></proof>
 </goal>
 <goal name="compareMsgToParty&#39;vc" expl="VC for compareMsgToParty" proved="true">
 <proof prover="2"><result status="valid" time="0.327508" steps="2192"/></proof>
 </goal>
 <goal name="compareSignables&#39;vc" expl="VC for compareSignables" proved="true">
 <proof prover="2"><result status="valid" time="0.021809" steps="355"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="listLibrary.mlw"/>
<theory name="ListLibrary" proved="true">
 <goal name="num_occ_comp&#39;vc" expl="VC for num_occ_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.015435" steps="317"/></proof>
 </goal>
 <goal name="member_comp&#39;vc" expl="VC for member_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.006542" steps="35"/></proof>
 </goal>
 <goal name="noElementsSoNil&#39;vc" expl="VC for noElementsSoNil" proved="true">
 <proof prover="2"><result status="valid" time="3.192329" steps="33131"/></proof>
 </goal>
 <goal name="memberAppend&#39;vc" expl="VC for memberAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.006837" steps="20"/></proof>
 </goal>
 <goal name="memberAppendL&#39;vc" expl="VC for memberAppendL" proved="true">
 <proof prover="2"><result status="valid" time="0.010596" steps="46"/></proof>
 </goal>
 <goal name="makeUnique&#39;vc" expl="VC for makeUnique" proved="true">
 <proof prover="2"><result status="valid" time="0.030900" steps="543"/></proof>
 </goal>
 <goal name="makeUnique_comp&#39;vc" expl="VC for makeUnique_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.012638" steps="85"/></proof>
 </goal>
 <goal name="uniqueEq" proved="true">
 <proof prover="2"><result status="valid" time="0.014948" steps="23"/></proof>
 </goal>
 <goal name="makeUniqueInclusion&#39;vc" expl="VC for makeUniqueInclusion" proved="true">
 <proof prover="2"><result status="valid" time="0.015868" steps="119"/></proof>
 </goal>
 <goal name="numOccComPNumOcc&#39;vc" expl="VC for numOccComPNumOcc" proved="true">
 <proof prover="2"><result status="valid" time="0.009928" steps="31"/></proof>
 </goal>
 <goal name="equivConsEquiv&#39;vc" expl="VC for equivConsEquiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equivConsEquiv&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.013683" steps="14"/></proof>
  </goal>
  <goal name="equivConsEquiv&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.010231" steps="14"/></proof>
  </goal>
  <goal name="equivConsEquiv&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.014392" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nth3&#39;vc" expl="VC for nth3" proved="true">
 <proof prover="2"><result status="valid" time="0.009978" steps="67"/></proof>
 </goal>
 <goal name="consNth2" proved="true">
 <proof prover="2"><result status="valid" time="0.008031" steps="28"/></proof>
 </goal>
 <goal name="consNth3&#39;vc" expl="VC for consNth3" proved="true">
 <proof prover="2"><result status="valid" time="0.008264" steps="9"/></proof>
 </goal>
 <goal name="find2&#39;vc" expl="VC for find2" proved="true">
 <proof prover="2"><result status="valid" time="0.691175" steps="3586"/></proof>
 </goal>
 <goal name="find2isSomePerm&#39;vc" expl="VC for find2isSomePerm" proved="true">
 <proof prover="2"><result status="valid" time="0.014885" steps="120"/></proof>
 </goal>
 <goal name="nthFinds&#39;vc" expl="VC for nthFinds" proved="true">
 <proof prover="2"><result status="valid" time="0.020566" steps="204"/></proof>
 </goal>
 <goal name="nthComplete&#39;vc" expl="VC for nthComplete" proved="true">
 <proof prover="2"><result status="valid" time="0.026055" steps="290"/></proof>
 </goal>
 <goal name="filterSpec&#39;vc" expl="VC for filterSpec" proved="true">
 <proof prover="2"><result status="valid" time="0.288659" steps="1293"/></proof>
 </goal>
 <goal name="filterSpec2&#39;vc" expl="VC for filterSpec2" proved="true">
 <proof prover="2"><result status="valid" time="0.010520" steps="6"/></proof>
 </goal>
 <goal name="filterAndMember&#39;vc" expl="VC for filterAndMember" proved="true">
 <proof prover="2"><result status="valid" time="0.014919" steps="15"/></proof>
 </goal>
 <goal name="filterMaintainsInclusion&#39;vc" expl="VC for filterMaintainsInclusion" proved="true">
 <proof prover="2"><result status="valid" time="0.011868" steps="59"/></proof>
 </goal>
 <goal name="filterShuffle&#39;vc" expl="VC for filterShuffle" proved="true">
 <proof prover="2"><result status="valid" time="0.014399" steps="86"/></proof>
 </goal>
 <goal name="weakerFilterGivesSuperset&#39;vc" expl="VC for weakerFilterGivesSuperset" proved="true">
 <proof prover="2"><result status="valid" time="0.014087" steps="56"/></proof>
 </goal>
 <goal name="filterEq&#39;vc" expl="VC for filterEq" proved="true">
 <proof prover="2"><result status="valid" time="0.359875" steps="1911"/></proof>
 </goal>
 <goal name="filterId&#39;vc" expl="VC for filterId" proved="true">
 <proof prover="2"><result status="valid" time="0.303592" steps="1383"/></proof>
 </goal>
 <goal name="filterAppend&#39;vc" expl="VC for filterAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.231996" steps="1005"/></proof>
 </goal>
 <goal name="mapExists&#39;vc" expl="VC for mapExists" proved="true">
 <proof prover="2"><result status="valid" time="5.895303" steps="20846"/></proof>
 </goal>
 <goal name="mapConcat&#39;vc" expl="VC for mapConcat" proved="true">
 <proof prover="2"><result status="valid" time="0.014008" steps="140"/></proof>
 </goal>
 <goal name="mapConcatL" proved="true">
 <proof prover="2"><result status="valid" time="0.010915" steps="4"/></proof>
 </goal>
 <goal name="mapLength&#39;vc" expl="VC for mapLength" proved="true">
 <proof prover="2"><result status="valid" time="0.015261" steps="137"/></proof>
 </goal>
 <goal name="mapSpec&#39;vc" expl="VC for mapSpec" proved="true">
 <proof prover="2"><result status="valid" time="0.219656" steps="895"/></proof>
 </goal>
 <goal name="mapSpec2&#39;vc" expl="VC for mapSpec2" proved="true">
 <proof prover="2"><result status="valid" time="1.273299" steps="4392"/></proof>
 </goal>
 <goal name="mapSpec3" proved="true">
 <proof prover="2"><result status="valid" time="0.013506" steps="50"/></proof>
 </goal>
 <goal name="mapMaintainsInclusion&#39;vc" expl="VC for mapMaintainsInclusion" proved="true">
 <proof prover="2"><result status="valid" time="0.018740" steps="85"/></proof>
 </goal>
 <goal name="mapPermAuxRemove&#39;vc" expl="VC for mapPermAuxRemove" proved="true">
 <proof prover="1"><result status="valid" time="12.888111" steps="670141"/></proof>
 </goal>
 <goal name="mapPerm&#39;vc" expl="VC for mapPerm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapPerm&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.009234" steps="4"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.036151" steps="179"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.011673" steps="6"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.014390" steps="38"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.014145" steps="6"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.014893" steps="29"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.012044" steps="27"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.015505" steps="23"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.019265" steps="20"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.017536" steps="37"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.011453" steps="36"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.027034" steps="271"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.015112" steps="6"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.013558" steps="41"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.009427" steps="6"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.014698" steps="31"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.390027" steps="7992"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.015145" steps="28"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.013141" steps="24"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.015147" steps="42"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.281121" steps="979"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.21" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.290326" steps="918"/></proof>
  </goal>
  <goal name="mapPerm&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mapPerm&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.017987" steps="4"/></proof>
   </goal>
   <goal name="mapPerm&#39;vc.22.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.025875" steps="26"/></proof>
   </goal>
   <goal name="mapPerm&#39;vc.22.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.028316" steps="31"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mapListEq&#39;vc" expl="VC for mapListEq" proved="true">
 <proof prover="2"><result status="valid" time="0.190030" steps="1024"/></proof>
 </goal>
 <goal name="mapListStrongEq&#39;vc" expl="VC for mapListStrongEq" proved="true">
 <proof prover="2"><result status="valid" time="0.023101" steps="144"/></proof>
 </goal>
 <goal name="mapFunEq&#39;vc" expl="VC for mapFunEq" proved="true">
 <proof prover="1"><result status="valid" time="0.132669" steps="19244"/></proof>
 </goal>
 <goal name="mapSpecNum&#39;vc" expl="VC for mapSpecNum" proved="true">
 <proof prover="2"><result status="valid" time="1.327787" steps="4632"/></proof>
 </goal>
 <goal name="mapCons" proved="true">
 <proof prover="2"><result status="valid" time="0.011718" steps="7"/></proof>
 </goal>
 <goal name="mapNil" proved="true">
 <proof prover="2"><result status="valid" time="0.011429" steps="5"/></proof>
 </goal>
 <goal name="mapNumOccGeq&#39;vc" expl="VC for mapNumOccGeq" proved="true">
 <proof prover="2"><result status="valid" time="0.471358" steps="2418"/></proof>
 </goal>
 <goal name="mapInversion&#39;vc" expl="VC for mapInversion" proved="true">
 <proof prover="2"><result status="valid" time="0.206400" steps="1049"/></proof>
 </goal>
 <goal name="mapWithInjection&#39;vc" expl="VC for mapWithInjection" proved="true">
 <proof prover="2"><result status="valid" time="0.159424" steps="587"/></proof>
 </goal>
 <goal name="mapComposeAux&#39;vc" expl="VC for mapComposeAux" proved="true">
 <proof prover="2"><result status="valid" time="0.232346" steps="1090"/></proof>
 </goal>
 <goal name="mapComposeRev&#39;vc" expl="VC for mapComposeRev" proved="true">
 <proof prover="2"><result status="valid" time="0.010668" steps="0"/></proof>
 </goal>
 <goal name="mapCompose" proved="true">
 <proof prover="2"><result status="valid" time="0.013963" steps="47"/></proof>
 </goal>
 <goal name="mapId&#39;vc" expl="VC for mapId" proved="true">
 <proof prover="2"><result status="valid" time="0.020273" steps="213"/></proof>
 </goal>
 <goal name="find1&#39;vc" expl="VC for find1" proved="true">
 <proof prover="2"><result status="valid" time="0.015557" steps="40"/></proof>
 </goal>
 <goal name="find&#39;vc" expl="VC for find" proved="true">
 <proof prover="2"><result status="valid" time="0.639343" steps="2513"/></proof>
 </goal>
 <goal name="numOccConsEq" proved="true">
 <proof prover="2"><result status="valid" time="0.011110" steps="13"/></proof>
 </goal>
 <goal name="numOccConsNeq" proved="true">
 <proof prover="2"><result status="valid" time="0.012874" steps="15"/></proof>
 </goal>
 <goal name="removeOne&#39;vc" expl="VC for removeOne" proved="true">
 <proof prover="2"><result status="valid" time="0.195812" steps="739"/></proof>
 </goal>
 <goal name="removeOne_comp&#39;vc" expl="VC for removeOne_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.312429" steps="1508"/></proof>
 </goal>
 <goal name="removeOneSpec&#39;vc" expl="VC for removeOneSpec" proved="true">
 <proof prover="2"><result status="valid" time="1.371975" steps="4877"/></proof>
 </goal>
 <goal name="removeOneMapCommute&#39;vc" expl="VC for removeOneMapCommute" proved="true">
 <proof prover="1"><result status="valid" time="0.846119" steps="74300"/></proof>
 </goal>
 <goal name="removeOneMapNumOccEq&#39;vc" expl="VC for removeOneMapNumOccEq" proved="true">
 <proof prover="1"><result status="valid" time="4.846246" steps="225598"/></proof>
 </goal>
 <goal name="removeOneMapNumOccNonEq&#39;vc" expl="VC for removeOneMapNumOccNonEq" proved="true">
 <proof prover="2"><result status="valid" time="18.644406" steps="54640"/></proof>
 </goal>
 <goal name="removeOneMapListStrongEq&#39;vc" expl="VC for removeOneMapListStrongEq" proved="true">
 <proof prover="2"><result status="valid" time="1.931664" steps="7046"/></proof>
 </goal>
 <goal name="mapMaintainsInclusionStrong&#39;vc" expl="VC for mapMaintainsInclusionStrong" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapMaintainsInclusionStrong&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.042015" steps="110"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.079054" steps="535"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.022890" steps="4"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.044227" steps="142"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.607422" steps="55945"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.022760" steps="4"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.033321" steps="25"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.039727" steps="53"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.112371" steps="381"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.110793" steps="389"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148396" steps="397"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114474" steps="69"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.12" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.047196" steps="127"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.091864" steps="413"/></proof>
  </goal>
  <goal name="mapMaintainsInclusionStrong&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mapMaintainsInclusionStrong&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.025294" steps="4"/></proof>
   </goal>
   <goal name="mapMaintainsInclusionStrong&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.127380" steps="693"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="emptyFilterMeansNoneFound&#39;vc" expl="VC for emptyFilterMeansNoneFound" proved="true">
 <proof prover="2"><result status="valid" time="2.189612" steps="6677"/></proof>
 </goal>
 <goal name="ifFoundInSublistThenFoundInSuperlist&#39;vc" expl="VC for ifFoundInSublistThenFoundInSuperlist" proved="true">
 <proof prover="2"><result status="valid" time="0.036241" steps="385"/></proof>
 </goal>
 <goal name="ifFoundInListThenFoundInOneLongerList&#39;vc" expl="VC for ifFoundInListThenFoundInOneLongerList" proved="true">
 <proof prover="2"><result status="valid" time="0.017733" steps="56"/></proof>
 </goal>
 <goal name="extendingMatchingListWithNonmatchingElemGivesMatchingList&#39;vc" expl="VC for extendingMatchingListWithNonmatchingElemGivesMatchingList" proved="true">
 <proof prover="2"><result status="valid" time="0.014585" steps="10"/></proof>
 </goal>
 <goal name="ifStrongPredFindsThenWeakPredFinds&#39;vc" expl="VC for ifStrongPredFindsThenWeakPredFinds" proved="true">
 <proof prover="2"><result status="valid" time="0.033491" steps="345"/></proof>
 </goal>
 <goal name="fold_left_cons" proved="true">
 <proof prover="2"><result status="valid" time="0.014310" steps="5"/></proof>
 </goal>
 <goal name="decompose&#39;vc" expl="VC for decompose" proved="true">
 <proof prover="2"><result status="valid" time="0.415366" steps="1514"/></proof>
 </goal>
 <goal name="fold_leftAppend&#39;vc" expl="VC for fold_leftAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.027726" steps="161"/></proof>
 </goal>
 <goal name="concatProp&#39;vc" expl="VC for concatProp" proved="true">
 <proof prover="2"><result status="valid" time="0.028616" steps="178"/></proof>
 </goal>
 <goal name="sumInFront1&#39;vc" expl="VC for sumInFront1" proved="true">
 <proof prover="2"><result status="valid" time="0.019672" steps="57"/></proof>
 </goal>
 <goal name="sumInFront" proved="true">
 <proof prover="2"><result status="valid" time="0.017386" steps="40"/></proof>
 </goal>
 <goal name="sumAppend&#39;vc" expl="VC for sumAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.014879" steps="37"/></proof>
 </goal>
 <goal name="sumNonNeg&#39;vc" expl="VC for sumNonNeg" proved="true">
 <proof prover="1"><result status="valid" time="1.688094" steps="138493"/></proof>
 </goal>
 <goal name="sumIsOrderIndependent&#39;vc" expl="VC for sumIsOrderIndependent" proved="true">
 <proof prover="1"><result status="valid" time="12.162621" steps="593392"/></proof>
 </goal>
 <goal name="mapSumMonotoneOnF&#39;vc" expl="VC for mapSumMonotoneOnF" proved="true">
 <proof prover="2"><result status="valid" time="2.926967" steps="12178"/></proof>
 </goal>
 <goal name="mapSumMonotoneOnFStrict&#39;vc" expl="VC for mapSumMonotoneOnFStrict" proved="true">
 <proof prover="1"><result status="valid" time="0.976978" steps="86311"/></proof>
 </goal>
 <goal name="sumMapCons&#39;vc" expl="VC for sumMapCons" proved="true">
 <proof prover="2"><result status="valid" time="0.020471" steps="57"/></proof>
 </goal>
 <goal name="sumMapNil&#39;vc" expl="VC for sumMapNil" proved="true">
 <proof prover="2"><result status="valid" time="0.015953" steps="33"/></proof>
 </goal>
 <goal name="removeOneSum&#39;vc" expl="VC for removeOneSum" proved="true">
 <proof prover="2"><result status="valid" time="0.695826" steps="2624"/></proof>
 </goal>
 <goal name="removeOneSumMap&#39;vc" expl="VC for removeOneSumMap" proved="true">
 <proof prover="2"><result status="valid" time="0.941050" steps="3435"/></proof>
 </goal>
 <goal name="sumInclusionNonEq&#39;vc" expl="VC for sumInclusionNonEq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sumInclusionNonEq&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.140005" steps="957"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.037783" steps="9"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.029118" steps="6"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.055771" steps="178"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="7.972963" steps="626454"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.860994" steps="146588"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.036743" steps="22"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.027637" steps="10"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.040125" steps="41"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.059903" steps="161"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="8.590365" steps="690719"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.103886" steps="478"/></proof>
  </goal>
  <goal name="sumInclusionNonEq&#39;vc.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sumInclusionNonEq&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.243907" steps="47089"/></proof>
   </goal>
   <goal name="sumInclusionNonEq&#39;vc.12.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sumInclusionNonEq&#39;vc.12.1.0" expl="postcondition" proved="true">
    <proof prover="2" steplimit="80000"><result status="valid" time="0.016155" steps="17"/></proof>
    </goal>
    <goal name="sumInclusionNonEq&#39;vc.12.1.1" expl="postcondition" proved="true">
    <proof prover="1" steplimit="800000"><result status="valid" time="0.463355" steps="88484"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sumMapStrictInclusionLeq&#39;vc" expl="VC for sumMapStrictInclusionLeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sumMapStrictInclusionLeq&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.037192" steps="19"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.034047" steps="15"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074950" steps="202"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.041608" steps="36"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.082911" steps="1320"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.939636" steps="39749"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.274960" steps="3833"/></proof>
  </goal>
  <goal name="sumMapStrictInclusionLeq&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.027886" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mapEq&#39;vc" expl="VC for mapEq" proved="true">
 <proof prover="2"><result status="valid" time="0.364774" steps="5055"/></proof>
 </goal>
 <goal name="checkOnlyOneElem_comp&#39;vc" expl="VC for checkOnlyOneElem_comp" proved="true">
 <proof prover="2"><result status="valid" time="1.062925" steps="10386"/></proof>
 </goal>
 <goal name="catMaybesSpec&#39;vc" expl="VC for catMaybesSpec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="catMaybesSpec&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.615821" steps="70945"/></proof>
  </goal>
  <goal name="catMaybesSpec&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.067911" steps="244"/></proof>
  </goal>
  <goal name="catMaybesSpec&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.681748" steps="80503"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="catMaybesContains" proved="true">
 <proof prover="2"><result status="valid" time="0.021947" steps="28"/></proof>
 </goal>
 <goal name="catMaybesPreserveInclusion&#39;vc" expl="VC for catMaybesPreserveInclusion" proved="true">
 <proof prover="2"><result status="valid" time="0.029055" steps="104"/></proof>
 </goal>
 <goal name="catMaybesPreservePerm&#39;vc" expl="VC for catMaybesPreservePerm" proved="true">
 <proof prover="2"><result status="valid" time="0.025397" steps="96"/></proof>
 </goal>
 <goal name="catMaybesConcat&#39;vc" expl="VC for catMaybesConcat" proved="true">
 <proof prover="2"><result status="valid" time="0.462945" steps="4322"/></proof>
 </goal>
 <goal name="catMaybesMapListEq&#39;vc" expl="VC for catMaybesMapListEq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="catMaybesMapListEq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="catMaybesMapListEq&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="3.467180" steps="35595"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="catMaybesMapListStrongEq&#39;vc" expl="VC for catMaybesMapListStrongEq" proved="true">
 <proof prover="2"><result status="valid" time="0.024198" steps="83"/></proof>
 </goal>
 <goal name="minListAux&#39;vc" expl="VC for minListAux" proved="true">
 <proof prover="2"><result status="valid" time="0.223569" steps="2343"/></proof>
 </goal>
 <goal name="minList&#39;vc" expl="VC for minList" proved="true">
 <proof prover="2"><result status="valid" time="0.105846" steps="1043"/></proof>
 </goal>
 <goal name="minListAuxOrderIndependent&#39;vc" expl="VC for minListAuxOrderIndependent" proved="true">
 <proof prover="2"><result status="valid" time="0.038552" steps="312"/></proof>
 </goal>
 <goal name="minListAuxOrderIndependentLem" proved="true">
 <proof prover="2"><result status="valid" time="0.017521" steps="9"/></proof>
 </goal>
 <goal name="minListOrderIndependent&#39;vc" expl="VC for minListOrderIndependent" proved="true">
 <proof prover="2"><result status="valid" time="0.040832" steps="323"/></proof>
 </goal>
 <goal name="minListPointwise&#39;vc" expl="VC for minListPointwise" proved="true">
 <proof prover="1"><result status="valid" time="1.328795" steps="141660"/></proof>
 </goal>
 <goal name="mapFPointwise&#39;vc" expl="VC for mapFPointwise" proved="true">
 <proof prover="2"><result status="valid" time="0.030030" steps="59"/></proof>
 </goal>
 <goal name="minListAuxCatMaybesMap&#39;vc" expl="VC for minListAuxCatMaybesMap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="minListAuxCatMaybesMap&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.048471" steps="16"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.040673" steps="10"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.051497" steps="15"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.031409" steps="8"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.4" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.044545" steps="14"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.026378" steps="214494"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.031460" steps="10"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.031557" steps="10"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066868" steps="169"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.055459" steps="128"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.045243" steps="63"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.049702" steps="51"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.043410" steps="62"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.058107" steps="140"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.040992" steps="14"/></proof>
  </goal>
  <goal name="minListAuxCatMaybesMap&#39;vc.15" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="minListAuxCatMaybesMap&#39;vc.15.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.445012" steps="54010"/></proof>
   </goal>
   <goal name="minListAuxCatMaybesMap&#39;vc.15.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.032841" steps="107018"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="forallL&#39;vc" expl="VC for forallL" proved="true">
 <proof prover="2"><result status="valid" time="0.059431" steps="718"/></proof>
 </goal>
 <goal name="existsL&#39;vc" expl="VC for existsL" proved="true">
 <proof prover="2"><result status="valid" time="0.061114" steps="703"/></proof>
 </goal>
 <goal name="mapNotPresent&#39;vc" expl="VC for mapNotPresent" proved="true">
 <proof prover="2"><result status="valid" time="0.066209" steps="671"/></proof>
 </goal>
 <goal name="uniqueTail&#39;vc" expl="VC for uniqueTail" proved="true">
 <proof prover="2"><result status="valid" time="0.033188" steps="190"/></proof>
 </goal>
 <goal name="uniqueFromTail" proved="true">
 <proof prover="2"><result status="valid" time="0.055288" steps="530"/></proof>
 </goal>
 <goal name="uniqueHeadNotInTail&#39;vc" expl="VC for uniqueHeadNotInTail" proved="true">
 <proof prover="2"><result status="valid" time="0.039596" steps="263"/></proof>
 </goal>
 <goal name="uniqueAppend&#39;vc" expl="VC for uniqueAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.045999" steps="283"/></proof>
 </goal>
 <goal name="uniqueByOrder&#39;vc" expl="VC for uniqueByOrder" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="uniqueByOrder&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.044263" steps="32"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.045119" steps="54"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.036638" steps="18"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.043335" steps="48"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.041212" steps="14"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122601" steps="479"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.6" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.044022" steps="20"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.045538" steps="29"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.069149" steps="187"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.9" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.049816" steps="98"/></proof>
  </goal>
  <goal name="uniqueByOrder&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="uniqueByOrder&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.026131" steps="45"/></proof>
   </goal>
   <goal name="uniqueByOrder&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.028126" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="checkUnique&#39;vc" expl="VC for checkUnique" proved="true">
 <proof prover="2"><result status="valid" time="0.057775" steps="650"/></proof>
 </goal>
 <goal name="uniqueMapTail&#39;vc" expl="VC for uniqueMapTail" proved="true">
 <proof prover="2"><result status="valid" time="0.059872" steps="331"/></proof>
 </goal>
 <goal name="uniqueMapAppend&#39;vc" expl="VC for uniqueMapAppend" proved="true">
 <proof prover="2"><result status="valid" time="0.090122" steps="955"/></proof>
 </goal>
 <goal name="findElem&#39;vc" expl="VC for findElem" proved="true">
 <proof prover="2"><result status="valid" time="0.053339" steps="576"/></proof>
 </goal>
 <goal name="findElemMap&#39;vc" expl="VC for findElemMap" proved="true">
 <proof prover="2"><result status="valid" time="0.019829" steps="0"/></proof>
 </goal>
 <goal name="findElemMapSpec&#39;vc" expl="VC for findElemMapSpec" proved="true">
 <proof prover="2"><result status="valid" time="0.151986" steps="1640"/></proof>
 </goal>
 <goal name="findElemMap_comp&#39;vc" expl="VC for findElemMap_comp" proved="true">
 <proof prover="1"><result status="valid" time="0.951828" steps="112048"/></proof>
 </goal>
 <goal name="liftElemMap&#39;vc" expl="VC for liftElemMap" proved="true">
 <proof prover="2"><result status="valid" time="0.042732" steps="145"/></proof>
 </goal>
 <goal name="liftElemMap_comp&#39;vc" expl="VC for liftElemMap_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.030227" steps="56"/></proof>
 </goal>
 <goal name="liftElemMapExtension&#39;vc" expl="VC for liftElemMapExtension" proved="true">
 <proof prover="2"><result status="valid" time="0.068777" steps="585"/></proof>
 </goal>
 <goal name="liftAndFind&#39;vc" expl="VC for liftAndFind" proved="true">
 <proof prover="2"><result status="valid" time="0.069151" steps="516"/></proof>
 </goal>
 <goal name="liftElemMap2&#39;vc" expl="VC for liftElemMap2" proved="true">
 <proof prover="2"><result status="valid" time="0.017574" steps="0"/></proof>
 </goal>
 <goal name="mapCompare&#39;vc" expl="VC for mapCompare" proved="true">
 <proof prover="2"><result status="valid" time="0.048713" steps="271"/></proof>
 </goal>
 <goal name="sumZero&#39;vc" expl="VC for sumZero" proved="true">
 <proof prover="1"><result status="valid" time="0.577827" steps="68558"/></proof>
 </goal>
 <goal name="listSumPositive&#39;vc" expl="VC for listSumPositive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="listSumPositive&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.030579" steps="22"/></proof>
  </goal>
  <goal name="listSumPositive&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.033081" steps="15"/></proof>
  </goal>
  <goal name="listSumPositive&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.024677" steps="4"/></proof>
  </goal>
  <goal name="listSumPositive&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182619" steps="1770"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="seq&#39;vc" expl="VC for seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.036059" steps="6"/></proof>
  </goal>
  <goal name="seq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.036088" steps="6"/></proof>
  </goal>
  <goal name="seq&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.048190" steps="45"/></proof>
  </goal>
  <goal name="seq&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.082518" steps="286"/></proof>
  </goal>
  <goal name="seq&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.470452" steps="5095"/></proof>
  </goal>
  <goal name="seq&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.035810" steps="2"/></proof>
  </goal>
  <goal name="seq&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.207370" steps="1071"/></proof>
  </goal>
  <goal name="seq&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.125900" steps="1684"/></proof>
  </goal>
  <goal name="seq&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.049459" steps="41"/></proof>
  </goal>
  <goal name="seq&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.037026" steps="6"/></proof>
  </goal>
  <goal name="seq&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044363" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="maxListAux&#39;vc" expl="VC for maxListAux" proved="true">
 <proof prover="2"><result status="valid" time="0.193593" steps="2405"/></proof>
 </goal>
 <goal name="freshInt&#39;vc" expl="VC for freshInt" proved="true">
 <proof prover="2"><result status="valid" time="0.036934" steps="92"/></proof>
 </goal>
 <goal name="infinitelyManyIds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infinitelyManyIds.0" proved="true">
  <transf name="exists" proved="true" arg1="freshInt l">
   <goal name="infinitelyManyIds.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.059258" steps="68"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="signaturesFunctionality.mlw"/>
<theory name="SignaturesFunctionalityAbstract" proved="true">
 <goal name="signatureFunctionalityT&#39;vc" expl="VC for signatureFunctionalityT" proved="true">
 <proof prover="2"><result status="valid" time="0.029488" steps="17"/></proof>
 </goal>
 <goal name="sign2&#39;vc" expl="VC for sign2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sign2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.096728" steps="97"/></proof>
  </goal>
  <goal name="sign2&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.068478" steps="16644"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="emptySignatureState&#39;vc" expl="VC for emptySignatureState" proved="true">
 <proof prover="2"><result status="valid" time="0.030296" steps="17"/></proof>
 </goal>
 <goal name="comparePartySignableSig&#39;vc" expl="VC for comparePartySignableSig" proved="true">
 <proof prover="2"><result status="valid" time="0.025915" steps="14"/></proof>
 </goal>
 <goal name="verify_comp&#39;vc" expl="VC for verify_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.035708" steps="88"/></proof>
 </goal>
 <goal name="getSignedBy&#39;vc" expl="VC for getSignedBy" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedBy&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.579574" steps="88789"/></proof>
  </goal>
  <goal name="getSignedBy&#39;vc.1" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.059829" steps="1178"/></proof>
  </goal>
  <goal name="getSignedBy&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.184719" steps="1011"/></proof>
  </goal>
  <goal name="getSignedBy&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.039281" steps="56"/></proof>
  </goal>
  <goal name="getSignedBy&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.071123" steps="36"/></proof>
  </goal>
  <goal name="getSignedBy&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.104710" steps="159688"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isSigned_comp&#39;vc" expl="VC for isSigned_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.036466" steps="89"/></proof>
 </goal>
</theory>
<theory name="SignaturesFunctionality" proved="true">
 <goal name="compareWhoSign&#39;refn&#39;vc" expl="VC for compareWhoSign&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.032870" steps="10"/></proof>
 </goal>
 <goal name="compareWhatsSigned&#39;refn&#39;vc" expl="VC for compareWhatsSigned&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.032186" steps="10"/></proof>
 </goal>
 <goal name="sign&#39;vc" expl="VC for sign" proved="true">
 <proof prover="1"><result status="valid" time="0.545937" steps="96140"/></proof>
 </goal>
 <goal name="signSpec&#39;vc" expl="VC for signSpec" proved="true">
 <proof prover="2"><result status="valid" time="0.148416" steps="1319"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="gamma.mlw"/>
<theory name="Gamma" proved="true">
 <goal name="compareOptionArgs&#39;vc" expl="VC for compareOptionArgs" proved="true">
 <proof prover="2"><result status="valid" time="0.024569" steps="62"/></proof>
 </goal>
 <goal name="hasGivenChannelId&#39;vc" expl="VC for hasGivenChannelId" proved="true">
 <proof prover="2"><result status="valid" time="0.018995" steps="14"/></proof>
 </goal>
 <goal name="applicableRevokeMsg&#39;vc" expl="VC for applicableRevokeMsg" proved="true">
 <proof prover="2"><result status="valid" time="0.019516" steps="14"/></proof>
 </goal>
 <goal name="isSpent_comp&#39;vc" expl="VC for isSpent_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.032173" steps="240"/></proof>
 </goal>
 <goal name="verificationCheck&#39;vc" expl="VC for verificationCheck" proved="true">
 <proof prover="2"><result status="valid" time="0.019646" steps="14"/></proof>
 </goal>
 <goal name="idFreshForGamma&#39;vc" expl="VC for idFreshForGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.024649" steps="45"/></proof>
 </goal>
 <goal name="checkFreshness&#39;vc" expl="VC for checkFreshness" proved="true">
 <proof prover="2"><result status="valid" time="0.023923" steps="54"/></proof>
 </goal>
 <goal name="gammaSpendContract&#39;vc" expl="VC for gammaSpendContract" proved="true">
 <proof prover="2"><result status="valid" time="0.136054" steps="207"/></proof>
 </goal>
 <goal name="gammaInsertContracts&#39;vc" expl="VC for gammaInsertContracts" proved="true">
 <proof prover="2"><result status="valid" time="0.019130" steps="14"/></proof>
 </goal>
 <goal name="gammaProcessMsgFresh&#39;vc" expl="VC for gammaProcessMsgFresh" proved="true">
 <proof prover="2"><result status="valid" time="1.223216" steps="14902"/></proof>
 </goal>
 <goal name="gammaProcessMsgDirect&#39;vc" expl="VC for gammaProcessMsgDirect" proved="true">
 <proof prover="2"><result status="valid" time="0.068588" steps="424"/></proof>
 </goal>
 <goal name="inputUnspent&#39;vc" expl="VC for inputUnspent" proved="true">
 <proof prover="2"><result status="valid" time="0.019691" steps="14"/></proof>
 </goal>
 <goal name="isFunder&#39;vc" expl="VC for isFunder" proved="true">
 <proof prover="2"><result status="valid" time="0.024214" steps="14"/></proof>
 </goal>
 <goal name="computeVirtualContractStatus&#39;vc" expl="VC for computeVirtualContractStatus" proved="true">
 <proof prover="2"><result status="valid" time="0.023302" steps="14"/></proof>
 </goal>
 <goal name="computeVirtualContract&#39;vc" expl="VC for computeVirtualContract" proved="true">
 <proof prover="2"><result status="valid" time="0.020955" steps="14"/></proof>
 </goal>
 <goal name="contractStatusFreshForGamma&#39;vc" expl="VC for contractStatusFreshForGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.029174" steps="42"/></proof>
 </goal>
</theory>
<theory name="Evaluator" proved="true">
 <goal name="unCondPayment&#39;vc" expl="VC for unCondPayment" proved="true">
 <proof prover="2"><result status="valid" time="0.020035" steps="14"/></proof>
 </goal>
 <goal name="expectedSplitResolutionWhenDispute_comp&#39;vc" expl="VC for expectedSplitResolutionWhenDispute_comp" proved="true">
 <proof prover="2"><result status="valid" time="0.100761" steps="1017"/></proof>
 </goal>
 <goal name="expectedSplitResolutionTotal&#39;vc" expl="VC for expectedSplitResolutionTotal" proved="true">
 <proof prover="2"><result status="valid" time="0.020122" steps="14"/></proof>
 </goal>
 <goal name="checkApplicableSplitToNormal&#39;vc" expl="VC for checkApplicableSplitToNormal" proved="true">
 <proof prover="2"><result status="valid" time="0.025737" steps="14"/></proof>
 </goal>
 <goal name="extractSplitFromSignableRevokeUnique" proved="true">
 <proof prover="2"><result status="valid" time="2.161973" steps="32171"/></proof>
 </goal>
 <goal name="extractSplitFromSignableSplitUnique" proved="true">
 <proof prover="2"><result status="valid" time="2.135060" steps="32590"/></proof>
 </goal>
 <goal name="extractArgsFromSignableTxUnique" proved="true">
 <proof prover="2"><result status="valid" time="2.222630" steps="33613"/></proof>
 </goal>
 <goal name="extractRevokedSplits&#39;vc" expl="VC for extractRevokedSplits" proved="true">
 <proof prover="1"><result status="valid" time="7.980163" steps="528175"/></proof>
 </goal>
 <goal name="extractSignedSplits&#39;vc" expl="VC for extractSignedSplits" proved="true">
 <proof prover="1"><result status="valid" time="6.572031" steps="450082"/></proof>
 </goal>
 <goal name="extractRevocationsReceived&#39;vc" expl="VC for extractRevocationsReceived" proved="true">
 <proof prover="2"><result status="valid" time="0.032269" steps="14"/></proof>
 </goal>
 <goal name="compareCondOutputSplit&#39;vc" expl="VC for compareCondOutputSplit" proved="true">
 <proof prover="2"><result status="valid" time="0.034338" steps="14"/></proof>
 </goal>
 <goal name="immediateAccountEvaluation&#39;vc" expl="VC for immediateAccountEvaluation" proved="true">
 <proof prover="2"><result status="valid" time="0.030363" steps="14"/></proof>
 </goal>
 <goal name="worstCaseChannelResolution&#39;vc" expl="VC for worstCaseChannelResolution" proved="true">
 <proof prover="2"><result status="valid" time="0.029624" steps="14"/></proof>
 </goal>
 <goal name="moneyInChannels&#39;vc" expl="VC for moneyInChannels" proved="true">
 <proof prover="2"><result status="valid" time="0.034943" steps="14"/></proof>
 </goal>
 <goal name="moneyInChannelsFull&#39;vc" expl="VC for moneyInChannelsFull" proved="true">
 <proof prover="2"><result status="valid" time="0.032848" steps="14"/></proof>
 </goal>
 <goal name="fundsInvested&#39;vc" expl="VC for fundsInvested" proved="true">
 <proof prover="2"><result status="valid" time="0.028508" steps="14"/></proof>
 </goal>
 <goal name="getSignedGoodTransactions&#39;vc" expl="VC for getSignedGoodTransactions" proved="true">
 <proof prover="2"><result status="valid" time="0.032494" steps="44"/></proof>
 </goal>
 <goal name="lossesInMoveOwnCoinsMsgs&#39;vc" expl="VC for lossesInMoveOwnCoinsMsgs" proved="true">
 <proof prover="2"><result status="valid" time="0.032732" steps="14"/></proof>
 </goal>
 <goal name="lossesInMoveOwnCoinsMsgsFull&#39;vc" expl="VC for lossesInMoveOwnCoinsMsgsFull" proved="true">
 <proof prover="2"><result status="valid" time="0.032609" steps="14"/></proof>
 </goal>
 <goal name="immediateAmountOnChain&#39;vc" expl="VC for immediateAmountOnChain" proved="true">
 <proof prover="2"><result status="valid" time="0.029270" steps="14"/></proof>
 </goal>
 <goal name="isArgsNewAndGood&#39;vc" expl="VC for isArgsNewAndGood" proved="true">
 <proof prover="2"><result status="valid" time="0.032434" steps="14"/></proof>
 </goal>
</theory>
<theory name="SignatureFunctionalityBasicLemmasAndProofs" proved="true">
 <goal name="getSignedByMonotone&#39;vc" expl="VC for getSignedByMonotone" proved="true">
 <proof prover="1"><result status="valid" time="1.670616" steps="170909"/></proof>
 </goal>
 <goal name="getSignedByMonotoneWeak&#39;vc" expl="VC for getSignedByMonotoneWeak" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedByMonotoneWeak&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.030457" steps="28"/></proof>
  </goal>
  <goal name="getSignedByMonotoneWeak&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.383973" steps="3475"/></proof>
  </goal>
  <goal name="getSignedByMonotoneWeak&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.983117" steps="105076"/></proof>
  </goal>
  <goal name="getSignedByMonotoneWeak&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.046855" steps="43"/></proof>
  </goal>
  <goal name="getSignedByMonotoneWeak&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.819418" steps="90083"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="preservedImplyGetSignedByListEq&#39;vc" expl="VC for preservedImplyGetSignedByListEq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="preservedImplyGetSignedByListEq&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.031005" steps="16"/></proof>
  </goal>
  <goal name="preservedImplyGetSignedByListEq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.229738" steps="10971"/></proof>
  </goal>
  <goal name="preservedImplyGetSignedByListEq&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044555" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="getSignedByAgreement&#39;vc" expl="VC for getSignedByAgreement" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedByAgreement&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.073213" steps="25"/></proof>
  </goal>
  <goal name="getSignedByAgreement&#39;vc.1" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="signatureFunctionalityTransition" arg2="in" arg3="Requires">
   <goal name="getSignedByAgreement&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="getSignedByAgreement&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.055883" steps="20"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getSignedByWhenSign&#39;vc" expl="VC for getSignedByWhenSign" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedByWhenSign&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.076621" steps="29"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.698461" steps="603716"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getSignedByWhenSign&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.091933" steps="34"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.3" expl="witness existence" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getSignedByWhenSign&#39;vc.3.0" expl="witness existence" proved="true">
   <proof prover="2"><result status="valid" time="0.073750" steps="30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.921292" steps="99480"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.069372" steps="39"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095684" steps="25"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getSignedByWhenSign&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.101980" steps="812"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.270608" steps="3107"/></proof>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getSignedByWhenSign&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="1" steplimit="800000"><result status="valid" time="0.740783" steps="137836"/></proof>
   </goal>
   <goal name="getSignedByWhenSign&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="1" steplimit="800000"><result status="valid" time="1.246900" steps="204375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="getSignedByWhenSign&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getSignedByWhenSign&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.107263" steps="126"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="signatureFunctionalityTransitionWhenSign&#39;vc" expl="VC for signatureFunctionalityTransitionWhenSign" proved="true">
 <proof prover="2"><result status="valid" time="0.030916" steps="24"/></proof>
 </goal>
</theory>
<theory name="GammaBasicProofs&#39;impl" proved="true">
 <goal name="gammaSpendContractSpends&#39;vc" expl="VC for gammaSpendContractSpends" proved="true">
 <proof prover="1"><result status="valid" time="7.965535" steps="449002"/></proof>
 </goal>
 <goal name="insertContractStatuses&#39;vc" expl="VC for insertContractStatuses" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insertContractStatuses&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074557" steps="381"/></proof>
  </goal>
  <goal name="insertContractStatuses&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.089900" steps="481"/></proof>
  </goal>
  <goal name="insertContractStatuses&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.029071" steps="113285"/></proof>
  </goal>
  <goal name="insertContractStatuses&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.610868" steps="242468"/></proof>
  </goal>
  <goal name="insertContractStatuses&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.070189" steps="26"/></proof>
  </goal>
  <goal name="insertContractStatuses&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.161075" steps="121957"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaInsertContractsInputSpentPreserved&#39;vc" expl="VC for gammaInsertContractsInputSpentPreserved" proved="true">
 <proof prover="2"><result status="valid" time="0.095969" steps="838"/></proof>
 </goal>
 <goal name="gammaInsertContractsNotInputUnspentPreserved&#39;vc" expl="VC for gammaInsertContractsNotInputUnspentPreserved" proved="true">
 <proof prover="2"><result status="valid" time="0.100400" steps="772"/></proof>
 </goal>
 <goal name="immediateTransactionNetLossNonNeg&#39;vc" expl="VC for immediateTransactionNetLossNonNeg" proved="true">
 <proof prover="2"><result status="valid" time="0.072826" steps="797"/></proof>
 </goal>
 <goal name="immediateLossesInMoveOwnCoinsMsgsNonNeg&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsNonNeg" proved="true">
 <proof prover="2"><result status="valid" time="0.194142" steps="1713"/></proof>
 </goal>
 <goal name="extractChannelByIdFromGammaCorrect&#39;vc" expl="VC for extractChannelByIdFromGammaCorrect" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.059786" steps="90"/></proof>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.257918" steps="9658"/></proof>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="extractChannelByIdFromGammaCorrect&#39;vc.2.0" expl="unreachable point" proved="true">
   <proof prover="2"><result status="valid" time="0.076501" steps="38"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="extractChannelByIdFromGammaCorrect&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.302103" steps="136002"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="extractChannelByIdFromGammaCorrect&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.563094" steps="157791"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.115374" steps="40"/></proof>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.049085" steps="22"/></proof>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097131" steps="95"/></proof>
  </goal>
  <goal name="extractChannelByIdFromGammaCorrect&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.254206" steps="134056"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.gammaSpendContractSpends&#39;refn&#39;vc" expl="VC for gammaSpendContractSpends&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030898" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.insertContractStatuses&#39;refn&#39;vc" expl="VC for insertContractStatuses&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.028991" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.gammaInsertContractsInputSpentPreserved&#39;refn&#39;vc" expl="VC for gammaInsertContractsInputSpentPreserved&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.029097" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.gammaInsertContractsNotInputUnspentPreserved&#39;refn&#39;vc" expl="VC for gammaInsertContractsNotInputUnspentPreserved&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.025741" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.immediateTransactionNetLossNonNeg&#39;refn&#39;vc" expl="VC for immediateTransactionNetLossNonNeg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.028873" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.immediateLossesInMoveOwnCoinsMsgsNonNeg&#39;refn&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsNonNeg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.032418" steps="14"/></proof>
 </goal>
 <goal name="GammaBasicLemmas&#39;impl_of.extractChannelByIdFromGammaCorrect&#39;refn&#39;vc" expl="VC for extractChannelByIdFromGammaCorrect&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030984" steps="14"/></proof>
 </goal>
</theory>
<theory name="ExistsFreshIdProofs&#39;impl" proved="true">
 <goal name="existsFreshId&#39;vc" expl="VC for existsFreshId" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="existsFreshId&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="2.541410" steps="17695"/></proof>
  </goal>
  <goal name="existsFreshId&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.090812" steps="33"/></proof>
  </goal>
  <goal name="existsFreshId&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="20.173258" steps="97296"/></proof>
  </goal>
  <goal name="existsFreshId&#39;vc.3" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="existsFreshId&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.109184" steps="710"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ExistsFreshIdLemmas&#39;impl_of.existsFreshId&#39;refn&#39;vc" expl="VC for existsFreshId&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030035" steps="14"/></proof>
 </goal>
</theory>
<theory name="EvaluatorBasicProofs&#39;impl" proved="true">
 <goal name="expectedSplitResolutionTotalPositive&#39;vc" expl="VC for expectedSplitResolutionTotalPositive" proved="true">
 <proof prover="2"><result status="valid" time="0.091174" steps="783"/></proof>
 </goal>
 <goal name="expectedSplitResolutionOptionPositive&#39;vc" expl="VC for expectedSplitResolutionOptionPositive" proved="true">
 <proof prover="2"><result status="valid" time="0.143187" steps="95"/></proof>
 </goal>
 <goal name="expectedSplitResolutionCompare2&#39;vc" expl="VC for expectedSplitResolutionCompare2" proved="true">
 <proof prover="2"><result status="valid" time="0.075199" steps="457"/></proof>
 </goal>
 <goal name="expectedSplitResolutionOptionCompare&#39;vc" expl="VC for expectedSplitResolutionOptionCompare" proved="true">
 <proof prover="2"><result status="valid" time="0.049220" steps="180"/></proof>
 </goal>
 <goal name="expectedSplitResolutionCompare3&#39;vc" expl="VC for expectedSplitResolutionCompare3" proved="true">
 <proof prover="1"><result status="valid" time="1.897323" steps="166060"/></proof>
 </goal>
 <goal name="expectedSplitResolutionCompare4&#39;vc" expl="VC for expectedSplitResolutionCompare4" proved="true">
 <proof prover="2"><result status="valid" time="0.350077" steps="3060"/></proof>
 </goal>
 <goal name="expectedSplitResolutionBound2&#39;vc" expl="VC for expectedSplitResolutionBound2" proved="true">
 <proof prover="2"><result status="valid" time="0.043150" steps="176"/></proof>
 </goal>
 <goal name="expectedSplitResolutionOrderIndependent&#39;vc" expl="VC for expectedSplitResolutionOrderIndependent" proved="true">
 <proof prover="2"><result status="valid" time="0.233116" steps="2563"/></proof>
 </goal>
 <goal name="extractRevocationsReceivedSpec&#39;vc" expl="VC for extractRevocationsReceivedSpec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="extractRevocationsReceivedSpec&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="extractRevocationsReceivedSpec&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="extractRevocationsReceived" arg2="in" arg3="H">
    <goal name="extractRevocationsReceivedSpec&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.665749" steps="4817"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="extractRevocationsReceivedSpec&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.418271" steps="196883"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correctAndEarlyEnoughRevokeMsgMonotone&#39;vc" expl="VC for correctAndEarlyEnoughRevokeMsgMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.123427" steps="741"/></proof>
 </goal>
 <goal name="immediateAccountEvaluationAlwaysPositive&#39;vc" expl="VC for immediateAccountEvaluationAlwaysPositive" proved="true">
 <proof prover="2"><result status="valid" time="3.022789" steps="40032"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionWhenSome&#39;vc" expl="VC for worstCaseChannelResolutionWhenSome" proved="true">
 <proof prover="2"><result status="valid" time="0.061541" steps="161"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionPositive&#39;vc" expl="VC for worstCaseChannelResolutionPositive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="worstCaseChannelResolutionPositive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="12.712293" steps="67470"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionPositive&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.205702" steps="508"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionPositive&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179241" steps="281"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionPositive&#39;vc.3" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
   <goal name="worstCaseChannelResolutionPositive&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="worstCaseChannelResolutionPositive&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.197157" steps="1473"/></proof>
    </goal>
    <goal name="worstCaseChannelResolutionPositive&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.166110" steps="320"/></proof>
    </goal>
    <goal name="worstCaseChannelResolutionPositive&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.123689" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="netLossNetLossFull&#39;vc" expl="VC for netLossNetLossFull" proved="true">
 <proof prover="2"><result status="valid" time="0.091726" steps="644"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionLeq&#39;vc" expl="VC for worstCaseChannelResolutionLeq" proved="true">
 <proof prover="2"><result status="valid" time="0.759076" steps="7980"/></proof>
 </goal>
 <goal name="transactionNetLossPositive&#39;vc" expl="VC for transactionNetLossPositive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transactionNetLossPositive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.053094" steps="33"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.841005" steps="96621"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.034023" steps="105642"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.001329" steps="104315"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.038743" steps="20"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.666436" steps="98303"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.799498" steps="103550"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="0.995045" steps="104005"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.050221" steps="41"/></proof>
  </goal>
  <goal name="transactionNetLossPositive&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.067825" steps="107322"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compareOptionArgs&#39;vc" expl="VC for compareOptionArgs" proved="true">
 <proof prover="2"><result status="valid" time="0.046653" steps="67"/></proof>
 </goal>
 <goal name="virtualContractStatusGood&#39;vc" expl="VC for virtualContractStatusGood" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="virtualContractStatusGood&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.059583" steps="36"/></proof>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.888705" steps="102929"/></proof>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="virtualContractStatusGood&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="10.032347" steps="896389"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.229305" steps="843"/></proof>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="virtualContractStatusGood&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.429648" steps="206576"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.5" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="virtualContractStatusGood&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.200238" steps="137475"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.167588" steps="137528"/></proof>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.676780" steps="303961"/></proof>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="virtualContractStatusGood&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.135537" steps="131300"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="virtualContractStatusGood&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="virtualContractStatusGood&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.271093" steps="139516"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="transactionNetLossPositiveFull&#39;vc" expl="VC for transactionNetLossPositiveFull" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transactionNetLossPositiveFull&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.152604" steps="121393"/></proof>
  </goal>
  <goal name="transactionNetLossPositiveFull&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.085199" steps="113850"/></proof>
  </goal>
  <goal name="transactionNetLossPositiveFull&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.173323" steps="388"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="channelExpectationsNonneg&#39;vc" expl="VC for channelExpectationsNonneg" proved="true">
 <proof prover="2"><result status="valid" time="0.095399" steps="683"/></proof>
 </goal>
 <goal name="channelExpectationsGNonneg&#39;vc" expl="VC for channelExpectationsGNonneg" proved="true">
 <proof prover="2"><result status="valid" time="0.055042" steps="184"/></proof>
 </goal>
 <goal name="ifNoExtractThenNoOnChannel&#39;vc" expl="VC for ifNoExtractThenNoOnChannel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="ifNoExtractThenNoOnChannel&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.598777" steps="199470"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.092280" steps="18"/></proof>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.887733" steps="165135"/></proof>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.548158" steps="3695"/></proof>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.4" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma">
   <goal name="ifNoExtractThenNoOnChannel&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.624975" steps="160689"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.146129" steps="1078"/></proof>
  </goal>
  <goal name="ifNoExtractThenNoOnChannel&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.701936" steps="174226"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ifExtractThenOnChannel&#39;vc" expl="VC for ifExtractThenOnChannel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ifExtractThenOnChannel&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma" arg2="in" arg3="Requires">
   <goal name="ifExtractThenOnChannel&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="19.172618" steps="704995"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ifExtractThenOnChannel&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma" arg2="in" arg3="Requires">
   <goal name="ifExtractThenOnChannel&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.886180" steps="166909"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ifExtractThenOnChannel&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelByIdFromGamma" arg2="in" arg3="Requires">
   <goal name="ifExtractThenOnChannel&#39;vc.2.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="2.670156" steps="187562"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="ifExtractThenOnChannel&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.274240" steps="137327"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ifExtractThenCorrectFunding&#39;vc" expl="VC for ifExtractThenCorrectFunding" proved="true">
 <proof prover="1"><result status="valid" time="11.265726" steps="525999"/></proof>
 </goal>
 <goal name="ifExtractThenNotPublicKeyAccount&#39;vc" expl="VC for ifExtractThenNotPublicKeyAccount" proved="true">
 <proof prover="2"><result status="valid" time="0.044363" steps="122"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc" expl="VC for worstCaseChannelResolutionGeneraAdversarySigsMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.045986" steps="29"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.115856" steps="467"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101237" steps="24"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.443454" steps="2776"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148735" steps="584"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121614" steps="46"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.041503" steps="55"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194827" steps="281"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.093752" steps="380"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102965" steps="378"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092224" steps="382"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109406" steps="44"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.513093" steps="4129"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.548199" steps="26159"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.14.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.235631" steps="426"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.106976" steps="46"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.16" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.16.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.16.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.112848" steps="47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.890958" steps="439349"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.18" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.18.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.18.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="21.331096" steps="158471"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.111890" steps="300"/></proof>
  </goal>
  <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.057902" steps="36"/></proof>
   </goal>
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.047499" steps="34"/></proof>
   </goal>
   <goal name="worstCaseChannelResolutionGeneraAdversarySigsMonotone&#39;vc.20.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.044275" steps="34"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="worstCaseChannelResolutionFullGeneraAdversarySigsMonotone&#39;vc" expl="VC for worstCaseChannelResolutionFullGeneraAdversarySigsMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.335757" steps="2666"/></proof>
 </goal>
 <goal name="getSignedGoodTransactionsMonotone&#39;vc" expl="VC for getSignedGoodTransactionsMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedGoodTransactionsMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.745100" steps="100045"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsMonotone&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182041" steps="191"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174600" steps="1236"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsMonotone&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
   <goal name="getSignedGoodTransactionsMonotone&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.245103" steps="205658"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="getSignedGoodTransactionsMonotone&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.046721" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="partyExpectationsAdversarySigsMonotone&#39;vc" expl="VC for partyExpectationsAdversarySigsMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.369596" steps="116834"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.387311" steps="2828"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.988805" steps="8636"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="9.192522" steps="71555"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.995987" steps="113774"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.220873" steps="129919"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.252208" steps="2077"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.667200" steps="166074"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.646139" steps="207510"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.134962" steps="421400"/></proof>
  </goal>
  <goal name="partyExpectationsAdversarySigsMonotone&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.162926" steps="115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaCoherentSoImmediateAmountOnChainNonNeg&#39;vc" expl="VC for gammaCoherentSoImmediateAmountOnChainNonNeg" proved="true">
 <proof prover="2"><result status="valid" time="0.597771" steps="4736"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionTotalPositive&#39;refn&#39;vc" expl="VC for expectedSplitResolutionTotalPositive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.031582" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionOptionPositive&#39;refn&#39;vc" expl="VC for expectedSplitResolutionOptionPositive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.040093" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionCompare2&#39;refn&#39;vc" expl="VC for expectedSplitResolutionCompare2&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037701" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionOptionCompare&#39;refn&#39;vc" expl="VC for expectedSplitResolutionOptionCompare&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.036430" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionCompare3&#39;refn&#39;vc" expl="VC for expectedSplitResolutionCompare3&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.034872" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionCompare4&#39;refn&#39;vc" expl="VC for expectedSplitResolutionCompare4&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.035693" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionBound2&#39;refn&#39;vc" expl="VC for expectedSplitResolutionBound2&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.042026" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.expectedSplitResolutionOrderIndependent&#39;refn&#39;vc" expl="VC for expectedSplitResolutionOrderIndependent&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.045575" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.extractRevocationsReceivedSpec&#39;refn&#39;vc" expl="VC for extractRevocationsReceivedSpec&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037288" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.correctAndEarlyEnoughRevokeMsgMonotone&#39;refn&#39;vc" expl="VC for correctAndEarlyEnoughRevokeMsgMonotone&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.033364" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.immediateAccountEvaluationAlwaysPositive&#39;refn&#39;vc" expl="VC for immediateAccountEvaluationAlwaysPositive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.031905" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.worstCaseChannelResolutionWhenSome&#39;refn&#39;vc" expl="VC for worstCaseChannelResolutionWhenSome&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.028315" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.worstCaseChannelResolutionPositive&#39;refn&#39;vc" expl="VC for worstCaseChannelResolutionPositive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.050843" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.netLossNetLossFull&#39;refn&#39;vc" expl="VC for netLossNetLossFull&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.045935" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.worstCaseChannelResolutionLeq&#39;refn&#39;vc" expl="VC for worstCaseChannelResolutionLeq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.047225" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.transactionNetLossPositive&#39;refn&#39;vc" expl="VC for transactionNetLossPositive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037772" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.virtualContractStatusGood&#39;refn&#39;vc" expl="VC for virtualContractStatusGood&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030012" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.transactionNetLossPositiveFull&#39;refn&#39;vc" expl="VC for transactionNetLossPositiveFull&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.029918" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.channelExpectationsNonneg&#39;refn&#39;vc" expl="VC for channelExpectationsNonneg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.033965" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.channelExpectationsGNonneg&#39;refn&#39;vc" expl="VC for channelExpectationsGNonneg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030664" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.ifNoExtractThenNoOnChannel&#39;refn&#39;vc" expl="VC for ifNoExtractThenNoOnChannel&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.032632" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.ifExtractThenOnChannel&#39;refn&#39;vc" expl="VC for ifExtractThenOnChannel&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.030016" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.ifExtractThenCorrectFunding&#39;refn&#39;vc" expl="VC for ifExtractThenCorrectFunding&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.029959" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.ifExtractThenNotPublicKeyAccount&#39;refn&#39;vc" expl="VC for ifExtractThenNotPublicKeyAccount&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.038353" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.partyExpectationsAdversarySigsMonotone&#39;refn&#39;vc" expl="VC for partyExpectationsAdversarySigsMonotone&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.035133" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorBasicLemmas&#39;impl_of.gammaCoherentSoImmediateAmountOnChainNonNeg&#39;refn&#39;vc" expl="VC for gammaCoherentSoImmediateAmountOnChainNonNeg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.040623" steps="14"/></proof>
 </goal>
</theory>
<theory name="EvaluatorOnChainForPartyProofs&#39;impl" proved="true">
 <goal name="noTxNoExtract&#39;vc" expl="VC for noTxNoExtract" proved="true">
 <proof prover="2"><result status="valid" time="0.048638" steps="199"/></proof>
 </goal>
 <goal name="getSignedGoodTransactionsWhenSigningNotTx&#39;vc" expl="VC for getSignedGoodTransactionsWhenSigningNotTx" proved="true">
 <proof prover="1"><result status="valid" time="4.428515" steps="316493"/></proof>
 </goal>
 <goal name="numOccAsFilter&#39;vc" expl="VC for numOccAsFilter" proved="true">
 <proof prover="1"><result status="valid" time="3.163735" steps="215901"/></proof>
 </goal>
 <goal name="mapInjective&#39;vc" expl="VC for mapInjective" proved="true">
 <proof prover="1"><result status="valid" time="2.062287" steps="174158"/></proof>
 </goal>
 <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc" expl="VC for getSignedGoodTransactionsWhenSigningTx" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.066244" steps="16"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.029214" steps="18"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.133539" steps="225"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.044419" steps="147"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114404" steps="48"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.048729" steps="49"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.197575" steps="1456"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.043898" steps="55"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.132914" steps="61"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.117302" steps="249321"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.370811" steps="2663"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121403" steps="693"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.437907" steps="3006"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.536614" steps="3151"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097288" steps="77"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157359" steps="83"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.098423" steps="521"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137167" steps="119"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.159988" steps="296"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.064421" steps="49"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163811" steps="409"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.070905" steps="412"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145666" steps="848"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181413" steps="1531"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.129335" steps="765"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131855" steps="55"/></proof>
  </goal>
  <goal name="getSignedGoodTransactionsWhenSigningTx&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.369709" steps="2844"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsWhenSigningTx" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124452" steps="87"/></proof>
  </goal>
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.236816" steps="1848"/></proof>
  </goal>
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.129295" steps="106"/></proof>
  </goal>
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161374" steps="187"/></proof>
  </goal>
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.537024" steps="4020"/></proof>
  </goal>
  <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.101544" steps="27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="immediateLossesInMoveOwnCoinsMsgsWhenSigningNotTx&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsWhenSigningNotTx" proved="true">
 <proof prover="2"><result status="valid" time="0.245667" steps="1848"/></proof>
 </goal>
 <goal name="EvaluatorOnChainForPartyLemmas&#39;impl_of.immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;refn&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsWhenSigningTx&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.033899" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorOnChainForPartyLemmas&#39;impl_of.immediateLossesInMoveOwnCoinsMsgsWhenSigningNotTx&#39;refn&#39;vc" expl="VC for immediateLossesInMoveOwnCoinsMsgsWhenSigningNotTx&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.029868" steps="14"/></proof>
 </goal>
</theory>
<theory name="GammaInvariantProofs&#39;impl" proved="true">
 <goal name="channelsUniqueById&#39;vc" expl="VC for channelsUniqueById" proved="true">
 <proof prover="2"><result status="valid" time="1.004496" steps="10124"/></proof>
 </goal>
 <goal name="fullChannelsUniqueByContractStatus&#39;vc" expl="VC for fullChannelsUniqueByContractStatus" proved="true">
 <proof prover="2"><result status="valid" time="0.184189" steps="1169"/></proof>
 </goal>
 <goal name="fullChannelUniqueByFounding&#39;vc" expl="VC for fullChannelUniqueByFounding" proved="true">
 <proof prover="2"><result status="valid" time="0.174128" steps="365"/></proof>
 </goal>
 <goal name="fullChannelsUnique&#39;vc" expl="VC for fullChannelsUnique" proved="true">
 <proof prover="2"><result status="valid" time="0.395914" steps="2866"/></proof>
 </goal>
 <goal name="gammaSpendContractInvariant&#39;vc" expl="VC for gammaSpendContractInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaSpendContractInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.677233" steps="91152"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="allChannelsFunded">
   <goal name="gammaSpendContractInvariant&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.423192" steps="134375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.655351" steps="139585"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.248551" steps="227345"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="27.075238" steps="1142688"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.004172" steps="98303"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.032158" steps="98307"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.896834" steps="98388"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.301685" steps="111066"/></proof>
  </goal>
  <goal name="gammaSpendContractInvariant&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.287658" steps="107814"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaInsertContractsDisputeOpensFundedEasy&#39;vc" expl="VC for gammaInsertContractsDisputeOpensFundedEasy" proved="true">
 <proof prover="2"><result status="valid" time="0.419933" steps="2889"/></proof>
 </goal>
 <goal name="gammaInsertContractsDisputeOpensFundedHard&#39;vc" expl="VC for gammaInsertContractsDisputeOpensFundedHard" proved="true">
 <proof prover="2"><result status="valid" time="0.422960" steps="2904"/></proof>
 </goal>
 <goal name="gammaInsertContractsAllChannelsFunded&#39;vc" expl="VC for gammaInsertContractsAllChannelsFunded" proved="true">
 <proof prover="2"><result status="valid" time="0.665522" steps="5068"/></proof>
 </goal>
 <goal name="gammaInsertContractsDisputeOpensUniqueByIdEasy&#39;vc" expl="VC for gammaInsertContractsDisputeOpensUniqueByIdEasy" proved="true">
 <proof prover="2"><result status="valid" time="0.208769" steps="1639"/></proof>
 </goal>
 <goal name="gammaInsertContractsDisputeOpensUniqueByIdHard&#39;vc" expl="VC for gammaInsertContractsDisputeOpensUniqueByIdHard" proved="true">
 <proof prover="2"><result status="valid" time="0.147673" steps="853"/></proof>
 </goal>
 <goal name="gammaInsertContractsNormalCorrectFunding&#39;vc" expl="VC for gammaInsertContractsNormalCorrectFunding" proved="true">
 <proof prover="2"><result status="valid" time="0.194526" steps="193"/></proof>
 </goal>
 <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc" expl="VC for gammaInsertContractsGammaNoDuplicates" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.072299" steps="253"/></proof>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.373296" steps="121222"/></proof>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="8.666107" steps="507586"/></proof>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="contractStatusFreshForGamma" arg2="in" arg3="Requires1">
   <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.093687" steps="246"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.043654" steps="109464"/></proof>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.021215" steps="159589"/></proof>
  </goal>
  <goal name="gammaInsertContractsGammaNoDuplicates&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.066652" steps="155372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaInsertContractsDisputeOpenCorrectFunding&#39;vc" expl="VC for gammaInsertContractsDisputeOpenCorrectFunding" proved="true">
 <proof prover="2"><result status="valid" time="0.181384" steps="217"/></proof>
 </goal>
 <goal name="gammaInsertCurrentAreUsed&#39;vc" expl="VC for gammaInsertCurrentAreUsed" proved="true">
 <proof prover="2"><result status="valid" time="0.607170" steps="4162"/></proof>
 </goal>
 <goal name="idFreshSoPublicKeyAccountFresh&#39;vc" expl="VC for idFreshSoPublicKeyAccountFresh" proved="true">
 <proof prover="2"><result status="valid" time="0.862909" steps="7421"/></proof>
 </goal>
 <goal name="normalUnspentSoDisputeOpenFresh&#39;vc" expl="VC for normalUnspentSoDisputeOpenFresh" proved="true">
 <proof prover="2"><result status="valid" time="1.631347" steps="13826"/></proof>
 </goal>
 <goal name="publicKeyAccountUnspentSoNormalFresh&#39;vc" expl="VC for publicKeyAccountUnspentSoNormalFresh" proved="true">
 <proof prover="1"><result status="valid" time="2.683579" steps="162638"/></proof>
 </goal>
 <goal name="spendingChannelsPreservesFreshness&#39;vc" expl="VC for spendingChannelsPreservesFreshness" proved="true">
 <proof prover="1"><result status="valid" time="2.038727" steps="174523"/></proof>
 </goal>
 <goal name="addFreshDoesNotAddDuplicates&#39;vc" expl="VC for addFreshDoesNotAddDuplicates" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.175265" steps="104577"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.754334" steps="96733"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.2" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="Assert">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
    <goal name="addFreshDoesNotAddDuplicates&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="4.252723" steps="267212"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.510547" steps="128854"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.505283" steps="342703"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.580003" steps="134437"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.256727" steps="108291"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066326" steps="24"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.8" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="Assert">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
    <goal name="addFreshDoesNotAddDuplicates&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="6.176199" steps="314422"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167805" steps="202"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.10" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert2">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="8.978224" steps="420942"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.651632" steps="134816"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.204322" steps="104370"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.13" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.788493" steps="96617"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.14" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="Assert">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.14.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
    <goal name="addFreshDoesNotAddDuplicates&#39;vc.14.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="4.750526" steps="266294"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185165" steps="204"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.418278" steps="340603"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.17" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert2">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.354257" steps="134210"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.438555" steps="113778"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.710356" steps="96593"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.20" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="Assert">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
    <goal name="addFreshDoesNotAddDuplicates&#39;vc.20.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="6.713624" steps="359670"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.21" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.279066" steps="111622"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert2">
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="10.912590" steps="523548"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.23" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.286055" steps="129094"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.260072" steps="129387"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="15.009850" steps="545450"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.117420" steps="360182"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.495130" steps="137896"/></proof>
  </goal>
  <goal name="addFreshDoesNotAddDuplicates&#39;vc.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.28.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.039095" steps="32"/></proof>
   </goal>
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.28.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.038314" steps="32"/></proof>
   </goal>
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.28.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.038437" steps="34"/></proof>
   </goal>
   <goal name="addFreshDoesNotAddDuplicates&#39;vc.28.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.033899" steps="40"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc" expl="VC for moveOwnCoinsOnChainFreshSoIdsDifferent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.037962" steps="129"/></proof>
  </goal>
  <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Requires">
    <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.1.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="1.609486" steps="141232"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Requires">
   <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.2.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="16.139730" steps="655049"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="moveOwnCoinsOnChainFreshSoIdsDifferent&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.102090" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="openChannelUniqueId&#39;vc" expl="VC for openChannelUniqueId" proved="true">
 <proof prover="1"><result status="valid" time="3.150701" steps="198921"/></proof>
 </goal>
 <goal name="gammaProcessMessageFreshWithInvariant&#39;vc" expl="VC for gammaProcessMessageFreshWithInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.356776" steps="130245"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.399003" steps="140730"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.330643" steps="2840"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.678167" steps="5880"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.110555" steps="36"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="15.584856" steps="124841"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.6" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="3.785396" steps="242251"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.072282" steps="133555"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.431622" steps="244238"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.807468" steps="208981"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.103013" steps="42"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.584952" steps="244351"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="11.629237" steps="88584"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.110930" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="7.389608" steps="59599"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.053030" steps="133587"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="7.863270" steps="65807"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.560945" steps="231729"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.265151" steps="325714"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="17.557632" steps="1481311"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.091201" steps="36"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="8.703318" steps="67282"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.111457" steps="133545"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.010088" steps="157996"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194640" steps="1165"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.200448" steps="9618"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.137244" steps="184251"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.151312" steps="225"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.28" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.678237" steps="153920"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.29" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.29.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.066609" steps="182417"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.068182" steps="92"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.31" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.096464" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.131715" steps="183411"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.33" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.33.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.33.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.157576" steps="76"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.34" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.092478" steps="46"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.35" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.080227" steps="27103"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.36" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.36.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.587862" steps="203080"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.37" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.106705" steps="50"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.38" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.334477" steps="20045"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.39" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.949066" steps="173174"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.40" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.106816" steps="52"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.41" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.137579" steps="95"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.42" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.345289" steps="183270"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.246133" steps="150237"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.44" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159288" steps="252"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.45" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.061242" steps="213333"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.46" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.210480" steps="215378"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.47" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.47.0" expl="VC for gammaProcessMessageFreshWithInvariant" proved="true">
   <proof prover="1"><result status="valid" time="3.094335" steps="214293"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.48" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.104850" steps="36"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.49" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="14.674479" steps="105265"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.50" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.706858" steps="241226"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.51" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.100736" steps="38"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.52" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.771655" steps="243763"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.53" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.134314" steps="8011"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.54" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.101836" steps="133441"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.55" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="14.405904" steps="105197"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.56" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="16.089063" steps="120114"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.57" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.111288" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.58" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="9.008308" steps="70297"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.59" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.056315" steps="46"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.60" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="7.638669" steps="59135"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.61" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.428709" steps="227990"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.62" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.62.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="7.484125" steps="324223"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.63" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.63.0" expl="VC for gammaProcessMessageFreshWithInvariant" proved="true">
   <proof prover="1"><result status="valid" time="3.152557" steps="220797"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.64" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180178" steps="1077"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.65" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.118607" steps="180711"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.66" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.021936" steps="8619"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.67" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044496" steps="40"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.68" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.972828" steps="161032"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.69" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148557" steps="80"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.70" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.113752" steps="42"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.71" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.163672" steps="81"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.72" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.72.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.157660" steps="1081"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.73" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.040414" steps="46"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.74" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.74.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.439935" steps="154375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.75" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.084727" steps="347"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.76" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.111817" steps="48"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.77" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.041783" steps="88"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.78" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.052641" steps="50"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.79" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.154362" steps="92"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.80" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.138044" steps="213601"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.81" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.538496" steps="213272"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.82" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="15.474276" steps="666224"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.83" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.953787" steps="157833"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.84" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.381133" steps="201274"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.85" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="8.619842" steps="67198"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.86" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.112826" steps="18408"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.87" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.171031" steps="42"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.88" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.004374" steps="161527"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.89" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.715335" steps="154496"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.90" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.050339" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.91" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.168577" steps="229"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.92" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.533223" steps="12586"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.93" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.053440" steps="48"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.94" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182958" steps="232"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.95" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148004" steps="870"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.96" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.301471" steps="149901"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.97" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.155614" steps="247"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.98" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.109407" steps="52"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.99" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.992980" steps="161790"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.100" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.869891" steps="7071"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.101" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.101.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.101.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.081799" steps="89"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.102" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.927391" steps="7765"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.103" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.874613" steps="195915"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.104" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.595622" steps="228487"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.105" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.105.0" expl="VC for gammaProcessMessageFreshWithInvariant" proved="true">
   <proof prover="1"><result status="valid" time="3.161214" steps="222353"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.106" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.899071" steps="158101"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.107" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.597733" steps="197809"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.108" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.247812" steps="201938"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.109" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="9.769982" steps="77617"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.110" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.283596" steps="149843"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.111" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.156207" steps="227"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.112" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.156873" steps="219"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.113" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.118405" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.114" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.191035" steps="220"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.115" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.199244" steps="10127"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.116" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.116.0" expl="VC for gammaProcessMessageFreshWithInvariant" proved="true">
   <proof prover="1"><result status="valid" time="1.722539" steps="154156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.117" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.174041" steps="223"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.118" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.535204" steps="192987"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.119" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.112375" steps="50"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.120" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.056404" steps="238"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.121" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.103766" steps="52"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.122" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.170471" steps="228"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.123" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.591385" steps="224165"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.124" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.420278" steps="223437"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.125" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="16.468899" steps="753999"/></proof>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.047294" steps="35"/></proof>
   </goal>
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.325973" steps="2502"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.338946" steps="2801"/></proof>
     </goal>
     <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.042371" steps="60"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.044842" steps="72"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.1.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.045320" steps="60"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.126.1.1.1.3" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.045149" steps="60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.049920" steps="42"/></proof>
   </goal>
   <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.052443" steps="47"/></proof>
    </goal>
    <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.052752" steps="53"/></proof>
     </goal>
     <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.058498" steps="82"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.057075" steps="117"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.1.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.048545" steps="83"/></proof>
      </goal>
      <goal name="gammaProcessMessageFreshWithInvariant&#39;vc.127.1.1.1.3" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.085803" steps="490"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessCoherent&#39;vc" expl="VC for gammaProcessCoherent" proved="true">
 <proof prover="2"><result status="valid" time="0.232447" steps="528"/></proof>
 </goal>
 <goal name="msgFreshSoEvalOutFresh&#39;vc" expl="VC for msgFreshSoEvalOutFresh" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgFreshSoEvalOutFresh&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoEvalOutFresh&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.203273" steps="29454"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgFreshSoEvalOutFresh&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.824519" steps="180282"/></proof>
  </goal>
  <goal name="msgFreshSoEvalOutFresh&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.248723" steps="29453"/></proof>
  </goal>
  <goal name="msgFreshSoEvalOutFresh&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.992969" steps="290021"/></proof>
  </goal>
  <goal name="msgFreshSoEvalOutFresh&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoEvalOutFresh&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.107504" steps="37"/></proof>
   </goal>
   <goal name="msgFreshSoEvalOutFresh&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.110000" steps="37"/></proof>
   </goal>
   <goal name="msgFreshSoEvalOutFresh&#39;vc.4.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.112965" steps="38"/></proof>
   </goal>
   <goal name="msgFreshSoEvalOutFresh&#39;vc.4.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.075895" steps="38"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="addMoneyFromVoidPreservesCoherent&#39;vc" expl="VC for addMoneyFromVoidPreservesCoherent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.0.0" expl="VC for addMoneyFromVoidPreservesCoherent" proved="true">
   <proof prover="1"><result status="valid" time="1.098320" steps="102191"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.058420" steps="40"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.189250" steps="147"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.898945" steps="6362"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099322" steps="441"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.132632" steps="9937"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.235457" steps="1847"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150526" steps="181"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143161" steps="51"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108032" steps="565"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.669761" steps="9596"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.312024" steps="1897"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.515372" steps="4866"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066887" steps="57"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174470" steps="225"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.552573" steps="3529"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.574836" steps="35479"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.603127" steps="144091"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.811275" steps="15167"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.445890" steps="2933"/></proof>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.20" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="gammaCoherent">
   <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.20.0" expl="VC for addMoneyFromVoidPreservesCoherent" proved="true">
   <proof prover="1"><result status="valid" time="3.705495" steps="240514"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addMoneyFromVoidPreservesCoherent&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.051204" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.channelsUniqueById&#39;refn&#39;vc" expl="VC for channelsUniqueById&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037912" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.fullChannelsUniqueByContractStatus&#39;refn&#39;vc" expl="VC for fullChannelsUniqueByContractStatus&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.040555" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.fullChannelUniqueByFounding&#39;refn&#39;vc" expl="VC for fullChannelUniqueByFounding&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.046240" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.fullChannelsUnique&#39;refn&#39;vc" expl="VC for fullChannelsUnique&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037113" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.msgFreshSoEvalOutFresh&#39;refn&#39;vc" expl="VC for msgFreshSoEvalOutFresh&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.038586" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.gammaProcessCoherent&#39;refn&#39;vc" expl="VC for gammaProcessCoherent&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.040871" steps="14"/></proof>
 </goal>
 <goal name="GammaInvariantLemmas&#39;impl_of.addMoneyFromVoidPreservesCoherent&#39;refn&#39;vc" expl="VC for addMoneyFromVoidPreservesCoherent&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.035546" steps="14"/></proof>
 </goal>
</theory>
<theory name="EvaluatorPreservationProofs&#39;impl" proved="true">
 <goal name="worstCaseChannelResolutionMsgsPermutationsInvariant&#39;vc" expl="VC for worstCaseChannelResolutionMsgsPermutationsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="2.155132" steps="18032"/></proof>
 </goal>
 <goal name="amountReviewedWhenOpened&#39;vc" expl="VC for amountReviewedWhenOpened" proved="true">
 <proof prover="2"><result status="valid" time="0.035131" steps="14"/></proof>
 </goal>
 <goal name="worstCaseChannelsResolution&#39;vc" expl="VC for worstCaseChannelsResolution" proved="true">
 <proof prover="2"><result status="valid" time="0.038737" steps="14"/></proof>
 </goal>
 <goal name="worstCaseChannelsResolutionGeneral&#39;vc" expl="VC for worstCaseChannelsResolutionGeneral" proved="true">
 <proof prover="2"><result status="valid" time="0.151098" steps="14"/></proof>
 </goal>
 <goal name="worstCaseChannelsResolutionWorstCaseChannelsResolutionGeneral&#39;vc" expl="VC for worstCaseChannelsResolutionWorstCaseChannelsResolutionGeneral" proved="true">
 <proof prover="2"><result status="valid" time="1.076618" steps="7389"/></proof>
 </goal>
 <goal name="worstCaseChannelsStatusResolution&#39;vc" expl="VC for worstCaseChannelsStatusResolution" proved="true">
 <proof prover="1"><result status="valid" time="0.932098" steps="108362"/></proof>
 </goal>
 <goal name="worstCaseChannelsStatusResolutionGeneral&#39;vc" expl="VC for worstCaseChannelsStatusResolutionGeneral" proved="true">
 <proof prover="2"><result status="valid" time="0.040281" steps="14"/></proof>
 </goal>
 <goal name="worstCaseChannelsStatusResolutionWorstCaseChannelsStatusResolutionGeneral&#39;vc" expl="VC for worstCaseChannelsStatusResolutionWorstCaseChannelsStatusResolutionGeneral" proved="true">
 <proof prover="2"><result status="valid" time="0.143764" steps="754"/></proof>
 </goal>
 <goal name="msgNetLossMsgNetLossGeneral&#39;vc" expl="VC for msgNetLossMsgNetLossGeneral" proved="true">
 <proof prover="2"><result status="valid" time="0.186585" steps="78"/></proof>
 </goal>
 <goal name="msgDeltaMsgDeltaGeneral&#39;vc" expl="VC for msgDeltaMsgDeltaGeneral" proved="true">
 <proof prover="2"><result status="valid" time="0.176967" steps="100"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionGPositive&#39;vc" expl="VC for worstCaseChannelResolutionGPositive" proved="true">
 <proof prover="2"><result status="valid" time="0.173706" steps="214"/></proof>
 </goal>
 <goal name="deltaPositiveWhenOpenDispute&#39;vc" expl="VC for deltaPositiveWhenOpenDispute" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenOpenDispute&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="evalOut">
    <goal name="deltaPositiveWhenOpenDispute&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenOpenDispute&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="worstCaseChannelsResolution">
      <goal name="deltaPositiveWhenOpenDispute&#39;vc.0.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="4.064320" steps="284271"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="afterChannelVal">
   <goal name="deltaPositiveWhenOpenDispute&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
    <goal name="deltaPositiveWhenOpenDispute&#39;vc.1.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="1.438690" steps="126682"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.297184" steps="1967"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.522104" steps="199541"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deltaPositiveWhenOpenDispute&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="afterChannelVal">
    <goal name="deltaPositiveWhenOpenDispute&#39;vc.4.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
     <goal name="deltaPositiveWhenOpenDispute&#39;vc.4.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="2.512606" steps="199520"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.120075" steps="188083"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123574" steps="313"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.487034" steps="2208"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.611665" steps="207707"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.276630" steps="1773"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.196948" steps="441"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.581932" steps="3541"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.911047" steps="271365"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.13" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenOpenDispute&#39;vc.13.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="evalOut">
    <goal name="deltaPositiveWhenOpenDispute&#39;vc.13.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenOpenDispute&#39;vc.13.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="worstCaseChannelsResolution">
      <goal name="deltaPositiveWhenOpenDispute&#39;vc.13.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="4.240023" steps="281943"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145781" steps="185"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.15" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="afterChannelVal">
   <goal name="deltaPositiveWhenOpenDispute&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
    <goal name="deltaPositiveWhenOpenDispute&#39;vc.15.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="5.490934" steps="352299"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDispute&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.175926" steps="262"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenOpenDisputeG&#39;vc" expl="VC for deltaPositiveWhenOpenDisputeG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.106126" steps="30"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.052892" steps="30"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.067034" steps="30"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.3" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.3.0.0" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.3.0.0.0" expl="precondition" proved="true">
     <transf name="unfold" proved="true" arg1="evalOut">
      <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.3.0.0.0.0" expl="precondition" proved="true">
      <proof prover="1"><result status="valid" time="0.994494" steps="117056"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.050490" steps="30"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178747" steps="66"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="evalOut">
      <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.6.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="4.142786" steps="280846"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.397310" steps="2549"/></proof>
  </goal>
  <goal name="deltaPositiveWhenOpenDisputeG&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.217620" steps="1364"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenRevoke&#39;vc" expl="VC for deltaPositiveWhenRevoke" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenRevoke&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.054173" steps="107"/></proof>
  </goal>
  <goal name="deltaPositiveWhenRevoke&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenRevoke&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msg">
    <goal name="deltaPositiveWhenRevoke&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenRevoke&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="worstCaseChannelsResolution">
      <goal name="deltaPositiveWhenRevoke&#39;vc.1.0.0.0.0" expl="assertion" proved="true">
      <transf name="unfold" proved="true" arg1="evalOut">
       <goal name="deltaPositiveWhenRevoke&#39;vc.1.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="2"><result status="valid" time="0.208673" steps="1991"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevoke&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="beforeVal" arg2="in" arg3="Assert">
   <goal name="deltaPositiveWhenRevoke&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="afterVal" arg2="in" arg3="Assert">
    <goal name="deltaPositiveWhenRevoke&#39;vc.2.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelResolution" arg2="in" arg3="Assert">
     <goal name="deltaPositiveWhenRevoke&#39;vc.2.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="expectedSplitResolutionWhenDispute_comp" arg2="in" arg3="Assert">
      <goal name="deltaPositiveWhenRevoke&#39;vc.2.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="3.345166" steps="257441"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevoke&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="beforeVal" arg2="in" arg3="Assert">
   <goal name="deltaPositiveWhenRevoke&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="afterVal" arg2="in" arg3="Assert">
    <goal name="deltaPositiveWhenRevoke&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelResolution" arg2="in" arg3="Assert">
     <goal name="deltaPositiveWhenRevoke&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="expectedSplitResolutionWhenDispute_comp" arg2="in" arg3="Assert">
      <goal name="deltaPositiveWhenRevoke&#39;vc.3.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="19.980773" steps="726675"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevoke&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.043386" steps="40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenRevokeG&#39;vc" expl="VC for deltaPositiveWhenRevokeG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenRevokeG&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.052429" steps="28"/></proof>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenRevokeG&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.993500" steps="117510"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.2" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenRevokeG&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.066565" steps="117513"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.062298" steps="28"/></proof>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121678" steps="60"/></proof>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.5" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenRevokeG&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.710193" steps="180413"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.266203" steps="1550"/></proof>
  </goal>
  <goal name="deltaPositiveWhenRevokeG&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.181041" steps="1090"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc" expl="VC for deltaPositiveWhenClaimAfterTimeout" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.075653" steps="76"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msg">
    <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="evalOut">
      <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.1.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="0.163720" steps="1289"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.142749" steps="937"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msg">
    <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="evalOut">
      <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.3.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="0.113786" steps="347"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDelta">
   <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msg">
    <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.4.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolution">
     <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.4.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="evalOut">
      <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.4.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="0.110767" steps="44"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.142627" steps="127"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121469" steps="415"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.7" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="beforeVal">
   <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelResolution">
    <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.7.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert5">
     <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.7.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="8.295730" steps="382309"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.134330" steps="52"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeout&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.133746" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc" expl="VC for deltaPositiveWhenClaimAfterTimeoutG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.183723" steps="26"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.053910" steps="26"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.109980" steps="26"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.067540" steps="26"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.052708" steps="44"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.056967" steps="52"/></proof>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="5.539828" steps="45350"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenClaimAfterTimeoutG&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.144812" steps="815"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc" expl="VC for deltaPositiveWhenMoveOwnCoinsOtherPartyG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="4.560751" steps="259549"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="transactionNetLossFull">
     <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="1.033891" steps="8281"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.887635" steps="7891"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.018872" steps="8891"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="transactionNetLossFull">
    <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.4.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.085146" steps="8560"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137176" steps="79"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.096969" steps="8641"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.504605" steps="12170"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.084069" steps="8324"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.750793" steps="8121"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.079808" steps="8795"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="transactionNetLossFull">
    <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.11.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.143495" steps="9029"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130193" steps="80"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.121080" steps="8663"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.341870" steps="10214"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.719772" steps="195960"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsOtherPartyG&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.649731" steps="4757"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc" expl="VC for deltaPositiveWhenMoveOwnCoinsChannelG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="4.699320" steps="264611"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.938069" steps="7930"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.158987" steps="9192"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="40.550857" steps="122734"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.809492" steps="6119"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="61.401637" steps="326559"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.926581" steps="7806"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.114931" steps="8826"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.8.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.8.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="40.494373" steps="120670"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.757869" steps="5873"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="59.366188" steps="308571"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="msgNetLossGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.11.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="evalOut">
     <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="3.791506" steps="31621"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsChannelG&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.675794" steps="4737"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc" expl="VC for deltaPositiveWhenMoveOwnCoinsVoidG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="2.318608" steps="166626"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="62.547809" steps="348640"/></proof>
  </goal>
  <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.2" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="msgDeltaGeneral">
   <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="worstCaseChannelsStatusResolutionGeneral">
    <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="worstCaseChannelsResolutionGeneral">
     <goal name="deltaPositiveWhenMoveOwnCoinsVoidG&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="2.495350" steps="174108"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="deltaPositiveG&#39;vc" expl="VC for deltaPositiveG" proved="true">
 <proof prover="2"><result status="valid" time="0.779343" steps="5880"/></proof>
 </goal>
 <goal name="differentInputSoNotCorrectRevokeForStatus&#39;vc" expl="VC for differentInputSoNotCorrectRevokeForStatus" proved="true">
 <proof prover="2"><result status="valid" time="0.230490" steps="1420"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionSkipNonCorrectG&#39;vc" expl="VC for worstCaseChannelResolutionSkipNonCorrectG" proved="true">
 <proof prover="2"><result status="valid" time="2.454562" steps="18798"/></proof>
 </goal>
 <goal name="partyExpectationsSkipNonCorrectG&#39;vc" expl="VC for partyExpectationsSkipNonCorrectG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyExpectationsSkipNonCorrectG&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="moneyInChannelsFull">
   <goal name="partyExpectationsSkipNonCorrectG&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.064470" steps="200457"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partyExpectationsSkipNonCorrectG&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="transactionNetLossFull">
   <goal name="partyExpectationsSkipNonCorrectG&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="7.304519" steps="371759"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partyExpectationsSkipNonCorrectG&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="moneyInChannelsFull">
   <goal name="partyExpectationsSkipNonCorrectG&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.816199" steps="193235"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partyExpectationsSkipNonCorrectG&#39;vc.3" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="transactionNetLossFull">
   <goal name="partyExpectationsSkipNonCorrectG&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.032648" steps="148872"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgInternalNoneNonApplicable&#39;vc" expl="VC for gammaProcessMsgInternalNoneNonApplicable" proved="true">
 <proof prover="2"><result status="valid" time="0.462274" steps="3067"/></proof>
 </goal>
 <goal name="gammaSpendGoodFunding&#39;vc" expl="VC for gammaSpendGoodFunding" proved="true">
 <proof prover="1"><result status="valid" time="4.219110" steps="265537"/></proof>
 </goal>
 <goal name="gammaSpendMoneyInChannelsG&#39;vc" expl="VC for gammaSpendMoneyInChannelsG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaSpendMoneyInChannelsG&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.419242" steps="167158"/></proof>
  </goal>
  <goal name="gammaSpendMoneyInChannelsG&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.735521" steps="130454"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc" expl="VC for gammaSpendLossesInMoveOwnCoinsG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.077734" steps="118329"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.405048" steps="167343"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="19.250595" steps="102412"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.056992" steps="81"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.757808" steps="200712"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.284595" steps="484060"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="12.798738" steps="957319"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.614609" steps="249503"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.279942" steps="623"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.178137" steps="157"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.444455" steps="242623"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.063451" steps="26"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsG&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.964942" steps="13730"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc" expl="VC for gammaSpendLossesInMoveOwnCoinsSG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.062893" steps="24"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.300645" steps="1621"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.133688" steps="33"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.894962" steps="256081"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.4.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="3.738238" steps="237914"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.077154" steps="10732"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.981738" steps="203187"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.195683" steps="201"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.207801" steps="233"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.9" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodFunding">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.139234" steps="68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.203743" steps="236"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.11.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="3.719995" steps="241110"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153039" steps="74"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.197376" steps="273"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.14" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.14.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.14.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.691065" steps="222292"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.15" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.15.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="4.814276" steps="303081"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.16" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.16.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.16.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="5.303061" steps="332874"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.445500" steps="242218"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088841" steps="85"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.19" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="signedGoodTxsBefore">
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="signedGoodTxsAfter">
    <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
     <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.19.0.0.0" expl="precondition" proved="true">
     <proof prover="1" steplimit="800000"><result status="valid" time="2.231358" steps="334090"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.20" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.20.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="6.966622" steps="40037"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.062641" steps="24"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.22" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.150804" steps="24"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.079078" steps="394"/></proof>
  </goal>
  <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.24.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.049380" steps="32"/></proof>
   </goal>
   <goal name="gammaSpendLossesInMoveOwnCoinsSG&#39;vc.24.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.048948" steps="28"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaSpendContractEvaluatorG&#39;vc" expl="VC for gammaSpendContractEvaluatorG" proved="true">
 <proof prover="2"><result status="valid" time="0.187666" steps="57"/></proof>
 </goal>
 <goal name="gammaInsertContractsEvaluatorG&#39;vc" expl="VC for gammaInsertContractsEvaluatorG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaInsertContractsEvaluatorG&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.407304" steps="19754"/></proof>
  </goal>
  <goal name="gammaInsertContractsEvaluatorG&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.982699" steps="5273"/></proof>
  </goal>
  <goal name="gammaInsertContractsEvaluatorG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.216212" steps="1615"/></proof>
  </goal>
  <goal name="gammaInsertContractsEvaluatorG&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="lossesInMoveOwnCoinsMsgsFull">
   <goal name="gammaInsertContractsEvaluatorG&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
    <goal name="gammaInsertContractsEvaluatorG&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="gammaInsertContractsEvaluatorG&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Assert">
      <goal name="gammaInsertContractsEvaluatorG&#39;vc.3.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="0.040640" steps="17"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaInsertContractsEvaluatorG&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.063128" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc" expl="VC for gammaProcessMsgFreshPreservesEvaluatorFG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.570489" steps="19790"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.295596" steps="171099"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.490288" steps="249316"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.119377" steps="256764"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="19.468911" steps="115567"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.053316" steps="75"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.6.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.167681" steps="291"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.750087" steps="24264"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131046" steps="960"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.024374" steps="207794"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.10" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.10.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.592191" steps="3824"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.10.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.749253" steps="3772"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.151683" steps="347"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.205490" steps="78"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097985" steps="48"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.197468" steps="218017"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.814888" steps="241996"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.053073" steps="52"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.17" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.193188" steps="88"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.285936" steps="750"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.238570" steps="368"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.220011" steps="390"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.062279" steps="87"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.22" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044286" steps="60"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.23" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.23.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.065017" steps="37"/></proof>
   </goal>
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.23.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.23.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.347925" steps="2070"/></proof>
    </goal>
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.23.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.819850" steps="6211"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.24.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.071990" steps="52"/></proof>
   </goal>
   <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.24.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.24.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.071955" steps="57"/></proof>
    </goal>
    <goal name="gammaProcessMsgFreshPreservesEvaluatorFG&#39;vc.24.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.224437" steps="1614"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc" expl="VC for gammaProcessMsgFreshNoneSoNotCorrectRevocation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144982" steps="36"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.133279" steps="156833"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.316513" steps="1875"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.136098" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.153666" steps="20872"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.467384" steps="3040"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.067975" steps="34"/></proof>
   </goal>
   <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.6.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.051177" steps="39"/></proof>
    </goal>
    <goal name="gammaProcessMsgFreshNoneSoNotCorrectRevocation&#39;vc.6.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.083320" steps="341"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgFreshFullPreservesEvaluatorG&#39;vc" expl="VC for gammaProcessMsgFreshFullPreservesEvaluatorG" proved="true">
 <proof prover="2"><result status="valid" time="0.161138" steps="1276"/></proof>
 </goal>
 <goal name="gammaProcessFreshMsgPreservesEvaluatorG&#39;vc" expl="VC for gammaProcessFreshMsgPreservesEvaluatorG" proved="true">
 <proof prover="2"><result status="valid" time="0.114151" steps="583"/></proof>
 </goal>
 <goal name="EvaluatorPreservationLemmas&#39;impl_of.gammaProcessFreshMsgPreservesEvaluatorG&#39;refn&#39;vc" expl="VC for gammaProcessFreshMsgPreservesEvaluatorG&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.056244" steps="18"/></proof>
 </goal>
</theory>
<theory name="EvaluatorAdditionalExportedProofs&#39;impl" proved="true">
 <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc" expl="VC for gammaAddConsFromVoidPreservesEvaluator" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109270" steps="35"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101799" steps="36"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.048633" steps="122"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.872508" steps="5526"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.329216" steps="11106"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168506" steps="1486"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
   <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.586274" steps="177015"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.281733" steps="2046"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.051099" steps="603"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.222989" steps="1529"/></proof>
  </goal>
  <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.10" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="getSignedGoodTransactions">
   <goal name="gammaAddConsFromVoidPreservesEvaluator&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.650489" steps="141156"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="worstCaseChannelResolutionShuffleMsgsInvariant&#39;vc" expl="VC for worstCaseChannelResolutionShuffleMsgsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.622233" steps="5239"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionShuffleMsgsInvariantG&#39;vc" expl="VC for worstCaseChannelResolutionShuffleMsgsInvariantG" proved="true">
 <proof prover="2"><result status="valid" time="0.051212" steps="82"/></proof>
 </goal>
 <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc" expl="VC for correctAndEarlyEnoughChangeIdInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.088888" steps="372"/></proof>
  </goal>
  <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.084169" steps="372"/></proof>
  </goal>
  <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.106621" steps="236"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.095748" steps="478"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081138" steps="374"/></proof>
  </goal>
  <goal name="correctAndEarlyEnoughChangeIdInvariant&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.215928" steps="1060"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="worstCaseChannelResolutionChangeIdsInvariant&#39;vc" expl="VC for worstCaseChannelResolutionChangeIdsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.296257" steps="2169"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionChangeIdsInvariantG&#39;vc" expl="VC for worstCaseChannelResolutionChangeIdsInvariantG" proved="true">
 <proof prover="2"><result status="valid" time="0.175036" steps="138"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionMsgsMonotone&#39;vc" expl="VC for worstCaseChannelResolutionMsgsMonotone" proved="true">
 <proof prover="2"><result status="valid" time="1.045524" steps="8289"/></proof>
 </goal>
 <goal name="worstCaseChannelResolutionFullMsgsMonotone&#39;vc" expl="VC for worstCaseChannelResolutionFullMsgsMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.118325" steps="594"/></proof>
 </goal>
 <goal name="transactionNetLossShuffleMsgsInvariant&#39;vc" expl="VC for transactionNetLossShuffleMsgsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.175761" steps="106"/></proof>
 </goal>
 <goal name="transactionNetLossFullShuffleMsgsInvariant&#39;vc" expl="VC for transactionNetLossFullShuffleMsgsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.166575" steps="97"/></proof>
 </goal>
 <goal name="transactionNetLossChangeIdsInvariant&#39;vc" expl="VC for transactionNetLossChangeIdsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.068671" steps="166"/></proof>
 </goal>
 <goal name="transactionNetLossChangeIdsInvariantFull&#39;vc" expl="VC for transactionNetLossChangeIdsInvariantFull" proved="true">
 <proof prover="2"><result status="valid" time="0.173474" steps="156"/></proof>
 </goal>
 <goal name="transactionNetLossMsgsMonotone&#39;vc" expl="VC for transactionNetLossMsgsMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.124291" steps="669"/></proof>
 </goal>
 <goal name="transactionNetLossFullMsgsMonotone&#39;vc" expl="VC for transactionNetLossFullMsgsMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.104336" steps="415"/></proof>
 </goal>
 <goal name="partyExpectationsMsgIdInvariant&#39;vc" expl="VC for partyExpectationsMsgIdInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyExpectationsMsgIdInvariant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.736074" steps="3538"/></proof>
  </goal>
  <goal name="partyExpectationsMsgIdInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.054437" steps="13727"/></proof>
  </goal>
  <goal name="partyExpectationsMsgIdInvariant&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.122226" steps="52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="partyExpectationsShuffleMsgsInvariant&#39;vc" expl="VC for partyExpectationsShuffleMsgsInvariant" proved="true">
 <proof prover="2"><result status="valid" time="3.314010" steps="22961"/></proof>
 </goal>
 <goal name="partyExpectationsMsgMonotone&#39;vc" expl="VC for partyExpectationsMsgMonotone" proved="true">
 <proof prover="2"><result status="valid" time="7.925255" steps="49947"/></proof>
 </goal>
 <goal name="EvaluatorAdditionalExportedLemmas&#39;impl_of.partyExpectationsMsgIdInvariant&#39;refn&#39;vc" expl="VC for partyExpectationsMsgIdInvariant&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.045606" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorAdditionalExportedLemmas&#39;impl_of.partyExpectationsShuffleMsgsInvariant&#39;refn&#39;vc" expl="VC for partyExpectationsShuffleMsgsInvariant&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.035510" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorAdditionalExportedLemmas&#39;impl_of.partyExpectationsMsgMonotone&#39;refn&#39;vc" expl="VC for partyExpectationsMsgMonotone&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.041185" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorAdditionalExportedLemmas&#39;impl_of.gammaAddConsFromVoidPreservesEvaluator&#39;refn&#39;vc" expl="VC for gammaAddConsFromVoidPreservesEvaluator&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.043803" steps="14"/></proof>
 </goal>
</theory>
<theory name="EvaluatorEquivalentStatementProofs&#39;impl" proved="true">
 <goal name="whenNotTracedImmediateExpectedChannelResolutionEq&#39;vc" expl="VC for whenNotTracedImmediateExpectedChannelResolutionEq" proved="true">
 <proof prover="2"><result status="valid" time="0.484855" steps="2745"/></proof>
 </goal>
 <goal name="whenNotTracedImmediateExpectedChannelResolutionEqG&#39;vc" expl="VC for whenNotTracedImmediateExpectedChannelResolutionEqG" proved="true">
 <proof prover="2"><result status="valid" time="1.119966" steps="9055"/></proof>
 </goal>
 <goal name="evalTracedInTransactions&#39;vc" expl="VC for evalTracedInTransactions" proved="true">
 <proof prover="2"><result status="valid" time="0.047110" steps="14"/></proof>
 </goal>
 <goal name="evalTracedInTransactionsG&#39;vc" expl="VC for evalTracedInTransactionsG" proved="true">
 <proof prover="2"><result status="valid" time="0.051929" steps="14"/></proof>
 </goal>
 <goal name="ifExtractThenImmediate0&#39;vc" expl="VC for ifExtractThenImmediate0" proved="true">
 <proof prover="2"><result status="valid" time="0.218889" steps="291"/></proof>
 </goal>
 <goal name="evalAsImmediateEvals&#39;vc" expl="VC for evalAsImmediateEvals" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="evalAsImmediateEvals&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176674" steps="104"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181252" steps="30"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.881972" steps="138229"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126124" steps="134"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109287" steps="779"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.270914" steps="215249"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="immediateAmountOnChain">
   <goal name="evalAsImmediateEvals&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="sum1">
    <goal name="evalAsImmediateEvals&#39;vc.6.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.039733" steps="24"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.347821" steps="168618"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.102839" steps="247698"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.192732" steps="102"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.10" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.492834" steps="171932"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.226215" steps="1475"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163470" steps="182"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.061383" steps="141"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.192881" steps="183"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.967591" steps="159468"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.562711" steps="181219"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066898" steps="168"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.326706" steps="168559"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.728935" steps="295795"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.20" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="shuffled">
   <goal name="evalAsImmediateEvals&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mapCons">
    <goal name="evalAsImmediateEvals&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="sumInFront">
     <goal name="evalAsImmediateEvals&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.094003" steps="284"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.22" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.23" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="moneyInChannels">
   <goal name="evalAsImmediateEvals&#39;vc.24.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert2">
    <goal name="evalAsImmediateEvals&#39;vc.24.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="&lt;-" arg2="Assert">
     <goal name="evalAsImmediateEvals&#39;vc.24.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="&lt;-" arg2="Assert1">
      <goal name="evalAsImmediateEvals&#39;vc.24.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="5.416059" steps="332106"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.057376" steps="214790"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.057691" steps="89"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.072071" steps="110"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.667121" steps="180753"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.128309" steps="154550"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.30" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.550434" steps="135333"/></proof>
  </goal>
  <goal name="evalAsImmediateEvals&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.075113" steps="340"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="evalAsImmediateEvalsG&#39;vc" expl="VC for evalAsImmediateEvalsG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="evalAsImmediateEvalsG&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.071002" steps="295"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.075038" steps="414"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044676" steps="37"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.060587" steps="131"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097464" steps="634"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.271686" steps="224476"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="immediateAmountOnChain">
   <goal name="evalAsImmediateEvalsG&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.460433" steps="180187"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.534629" steps="181484"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.009613" steps="261677"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.158162" steps="13015"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.579321" steps="184712"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.304421" steps="1468"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160612" steps="179"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.13" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="extractChannelId">
   <goal name="evalAsImmediateEvalsG&#39;vc.13.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="getTracedChannelIdG">
    <goal name="evalAsImmediateEvalsG&#39;vc.13.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="8.697250" steps="371273"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168076" steps="181"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.955358" steps="29927"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.525868" steps="3161"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.165209" steps="156"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.377205" steps="176087"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.638041" steps="294025"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.20" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="shuffled">
   <goal name="evalAsImmediateEvalsG&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mapCons">
    <goal name="evalAsImmediateEvalsG&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="sumInFront">
     <goal name="evalAsImmediateEvalsG&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.248997" steps="273"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.22" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.23" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="Ensures">
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="moneyInChannelsFull">
   <goal name="evalAsImmediateEvalsG&#39;vc.24.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Assert2">
    <goal name="evalAsImmediateEvalsG&#39;vc.24.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="&lt;-" arg2="Assert">
     <goal name="evalAsImmediateEvalsG&#39;vc.24.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="&lt;-" arg2="Assert1">
      <goal name="evalAsImmediateEvalsG&#39;vc.24.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="5.339514" steps="331337"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.082086" steps="220803"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120859" steps="76"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.204181" steps="1151"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.850415" steps="194211"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.370102" steps="169307"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.107645" steps="24"/></proof>
  </goal>
  <goal name="evalAsImmediateEvalsG&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.171011" steps="306"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="whenNotTracedArgsLossesAsImmediateLosses&#39;vc" expl="VC for whenNotTracedArgsLossesAsImmediateLosses" proved="true">
 <proof prover="1"><result status="valid" time="1.717703" steps="133326"/></proof>
 </goal>
 <goal name="whenNotTracedArgsLossesAsImmediateLossesG&#39;vc" expl="VC for whenNotTracedArgsLossesAsImmediateLossesG" proved="true">
 <proof prover="1"><result status="valid" time="1.927881" steps="132093"/></proof>
 </goal>
 <goal name="goodTransactionsSpec&#39;vc" expl="VC for goodTransactionsSpec" proved="true">
 <proof prover="1"><result status="valid" time="2.999383" steps="204379"/></proof>
 </goal>
 <goal name="goodTransactionsSpec2&#39;vc" expl="VC for goodTransactionsSpec2" proved="true">
 <proof prover="1"><result status="valid" time="4.851149" steps="277630"/></proof>
 </goal>
 <goal name="transactionLossesAsImmediateLosses&#39;vc" expl="VC for transactionLossesAsImmediateLosses" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transactionLossesAsImmediateLosses&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.048447" steps="38"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.993033" steps="145250"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="11.736790" steps="64018"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.932546" steps="25522"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.755354" steps="5085"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="22.859244" steps="141952"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.286176" steps="496"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.758828" steps="318540"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.206136" steps="201845"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="22.609474" steps="141512"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.214061" steps="496"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.798719" steps="315034"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.211885" steps="239"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.13" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.536707" steps="171609"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.055074" steps="66"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.894542" steps="153351"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.623746" steps="176412"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.548137" steps="174695"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.117093" steps="117"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.170596" steps="171650"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.20" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="Ensures1">
  </transf>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.192088" steps="145"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="9.800277" steps="50212"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127033" steps="54"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.684589" steps="169180"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="18.770730" steps="939985"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.157291" steps="172286"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="16.589497" steps="87824"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.28" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.154879" steps="22"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.29" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.130700" steps="22"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.30" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="1.084952" steps="114169"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.113969" steps="20"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.32" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.678471" steps="120422"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.504623" steps="34185"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLosses&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.047478" steps="50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="transactionLossesAsImmediateLossesG&#39;vc" expl="VC for transactionLossesAsImmediateLossesG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.601461" steps="25912"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.051987" steps="38"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185325" steps="574"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="9.700167" steps="52078"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.642354" steps="178898"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.543241" steps="172335"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.301599" steps="165287"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.936136" steps="158090"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="13.183140" steps="819953"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.489562" steps="173621"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.268183" steps="165287"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173987" steps="576"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="13.120471" steps="821092"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181267" steps="243"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.481753" steps="175863"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167101" steps="68"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.969770" steps="157397"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.875624" steps="29254"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.550036" steps="178667"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.223329" steps="121"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.145247" steps="175789"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="6.521080" steps="420977"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.098890" steps="175961"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.23" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.822500" steps="319045"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="totalImmediateLosses">
   <goal name="transactionLossesAsImmediateLossesG&#39;vc.24.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="shuffledImmediateLosses">
    <goal name="transactionLossesAsImmediateLossesG&#39;vc.24.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="transactionLossesAsImmediateLossesG&#39;vc.24.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150963" steps="56"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.26" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="lossesInMoveOwnCoinsMsgsFull">
   <goal name="transactionLossesAsImmediateLossesG&#39;vc.26.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="totalLosses">
    <goal name="transactionLossesAsImmediateLossesG&#39;vc.26.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.923204" steps="205572"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.083255" steps="176263"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="16.460246" steps="87239"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.29" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.125352" steps="24"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.30" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.186497" steps="24"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.31" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.093278" steps="24"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.106204" steps="22"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.33" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.653915" steps="127449"/></proof>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.34" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="Assert">
   <goal name="transactionLossesAsImmediateLossesG&#39;vc.34.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="lossesInMoveOwnCoinsMsgsFull">
    <goal name="transactionLossesAsImmediateLossesG&#39;vc.34.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="immediateLossesInMoveOwnCoinsMsgs">
     <goal name="transactionLossesAsImmediateLossesG&#39;vc.34.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="3.838354" steps="229033"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="transactionLossesAsImmediateLossesG&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.138068" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="channelExpectationsGammaOrTransactions&#39;vc" expl="VC for channelExpectationsGammaOrTransactions" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.166280" steps="95"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.724894" steps="134751"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="evalTracedChannelOnGamma">
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.251844" steps="190566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.957642" steps="13673"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.243849" steps="23391"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.137764" steps="1344"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="2.214024" steps="179281"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.174100" steps="505"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="evalTracedChannelOnGamma">
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.240794" steps="190540"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.994669" steps="13673"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.859956" steps="23215"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.11" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="evalTracedChannelOnGamma">
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.11.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="2.382110" steps="172329"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.12" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.201899" steps="1408"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.125457" steps="506"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.264111" steps="1432"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.969089" steps="152546"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161852" steps="44"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.846171" steps="223387"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.757078" steps="153190"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096985" steps="227"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.339111" steps="1149"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactions&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.043124" steps="26"/></proof>
   </goal>
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.039512" steps="26"/></proof>
   </goal>
   <goal name="channelExpectationsGammaOrTransactions&#39;vc.21.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.113966" steps="598"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="channelExpectationsGammaOrTransactionsG&#39;vc" expl="VC for channelExpectationsGammaOrTransactionsG" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.0" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="channelExpectationsG">
   <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="evalTracedChannelOnGammaG">
    <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.046797" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.770248" steps="134904"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.2" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.089555" steps="408"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.394222" steps="3817"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.304245" steps="167419"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.464952" steps="174067"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.200673" steps="1549"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.305371" steps="1542"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.8" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="channelExpectationsG">
   <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.8.0" expl="unreachable point" proved="true">
   <transf name="unfold" proved="true" arg1="evalTracedChannelOnGammaG">
    <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.8.0.0" expl="unreachable point" proved="true">
    <proof prover="2"><result status="valid" time="0.178938" steps="558"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.9" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.103325" steps="406"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.400271" steps="3654"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.312802" steps="167419"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.499429" steps="174067"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.201887" steps="1479"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.272935" steps="1477"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.15" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.189731" steps="555"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.402941" steps="32495"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.17" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.082407" steps="437"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.932531" steps="196621"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156955" steps="697"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.20" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.378142" steps="242896"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.111746" steps="45"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.700162" steps="4576"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.311108" steps="1343"/></proof>
  </goal>
  <goal name="channelExpectationsGammaOrTransactionsG&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.444643" steps="40480"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="partyExpectationsEqual&#39;vc" expl="VC for partyExpectationsEqual" proved="true">
 <proof prover="2"><result status="valid" time="0.062348" steps="225"/></proof>
 </goal>
 <goal name="partyExpectationsEqualG&#39;vc" expl="VC for partyExpectationsEqualG" proved="true">
 <proof prover="2"><result status="valid" time="0.082048" steps="390"/></proof>
 </goal>
 <goal name="EvaluatorEquivalentStatementLemmas&#39;impl_of.partyExpectationsEqual&#39;refn&#39;vc" expl="VC for partyExpectationsEqual&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.039391" steps="14"/></proof>
 </goal>
 <goal name="EvaluatorEquivalentStatementLemmas&#39;impl_of.partyExpectationsEqualG&#39;refn&#39;vc" expl="VC for partyExpectationsEqualG&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.036497" steps="14"/></proof>
 </goal>
</theory>
<theory name="GammaProcessMsgProofs&#39;impl" proved="true">
 <goal name="ifOnChannelThanExtract&#39;vc" expl="VC for ifOnChannelThanExtract" proved="true">
 <proof prover="2"><result status="valid" time="0.072303" steps="308"/></proof>
 </goal>
 <goal name="ifNotOnChannelThenNoExtract&#39;vc" expl="VC for ifNotOnChannelThenNoExtract" proved="true">
 <proof prover="2"><result status="valid" time="10.814943" steps="43043"/></proof>
 </goal>
 <goal name="gammaProcessMsgFreshSomeSoExistsMsgFull&#39;vc" expl="VC for gammaProcessMsgFreshSomeSoExistsMsgFull" proved="true">
 <proof prover="2"><result status="valid" time="6.784744" steps="46109"/></proof>
 </goal>
 <goal name="gammaProcessMsgFreshSomeSpec&#39;vc" expl="VC for gammaProcessMsgFreshSomeSpec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.056186" steps="109"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124244" steps="26"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.2" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.071303" steps="114"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.603905" steps="4375"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.506240" steps="3984"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.255013" steps="204025"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.564290" steps="4490"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.058775" steps="34"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.857881" steps="6911"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="8.122446" steps="49713"/></proof>
  </goal>
  <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgFreshSomeSpec&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.078902" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgContractStatuses&#39;vc" expl="VC for gammaProcessMsgContractStatuses" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgContractStatuses&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.218639" steps="921"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.838004" steps="5192"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.144969" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.379613" steps="143156"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgContractStatuses&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.083096" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.092643" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.051624" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="15.505448" steps="94690"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092798" steps="28"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="14.576260" steps="103432"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.592105" steps="3620"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.720802" steps="243122"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.095518" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgContractStatuses2&#39;vc" expl="VC for gammaProcessMsgContractStatuses2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.126953" steps="106"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.094936" steps="26"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.143244" steps="122602"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.144478" steps="122605"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.112064" steps="122608"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.093548" steps="26"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.928852" steps="201469"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.733125" steps="4590"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.8" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mapCompose" arg2="in" arg3="Assert">
   <goal name="gammaProcessMsgContractStatuses2&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.373766" steps="194867"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="13.084120" steps="90712"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.10" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mapCompose" arg2="in" arg3="Assert">
   <goal name="gammaProcessMsgContractStatuses2&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="5.999026" steps="328744"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.875972" steps="205482"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.876181" steps="260914"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.13" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.968169" steps="261099"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.724167" steps="185367"/></proof>
  </goal>
  <goal name="gammaProcessMsgContractStatuses2&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.048526" steps="32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgActiveContracts&#39;vc" expl="VC for gammaProcessMsgActiveContracts" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgActiveContracts&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.169677" steps="921"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148537" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.050325" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.050833" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.046731" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044427" steps="24"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="13.810794" steps="100632"/></proof>
  </goal>
  <goal name="gammaProcessMsgActiveContracts&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.117232" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgActiveContracts2&#39;vc" expl="VC for gammaProcessMsgActiveContracts2" proved="true">
 <proof prover="1"><result status="valid" time="12.190377" steps="632745"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.ifOnChannelThanExtract&#39;refn&#39;vc" expl="VC for ifOnChannelThanExtract&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.053466" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.ifNotOnChannelThenNoExtract&#39;refn&#39;vc" expl="VC for ifNotOnChannelThenNoExtract&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.055285" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgFreshSomeSoExistsMsgFull&#39;refn&#39;vc" expl="VC for gammaProcessMsgFreshSomeSoExistsMsgFull&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.045694" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgFreshSomeSpec&#39;refn&#39;vc" expl="VC for gammaProcessMsgFreshSomeSpec&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.164835" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgContractStatuses&#39;refn&#39;vc" expl="VC for gammaProcessMsgContractStatuses&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.042577" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgContractStatuses2&#39;refn&#39;vc" expl="VC for gammaProcessMsgContractStatuses2&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.037695" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgActiveContracts&#39;refn&#39;vc" expl="VC for gammaProcessMsgActiveContracts&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.041962" steps="14"/></proof>
 </goal>
 <goal name="GammaProcessMsgLemmas&#39;impl_of.gammaProcessMsgActiveContracts2&#39;refn&#39;vc" expl="VC for gammaProcessMsgActiveContracts2&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.044745" steps="14"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="partyInterface.mlw"/>
<theory name="SimplePartyTypes" proved="true">
 <goal name="updateMsgs&#39;vc" expl="VC for updateMsgs" proved="true">
 <proof prover="2"><result status="valid" time="0.030483" steps="14"/></proof>
 </goal>
</theory>
<theory name="GoodSplitsAndRevocationsRecord" proved="true">
 <goal name="findSplitRevocation&#39;vc" expl="VC for findSplitRevocation" proved="true">
 <proof prover="2"><result status="valid" time="0.319404" steps="3206"/></proof>
 </goal>
 <goal name="findSplitRevocationSoExists&#39;vc" expl="VC for findSplitRevocationSoExists" proved="true">
 <proof prover="2"><result status="valid" time="0.053531" steps="192"/></proof>
 </goal>
</theory>
<theory name="GoodTransitionClosing" proved="true">
 <goal name="inputPresentOnGamma&#39;vc" expl="VC for inputPresentOnGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.051171" steps="43"/></proof>
 </goal>
</theory>
<theory name="GammaEvaluatorConsistencyChannelProofs&#39;impl" proved="true">
 <goal name="extractcontractStatusNotPublicKeyAccount&#39;vc" expl="VC for extractcontractStatusNotPublicKeyAccount" proved="true">
 <proof prover="2"><result status="valid" time="0.072527" steps="334"/></proof>
 </goal>
 <goal name="computeVirtualContractNotPublicKeyAccount&#39;vc" expl="VC for computeVirtualContractNotPublicKeyAccount" proved="true">
 <proof prover="2"><result status="valid" time="0.100753" steps="851"/></proof>
 </goal>
 <goal name="computeVirtualContractMonotone&#39;vc" expl="VC for computeVirtualContractMonotone" proved="true">
 <proof prover="2"><result status="valid" time="4.478206" steps="60770"/></proof>
 </goal>
 <goal name="computeVirtualContractStatusPreserved&#39;vc" expl="VC for computeVirtualContractStatusPreserved" proved="true">
 <proof prover="2"><result status="valid" time="0.108244" steps="760"/></proof>
 </goal>
 <goal name="virtualcontractStatusFromExtractcontractStatus&#39;vc" expl="VC for virtualcontractStatusFromExtractcontractStatus" proved="true">
 <proof prover="2"><result status="valid" time="1.602011" steps="19799"/></proof>
 </goal>
 <goal name="virtualcontractStatusCorrect&#39;vc" expl="VC for virtualcontractStatusCorrect" proved="true">
 <proof prover="2"><result status="valid" time="0.143959" steps="984"/></proof>
 </goal>
 <goal name="virtualcontractStatusNoneSoExtractStatusNone&#39;vc" expl="VC for virtualcontractStatusNoneSoExtractStatusNone" proved="true">
 <proof prover="2"><result status="valid" time="0.069456" steps="85"/></proof>
 </goal>
 <goal name="computeVirtualContractGood&#39;vc" expl="VC for computeVirtualContractGood" proved="true">
 <proof prover="2"><result status="valid" time="0.073397" steps="252"/></proof>
 </goal>
 <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc" expl="VC for channelExpectationsEqualBalanceWhenNormal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="1.214532" steps="147135"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.091369" steps="364"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.2.0" expl="unreachable point" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.2.0.0" expl="unreachable point" proved="true">
    <proof prover="2"><result status="valid" time="0.143318" steps="745"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125385" steps="437"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136272" steps="162"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.064411" steps="141444"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150557" steps="161"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="41.446272" steps="264767"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.159019" steps="208"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.732774" steps="254802"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.10" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="expectedSplitResolutionOption" arg2="in" arg3="H">
   <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="expectedSplitResolutionTotal" arg2="in" arg3="H">
    <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.10.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="5.739664" steps="439509"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.523640" steps="304747"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.559528" steps="45903"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.491340" steps="10935"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.235884" steps="307563"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.301018" steps="12801"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081192" steps="350"/></proof>
  </goal>
  <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.17" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.17.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelExpectationsEqualBalanceWhenNormal&#39;vc.17.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.051864" steps="66"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="onQueueIncl&#39;vc" expl="VC for onQueueIncl" proved="true">
 <proof prover="2"><result status="valid" time="0.140069" steps="1100"/></proof>
 </goal>
 <goal name="revocationsReceivedIncl&#39;vc" expl="VC for revocationsReceivedIncl" proved="true">
 <proof prover="2"><result status="valid" time="0.313112" steps="2315"/></proof>
 </goal>
 <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc" expl="VC for channelExpectationsNonDeceasingWhenDisputeOpen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.117101" steps="37"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.149276" steps="70"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.2" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.103451" steps="601"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123186" steps="69"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.4" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.105838" steps="765"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.215543" steps="1743"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.941674" steps="147679"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.105887" steps="47"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.979756" steps="10742"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.208111" steps="1331"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.223728" steps="1419"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.080443" steps="93"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.231286" steps="1388"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119401" steps="551"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120712" steps="567"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120193" steps="354"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099154" steps="380"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.233108" steps="1429"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114803" steps="412"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220893" steps="400"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.20" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpecExt" arg2="in" arg3="Assert">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.20.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.526537" steps="246736"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156255" steps="90"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.223572" steps="438"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.835278" steps="6360"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.821668" steps="345124"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096445" steps="479"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.133834" steps="548"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.27" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpecExt" arg2="in" arg3="Assert">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.27.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.210965" steps="309672"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.133590" steps="168"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.064581" steps="170"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.117043" steps="589"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.31" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.546312" steps="385441"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.100696" steps="578"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.639324" steps="5576"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.34" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088312" steps="495"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.532707" steps="4927"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.36" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.36.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.115058" steps="121"/></proof>
   </goal>
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.36.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.117565" steps="103"/></proof>
   </goal>
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.36.2" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
    <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.36.2.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.173015" steps="302110"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150727" steps="167"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.38" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.38.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.838273" steps="337115"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122315" steps="687"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.067931" steps="248"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.41" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="newMsgs">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.41.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="updateMsgs">
    <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.41.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="5.012371" steps="422855"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.42" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.144638" steps="406577"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.43" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.447760" steps="4310"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.44" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="newMsgs">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.44.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="updateMsgs">
    <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.44.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="8.331043" steps="628937"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157948" steps="147"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.46" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="correctAndEarlyEnoughRevokeMsg">
   <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.46.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="5.969041" steps="467870"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.046864" steps="154"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.069412" steps="215"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.49" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.082981" steps="221"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="7.097409" steps="51045"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155097" steps="77"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.687510" steps="36240"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.192541" steps="1100"/></proof>
  </goal>
  <goal name="channelExpectationsNonDeceasingWhenDisputeOpen&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="10.810353" steps="70648"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="channelMinusBalanceOurHelper&#39;vc" expl="VC for channelMinusBalanceOurHelper" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelMinusBalanceOurHelper&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.094083" steps="361"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.103339" steps="514"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102599" steps="258"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.091974" steps="36"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119291" steps="186"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074255" steps="203"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169702" steps="55"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.115553" steps="775"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.8" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="computeVirtualContract" arg2="in" arg3="H">
   <goal name="channelMinusBalanceOurHelper&#39;vc.8.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="1.908289" steps="164709"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.9" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="computeVirtualContract" arg2="in" arg3="H">
   <goal name="channelMinusBalanceOurHelper&#39;vc.9.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="1.748299" steps="157937"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.271422" steps="1990"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.097718" steps="42"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.231109" steps="1889"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.096976" steps="208"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.019146" steps="30158"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelMinusBalanceOurHelper&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelMinusBalanceOurHelper&#39;vc.15.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.145276" steps="52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176861" steps="48"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.139339" steps="34"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.18" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelMinusBalanceOurHelper&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.118992" steps="628"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095019" steps="36"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.417649" steps="2886"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097573" steps="67"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.207573" steps="1232"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126531" steps="73"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.306682" steps="2197"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136864" steps="767"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.331600" steps="176795"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.27" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="1.424535" steps="136021"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeVirtualContract" arg2="in" arg3="H">
   <goal name="channelMinusBalanceOurHelper&#39;vc.28.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="6.150470" steps="448610"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.29" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.124187" steps="42"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.30" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.116820" steps="42"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.31" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.041636" steps="42"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124423" steps="42"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.33" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.678216" steps="213673"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095232" steps="591"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.192211" steps="244"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.36" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelMinusBalanceOurHelper&#39;vc.36.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal">
    <goal name="channelMinusBalanceOurHelper&#39;vc.36.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="isOurChannelInNormal" arg2="in" arg3="Assert1">
     <goal name="channelMinusBalanceOurHelper&#39;vc.36.0.0.0" expl="assertion" proved="true">
     <transf name="unfold" proved="true" arg1="computeVirtualContractStatus">
      <goal name="channelMinusBalanceOurHelper&#39;vc.36.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="1.792533" steps="149163"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.460078" steps="3687"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.38" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.064044" steps="8302"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.39" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.163613" steps="99"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.40" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.264191" steps="9248"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.41" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.118658" steps="58"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.42" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148057" steps="379"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.335481" steps="159508"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.44" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.132934" steps="62"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.45" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159522" steps="62"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.46" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.120400" steps="62"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.263424" steps="480"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136553" steps="108"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.49" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.151245" steps="642"/></proof>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.50" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelMinusBalanceOurHelper&#39;vc.50.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.052247" steps="54"/></proof>
   </goal>
   <goal name="channelMinusBalanceOurHelper&#39;vc.50.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.049815" steps="44"/></proof>
   </goal>
   <goal name="channelMinusBalanceOurHelper&#39;vc.50.2" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelMinusBalanceOurHelper&#39;vc.50.2.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.049369" steps="46"/></proof>
    </goal>
    <goal name="channelMinusBalanceOurHelper&#39;vc.50.2.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.050374" steps="58"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelMinusBalanceOurHelper&#39;vc.51" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelMinusBalanceOurHelper&#39;vc.51.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.058394" steps="37"/></proof>
   </goal>
   <goal name="channelMinusBalanceOurHelper&#39;vc.51.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelMinusBalanceOurHelper&#39;vc.51.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.045261" steps="52"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="channelMinusBalanceOurHelper&#39;vc.51.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.064697" steps="51"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="totalEvaluatorMinusTotalBalanceMonotone&#39;vc" expl="VC for totalEvaluatorMinusTotalBalanceMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.805942" steps="5895"/></proof>
 </goal>
 <goal name="GammaEvaluatorConsistencyChannelLemmas&#39;impl_of.totalEvaluatorMinusTotalBalanceMonotone&#39;refn&#39;vc" expl="VC for totalEvaluatorMinusTotalBalanceMonotone&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.054502" steps="14"/></proof>
 </goal>
</theory>
<theory name="GoodTransitionTransitiveProofs&#39;impl" proved="true">
 <goal name="combineUpdateRecsAssoc&#39;vc" expl="VC for combineUpdateRecsAssoc" proved="true">
 <proof prover="2"><result status="valid" time="0.078291" steps="159"/></proof>
 </goal>
 <goal name="applyUpdateRecAssoc&#39;vc" expl="VC for applyUpdateRecAssoc" proved="true">
 <proof prover="2"><result status="valid" time="0.065534" steps="42"/></proof>
 </goal>
 <goal name="goodTransitionTransitiveAux1&#39;vc" expl="VC for goodTransitionTransitiveAux1" proved="true">
 <proof prover="1"><result status="valid" time="1.615465" steps="138215"/></proof>
 </goal>
 <goal name="goodTransitionTransitiveAux2&#39;vc" expl="VC for goodTransitionTransitiveAux2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goodTransitionTransitiveAux2&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.061323" steps="32"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.112689" steps="44"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143113" steps="132"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101308" steps="138"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.147745" steps="171"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169057" steps="173"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168452" steps="192"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141685" steps="229"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.048923" steps="38"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094099" steps="239"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163691" steps="41"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097810" steps="285"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168725" steps="960"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.13" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="revocationSendIfRequired" arg2="in" arg3="Assert5">
   <goal name="goodTransitionTransitiveAux2&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.071703" steps="183735"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.654492" steps="226375"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.855335" steps="175200"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095102" steps="262"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101959" steps="195"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.287157" steps="947"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.19" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
   <goal name="goodTransitionTransitiveAux2&#39;vc.19.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
    <goal name="goodTransitionTransitiveAux2&#39;vc.19.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="Assert">
     <goal name="goodTransitionTransitiveAux2&#39;vc.19.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="2.893215" steps="203756"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108498" steps="241"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.376842" steps="1624"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.138171" steps="288"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097703" steps="55"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.190955" steps="299"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.288830" steps="131770"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157769" steps="625"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.183654" steps="257"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.229456" steps="1215"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145449" steps="64"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118750" steps="65"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094622" steps="378"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181654" steps="1099"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="35.202799" steps="179591"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.34" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.680750" steps="213698"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.35" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="applicableRevokeMsg">
   <goal name="goodTransitionTransitiveAux2&#39;vc.35.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.147913" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120738" steps="118"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.459351" steps="3883"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.38" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="goodTransitionTransitiveAux2&#39;vc.38.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="36.799133" steps="195114"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127363" steps="356"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.098005" steps="66"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux2&#39;vc.41" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="goodTransitionTransitiveAux2&#39;vc.41.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.348276" steps="1927"/></proof>
   </goal>
   <goal name="goodTransitionTransitiveAux2&#39;vc.41.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.318893" steps="7139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.154107" steps="99"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.098381" steps="103"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert1">
    <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.2.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="computeVirtualContractStatus" arg2="in" arg3="Assert1">
     <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.2.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="1.322463" steps="120694"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.152951" steps="111"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130063" steps="144"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.136578" steps="701"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.131931" steps="656"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.463669" steps="3024"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.678816" steps="140452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.9" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.9.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert1">
    <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.9.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="computeVirtualContractStatus" arg2="in" arg3="Assert1">
     <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.9.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="2.375229" steps="170591"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143787" steps="496"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.11" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.168874" steps="713"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.237157" steps="1663"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.639586" steps="3504"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.14" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.14.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
    <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.14.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="computeVirtualContractStatus" arg2="in" arg3="Assert">
     <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.14.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="1.811703" steps="153182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123319" steps="225"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
   <transf name="unfold" proved="true" arg1="computeVirtualContractStatus">
    <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
    <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert2">
     <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0.0.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0.0.0.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
      <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="Assert2">
       <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0.0.0.0.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
       <transf name="unfold" proved="true" arg1="computeVirtualContractStatus" arg2="in" arg3="Assert2">
        <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.16.0.0.0.0.0.0" expl="VC for goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal" proved="true">
        <proof prover="2"><result status="valid" time="3.750382" steps="24943"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158722" steps="970"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.462368" steps="2717"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.19" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInDisputeOpen">
   <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.19.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
    <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.19.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="computeVirtualContractStatus" arg2="in" arg3="Assert">
     <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.19.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="2.244362" steps="171671"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.196390" steps="571"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.271735" steps="1359"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.304747" steps="1600"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150650" steps="529"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137880" steps="46"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.511353" steps="3029"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.627851" steps="4179"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.573005" steps="3611"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAuxRevocationsOnlyChangeInNormal&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="34.587672" steps="190372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc" expl="VC for isRecordsVirtualContractStatusPreservedInclSig" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.154905" steps="30"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.128489" steps="20"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
   <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.2.0" expl="unreachable point" proved="true">
   <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="Assert">
    <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.2.0.0" expl="unreachable point" proved="true">
    <proof prover="1"><result status="valid" time="1.313587" steps="129115"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.104826" steps="22"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194963" steps="1348"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.093214" steps="110"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.075974" steps="335"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155084" steps="26"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121833" steps="271"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124968" steps="649"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.311979" steps="21984"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143159" steps="829"/></proof>
  </goal>
  <goal name="isRecordsVirtualContractStatusPreservedInclSig&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.203527" steps="659"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="computeVirtualContractTimeInvariant&#39;vc" expl="VC for computeVirtualContractTimeInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="computeVirtualContractTimeInvariant&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.067380" steps="29"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148616" steps="18"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.2" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal" arg2="in" arg3="Assert">
   <goal name="computeVirtualContractTimeInvariant&#39;vc.2.0" expl="unreachable point" proved="true">
   <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="Assert">
    <goal name="computeVirtualContractTimeInvariant&#39;vc.2.0.0" expl="unreachable point" proved="true">
    <proof prover="1"><result status="valid" time="1.394439" steps="129183"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118971" steps="20"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.105805" steps="22"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.090897" steps="108"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.087909" steps="332"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.091360" steps="24"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.089550" steps="269"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101202" steps="647"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092779" steps="28"/></proof>
  </goal>
  <goal name="computeVirtualContractTimeInvariant&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088980" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="goodTransitionTransitiveAux3&#39;vc" expl="VC for goodTransitionTransitiveAux3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goodTransitionTransitiveAux3&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180553" steps="102"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.128978" steps="109"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118628" steps="35"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="18.594973" steps="97731"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.200641" steps="973"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="30.018499" steps="165991"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135013" steps="41"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123516" steps="211"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.184331" steps="68"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.140738" steps="83"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180389" steps="57"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.264045" steps="1196"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.12" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="onlyLegalTransfers" arg2="in" arg3="Assert1">
   <goal name="goodTransitionTransitiveAux3&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.265443" steps="1252"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.222383" steps="1006"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.227005" steps="191"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.798496" steps="4827"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.052022" steps="45"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169486" steps="739"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096031" steps="46"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158335" steps="40"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.065354" steps="164"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.21" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.226946" steps="1177"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131237" steps="160"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.23" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.200118" steps="975"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181242" steps="747"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.25" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.144340" steps="721"/></proof>
  </goal>
  <goal name="goodTransitionTransitiveAux3&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.880794" steps="5332"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc" expl="VC for whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.151852" steps="100"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.181807" steps="104"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161684" steps="34"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.115023" steps="162"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.4" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.166137" steps="831"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.153185" steps="716"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.184765" steps="191"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102034" steps="297"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.422382" steps="2509"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.164620" steps="230"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.201188" steps="1008"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.083747" steps="195"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.566630" steps="9258"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.13" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.162442" steps="54"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102800" steps="221"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.788041" steps="4530"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.087161" steps="226"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.365719" steps="2387"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.247048" steps="1226"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.473558" steps="2623"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.106210" steps="329"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.085440" steps="179"/></proof>
  </goal>
  <goal name="whenComingToChannelChannelOpenerSentOrChannelPresentOnGammaTransitive&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.003621" steps="5901"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc" expl="VC for whenClosingSendsOpenDisputeTransitive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.057364" steps="42"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.183854" steps="51"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145043" steps="22"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127573" steps="22"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.187649" steps="323"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120654" steps="324"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180438" steps="372"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.367238" steps="7814"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.8" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.105296" steps="53"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.156815" steps="591"/></proof>
   </goal>
   <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.9.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.9.1.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.149400" steps="599"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122904" steps="73"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096552" steps="263"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174120" steps="68"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144726" steps="583"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.184310" steps="114"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109036" steps="322"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114259" steps="340"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.17" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.159556" steps="765"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.18" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.102266" steps="309"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163329" steps="144"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.233029" steps="1094"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123614" steps="64"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135165" steps="457"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.522191" steps="8663"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.24" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.091883" steps="75"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168266" steps="296"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.237569" steps="318"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.228148" steps="7720"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.175849" steps="90"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.146372" steps="373"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135388" steps="100"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.198782" steps="764"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.32" expl="VC for whenClosingSendsOpenDisputeTransitive" proved="true">
  <proof prover="2"><result status="valid" time="0.179889" steps="31"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.191589" steps="335"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185521" steps="349"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.35" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.302666" steps="802"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.36" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.245066" steps="323"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180444" steps="157"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.38" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.319604" steps="1347"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120736" steps="72"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.497462" steps="2658"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.41" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.735308" steps="10113"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.42" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.165923" steps="82"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.43" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171557" steps="295"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.44" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.107040" steps="317"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.184680" steps="7772"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121637" steps="97"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114995" steps="373"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.177072" steps="107"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.49" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.081341" steps="269575"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108229" steps="335"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.117677" steps="334"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126747" steps="382"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.334907" steps="7843"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.54" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.177597" steps="58"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.146836" steps="606"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.56" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081783" steps="77"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.57" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176915" steps="271"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.58" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.184130" steps="72"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.59" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145418" steps="596"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.60" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.058809" steps="22"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.61" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.093230" steps="22"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.62" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.145009" steps="22"/></proof>
  </goal>
  <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.069999" steps="22"/></proof>
   </goal>
   <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.061872" steps="26"/></proof>
    </goal>
    <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.193534" steps="1166"/></proof>
     </goal>
     <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.636392" steps="4414"/></proof>
     </goal>
     <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.772041" steps="4506"/></proof>
      </goal>
      <goal name="whenClosingSendsOpenDisputeTransitive&#39;vc.63.1.1.2.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.214736" steps="1192"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc" expl="VC for whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.204371" steps="765"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.356287" steps="1592"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.284473" steps="11892"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.414043" steps="1857"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.053469" steps="39"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.071650" steps="70"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131647" steps="417"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169419" steps="71"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.439119" steps="8461"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.9" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.130889" steps="76"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141078" steps="637"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176612" steps="97"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.195874" steps="321"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.082736" steps="93"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.124130" steps="205"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158787" steps="464"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.16" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.120964" steps="423"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.116135" steps="230"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.400703" steps="2147"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.115901" steps="95"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169503" steps="70"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.133544" steps="70"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153436" steps="70"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.838557" steps="10175"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.24" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.149790" steps="98"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109852" steps="298"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121581" steps="320"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.630745" steps="3364"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161941" steps="359"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.164661" steps="118"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.191046" steps="83"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.065372" steps="67"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153494" steps="458"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.33" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.128053" steps="417"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.224348" steps="225"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.387441" steps="2158"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094214" steps="89"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171822" steps="64"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.38" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.063523" steps="65"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119280" steps="65"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.822863" steps="10182"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.41" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.121915" steps="93"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.42" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126669" steps="292"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.43" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121981" steps="314"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.44" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.44.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.624004" steps="3365"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124280" steps="352"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.203047" steps="113"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125104" steps="424"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.48" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.831390" steps="140671"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.499143" steps="8506"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.50" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.185037" steps="71"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171631" steps="631"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.073805" steps="92"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114064" steps="316"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.54" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.075178" steps="88"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.154133" steps="61"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.56" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.539818" steps="140665"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.57" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161862" steps="56"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.58" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.258919" steps="7917"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.59" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.119718" steps="62"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.60" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163720" steps="623"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.61" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185114" steps="82"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.62" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121939" steps="313"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.63" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.103448" steps="79"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.64" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.338262" steps="168604"/></proof>
  </goal>
  <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.066769" steps="22"/></proof>
   </goal>
   <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.072307" steps="26"/></proof>
    </goal>
    <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.420560" steps="2569"/></proof>
     </goal>
     <goal name="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaimTransitive&#39;vc.65.1.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.054393" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="goodTransitionTransitive&#39;vc" expl="VC for goodTransitionTransitive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goodTransitionTransitive&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131196" steps="33"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.104100" steps="22"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.105796" steps="22"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.096071" steps="22"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102721" steps="24"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.083769" steps="43"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.069039" steps="164"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.7" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="goodTransitionTransitive&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="goodTransitionTransitive&#39;vc.7.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.082904" steps="174"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.851745" steps="5121"/></proof>
  </goal>
  <goal name="goodTransitionTransitive&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.198956" steps="7367"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="GoodTransitionTransitiveLemmas&#39;impl_of.combineUpdateRecsAssoc&#39;refn&#39;vc" expl="VC for combineUpdateRecsAssoc&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.063029" steps="14"/></proof>
 </goal>
 <goal name="GoodTransitionTransitiveLemmas&#39;impl_of.applyUpdateRecAssoc&#39;refn&#39;vc" expl="VC for applyUpdateRecAssoc&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.058453" steps="14"/></proof>
 </goal>
 <goal name="GoodTransitionTransitiveLemmas&#39;impl_of.goodTransitionTransitive&#39;refn&#39;vc" expl="VC for goodTransitionTransitive&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.065117" steps="14"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="honestPartyType.mlw"/>
<theory name="HonestPartyLemmasAndProofs" proved="true">
 <goal name="correctRevokesWithSigState&#39;vc" expl="VC for correctRevokesWithSigState" proved="true">
 <proof prover="2"><result status="valid" time="0.374574" steps="5511"/></proof>
 </goal>
 <goal name="externalBalanceCorrectionPositive&#39;vc" expl="VC for externalBalanceCorrectionPositive" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="externalBalanceCorrectionPositive&#39;vc.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.105652" steps="388"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.1" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.104991" steps="464"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.2" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.113043" steps="391"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108410" steps="192"/></proof>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.099285" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.067952" steps="128"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.040615" steps="119"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.5.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.059642" steps="129"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.5.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="externalBalanceCorrectionPositive&#39;vc.5.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.152186" steps="324"/></proof>
    </goal>
    <goal name="externalBalanceCorrectionPositive&#39;vc.5.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.163933" steps="2453"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="externalBalanceCorrectionPositive&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="externalBalanceCorrectionPositive&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.117419" steps="143"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.099973" steps="135"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.6.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.078851" steps="48"/></proof>
   </goal>
   <goal name="externalBalanceCorrectionPositive&#39;vc.6.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.055139" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="positiveSecondOptionCorrection&#39;vc" expl="VC for positiveSecondOptionCorrection" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="positiveSecondOptionCorrection&#39;vc.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="positiveSecondOptionCorrection&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.100691" steps="361"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="positiveSecondOptionCorrection&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.200530" steps="1757"/></proof>
  </goal>
  <goal name="positiveSecondOptionCorrection&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.130487" steps="1383"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="channelDataHasSaneAmounts&#39;vc" expl="VC for channelDataHasSaneAmounts" proved="true">
 <proof prover="2"><result status="valid" time="0.071882" steps="150"/></proof>
 </goal>
 <goal name="goodView&#39;vc" expl="VC for goodView" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="goodView&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136680" steps="310"/></proof>
  </goal>
  <goal name="goodView&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.091372" steps="45"/></proof>
  </goal>
  <goal name="goodView&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.073764" steps="426"/></proof>
  </goal>
  <goal name="goodView&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.104846" steps="357"/></proof>
  </goal>
  <goal name="goodView&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074999" steps="236"/></proof>
  </goal>
  <goal name="goodView&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123470" steps="157"/></proof>
  </goal>
  <goal name="goodView&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143974" steps="1151"/></proof>
  </goal>
  <goal name="goodView&#39;vc.7" expl="witness existence" proved="true">
  <transf name="unfold" proved="true" arg1="messageSignatureIn">
   <goal name="goodView&#39;vc.7.0" expl="witness existence" proved="true">
   <proof prover="2"><result status="valid" time="1.218990" steps="10473"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodView&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.104607" steps="689"/></proof>
  </goal>
  <goal name="goodView&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.517015" steps="4484"/></proof>
  </goal>
  <goal name="goodView&#39;vc.10" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="goodView&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.405895" steps="4344"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="goodView&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.042142" steps="108"/></proof>
  </goal>
  <goal name="goodView&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.518848" steps="5101"/></proof>
  </goal>
  <goal name="goodView&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.524296" steps="4317"/></proof>
  </goal>
  <goal name="goodView&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.408666" steps="3840"/></proof>
  </goal>
  <goal name="goodView&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.985811" steps="74831"/></proof>
  </goal>
  <goal name="goodView&#39;vc.16" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="goodView&#39;vc.16.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.944564" steps="10383"/></proof>
   </goal>
   <goal name="goodView&#39;vc.16.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.845456" steps="21671"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getSimplePartySpec&#39;vc" expl="VC for getSimplePartySpec" proved="true">
 <proof prover="2"><result status="valid" time="0.496030" steps="5546"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="honestPartyInteraction.mlw"/>
<theory name="HonestPartyInteractionsImplementation" proved="true">
 <goal name="updateGenerateGoodView&#39;vc" expl="VC for updateGenerateGoodView" proved="true">
 <proof prover="2"><result status="valid" time="0.067201" steps="56"/></proof>
 </goal>
 <goal name="signableTXOnlyAboutOurChannelInnerWhenNotSigningTx&#39;vc" expl="VC for signableTXOnlyAboutOurChannelInnerWhenNotSigningTx" proved="true">
 <proof prover="2"><result status="valid" time="0.166896" steps="796"/></proof>
 </goal>
 <goal name="bestHsSplitTransitionWhenNoChange&#39;vc" expl="VC for bestHsSplitTransitionWhenNoChange" proved="true">
 <proof prover="2"><result status="valid" time="0.087774" steps="261"/></proof>
 </goal>
 <goal name="emptyTransitionIsGood&#39;vc" expl="VC for emptyTransitionIsGood" proved="true">
 <proof prover="2"><result status="valid" time="0.114483" steps="1712"/></proof>
 </goal>
 <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc" expl="VC for coherentOurSignaturesPreservedWhenSigning" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094149" steps="62"/></proof>
  </goal>
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="7.054654" steps="654501"/></proof>
   </goal>
   <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.510693" steps="5760"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.492296" steps="4767"/></proof>
   </goal>
   <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.2.1" expl="assertion" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.2.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.796625" steps="255289"/></proof>
    </goal>
    <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.2.1.1" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.355736" steps="216913"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.434030" steps="4617"/></proof>
  </goal>
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.152247" steps="1333"/></proof>
  </goal>
  <goal name="coherentOurSignaturesPreservedWhenSigning&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.987493" steps="207315"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="payOnChainInner&#39;vc" expl="VC for payOnChainInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="payOnChainInner&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.214223" steps="932"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="payOnChainInner&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="fundingCreatedSentIsValid">
    <goal name="payOnChainInner&#39;vc.1.0.0" expl="VC for payOnChainInner" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="payOnChainInner&#39;vc.1.0.0.0" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.0.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.375494" steps="2685"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.1" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.1.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.368701" steps="2712"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.2" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.2.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.363462" steps="2823"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.3" expl="VC for payOnChainInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.210622" steps="1869"/></proof>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.4" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.4.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.359438" steps="2761"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.5" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.5.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.341685" steps="2778"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.6" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.6.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.519406" steps="3694"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.7" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.7.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.384393" steps="2811"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.8" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.8.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.376647" steps="2802"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.0.0.9" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.0.0.9.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="0.372982" steps="2809"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.1.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="onlyCorrectSplitsSignedInitially">
    <goal name="payOnChainInner&#39;vc.1.1.0" expl="VC for payOnChainInner" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="payOnChainInner&#39;vc.1.1.0.0" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.1.0.0.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="1.027794" steps="7141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.1.0.1" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.1.0.1.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="1.064736" steps="7249"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.1.0.2" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.1.0.2.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="1.023694" steps="7205"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.1.0.3" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.1.0.3.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="1.090245" steps="6948"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="payOnChainInner&#39;vc.1.1.0.4" expl="VC for payOnChainInner" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="payOnChainInner&#39;vc.1.1.0.4.0" expl="VC for payOnChainInner" proved="true">
      <proof prover="2" memlimit="1000"><result status="valid" time="1.032911" steps="6957"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.1.2" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="payOnChainInner&#39;vc.1.2.0" expl="assertion" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.939873" steps="6402"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="payOnChainInner&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155917" steps="105"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="payOnChainInner&#39;vc.3.0" expl="VC for payOnChainInner" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.3.0.0" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="7.079442" steps="70347"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.1" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.059393" steps="136"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.2" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.045120" steps="75"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.3" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.104629" steps="558"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.4" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.783287" steps="7551"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.5" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.111453" steps="639"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.6" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.102713" steps="632"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.7" expl="VC for payOnChainInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="payOnChainInner&#39;vc.3.0.7.0" expl="VC for payOnChainInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.222334" steps="1093"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.8" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.056823" steps="133"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.9" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.054662" steps="134"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.10" expl="VC for payOnChainInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="payOnChainInner&#39;vc.3.0.10.0" expl="VC for payOnChainInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.251926" steps="1093"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.11" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.059981" steps="133"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.12" expl="VC for payOnChainInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="payOnChainInner&#39;vc.3.0.12.0" expl="VC for payOnChainInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.183449" steps="1085"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.13" expl="VC for payOnChainInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.101591" steps="489"/></proof>
    </goal>
    <goal name="payOnChainInner&#39;vc.3.0.14" expl="VC for payOnChainInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="payOnChainInner&#39;vc.3.0.14.0" expl="VC for payOnChainInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="1.322435" steps="10160"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="payOnChainInner&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.107237" steps="488"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.205525" steps="20808"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.909614" steps="28592"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.7" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="payOnChainInner&#39;vc.7.0" expl="VC for payOnChainInner" proved="true">
   <proof prover="2"><result status="valid" time="3.707915" steps="34567"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="payOnChainInner&#39;vc.8" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.069031" steps="453"/></proof>
  </goal>
  <goal name="payOnChainInner&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="payOnChainInner&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.9.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.476487" steps="229330"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.9.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="3.411332" steps="278028"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.9.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.9.2.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="3.260515" steps="251378"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.9.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.9.3.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="3.078216" steps="251349"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChainInner&#39;vc.9.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChainInner&#39;vc.9.4.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="3.086236" steps="251258"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="payOnChain&#39;vc" expl="VC for payOnChain" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="payOnChain&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118755" steps="275"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.108132" steps="162"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088965" steps="64"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.093965" steps="64"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.147977" steps="274"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.096661" steps="66"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.071386" steps="67"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171197" steps="428"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123488" steps="133"/></proof>
  </goal>
  <goal name="payOnChain&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="payOnChain&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChain&#39;vc.9.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.150217" steps="189"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.098839" steps="87"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.133496" steps="86"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChain&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChain&#39;vc.9.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.132616" steps="173"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.092323" steps="83"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.120699" steps="82"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChain&#39;vc.9.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChain&#39;vc.9.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.111171" steps="729"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.182010" steps="84"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.2.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.166996" steps="83"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChain&#39;vc.9.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChain&#39;vc.9.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.100739" steps="614"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.159389" steps="79"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.3.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.134794" steps="78"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="payOnChain&#39;vc.9.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="payOnChain&#39;vc.9.4.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.120472" steps="840"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.4.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.145156" steps="83"/></proof>
    </goal>
    <goal name="payOnChain&#39;vc.9.4.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.103714" steps="82"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="openChannelInner&#39;vc" expl="VC for openChannelInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="openChannelInner&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="openChannelInner&#39;vc.0.0" expl="VC for openChannelInner" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openChannelInner&#39;vc.0.0.0" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.549173" steps="3840"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.1" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.083617" steps="368"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.2" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.078986" steps="264"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.3" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.084373" steps="285"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.4" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.230686" steps="2228"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.5" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.197948" steps="288"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.6" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.077340" steps="281"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.7" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.089530" steps="515"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.8" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.064212" steps="218"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.9" expl="VC for openChannelInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="openChannelInner&#39;vc.0.0.9.0" expl="VC for openChannelInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.313396" steps="1226"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.10" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.065528" steps="227"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.11" expl="VC for openChannelInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="openChannelInner&#39;vc.0.0.11.0" expl="VC for openChannelInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.175700" steps="544"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.12" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.061288" steps="106"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.13" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.064107" steps="101"/></proof>
    </goal>
    <goal name="openChannelInner&#39;vc.0.0.14" expl="VC for openChannelInner" proved="true">
    <proof prover="2"><result status="valid" time="0.066712" steps="103"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openChannelInner&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.711260" steps="18421"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="openChannel&#39;vc" expl="VC for openChannel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="openChannel&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.045906" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.056316" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.062074" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.049620" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.060780" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.174713" steps="55"/></proof>
  </goal>
  <goal name="openChannel&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openChannel&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openChannel&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.164454" steps="65"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.161375" steps="91"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.169194" steps="89"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="openChannel&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openChannel&#39;vc.6.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.149738" steps="65"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.186060" steps="86"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.175758" steps="81"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="openChannel&#39;vc.6.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openChannel&#39;vc.6.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.145346" steps="65"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.183982" steps="87"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.2.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.172122" steps="81"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="openChannel&#39;vc.6.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openChannel&#39;vc.6.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.144126" steps="65"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.189651" steps="135"/></proof>
    </goal>
    <goal name="openChannel&#39;vc.6.3.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.145235" steps="82"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="initiateTransferInner&#39;vc" expl="VC for initiateTransferInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="initiateTransferInner&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.704135" steps="6285"/></proof>
  </goal>
  <goal name="initiateTransferInner&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.434356" steps="18548"/></proof>
  </goal>
  <goal name="initiateTransferInner&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.194837" steps="18428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="initiateTransfer&#39;vc" expl="VC for initiateTransfer" proved="true">
 <proof prover="2"><result status="valid" time="0.466214" steps="4503"/></proof>
 </goal>
 <goal name="prepareHalfSignedSplit&#39;vc" expl="VC for prepareHalfSignedSplit" proved="true">
 <proof prover="2"><result status="valid" time="0.097491" steps="45"/></proof>
 </goal>
 <goal name="prepareHalfSignedSplitSpec&#39;vc" expl="VC for prepareHalfSignedSplitSpec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prepareHalfSignedSplitSpec&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.456594" steps="27362"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="openDisputeInner&#39;vc" expl="VC for openDisputeInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="openDisputeInner&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122434" steps="84"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180888" steps="621"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118701" steps="97"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="openDisputeInner&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.007356" steps="195619"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDisputeInner&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.189135" steps="277"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.100152" steps="334"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openDisputeInner&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.169754" steps="346"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="openDisputeInner&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.879782" steps="16932"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.224890" steps="1572"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121111" steps="534"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.281791" steps="2379"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.300908" steps="2506"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.100803" steps="500"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180977" steps="174"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openDisputeInner&#39;vc.14.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.14.0.0" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.14.0.0.0" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="11.564327" steps="118006"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDisputeInner&#39;vc.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.154728" steps="938"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="7.253309" steps="66214"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="8.644240" steps="88400"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.18" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.489477" steps="296143"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.19" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="openDisputeInner&#39;vc.19.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.19.0.0" expl="assertion" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="2.513390" steps="22358"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDisputeInner&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.825911" steps="24681"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="openDisputeInner&#39;vc.21.0" expl="VC for openDisputeInner" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.21.0.0" expl="VC for openDisputeInner" proved="true">
    <proof prover="1"><result status="valid" time="3.145608" steps="258169"/></proof>
    </goal>
    <goal name="openDisputeInner&#39;vc.21.0.1" expl="VC for openDisputeInner" proved="true">
    <proof prover="1"><result status="valid" time="3.358837" steps="254708"/></proof>
    </goal>
    <goal name="openDisputeInner&#39;vc.21.0.2" expl="VC for openDisputeInner" proved="true">
    <proof prover="1"><result status="valid" time="2.452833" steps="218582"/></proof>
    </goal>
    <goal name="openDisputeInner&#39;vc.21.0.3" expl="VC for openDisputeInner" proved="true">
    <proof prover="2"><result status="valid" time="0.691263" steps="5868"/></proof>
    </goal>
    <goal name="openDisputeInner&#39;vc.21.0.4" expl="VC for openDisputeInner" proved="true">
    <proof prover="2"><result status="valid" time="0.116615" steps="533"/></proof>
    </goal>
    <goal name="openDisputeInner&#39;vc.21.0.5" expl="VC for openDisputeInner" proved="true">
    <proof prover="2"><result status="valid" time="0.100555" steps="265"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDisputeInner&#39;vc.22" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.101853" steps="364"/></proof>
  </goal>
  <goal name="openDisputeInner&#39;vc.23" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openDisputeInner&#39;vc.23.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.061434" steps="167"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDisputeInner&#39;vc.23.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.1.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.096424" steps="238"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDisputeInner&#39;vc.23.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.2.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.2.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.099432" steps="264"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDisputeInner&#39;vc.23.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.3.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.3.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.116711" steps="562"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDisputeInner&#39;vc.23.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.4.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.4.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.082040" steps="167"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDisputeInner&#39;vc.23.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDisputeInner&#39;vc.23.5.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDisputeInner&#39;vc.23.5.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.340638" steps="2273"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="noSecondBestForCommitmentSignedSent&#39;vc" expl="VC for noSecondBestForCommitmentSignedSent" proved="true">
 <proof prover="2"><result status="valid" time="6.287608" steps="73771"/></proof>
 </goal>
 <goal name="isSignedSendGetClosing&#39;vc" expl="VC for isSignedSendGetClosing" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isSignedSendGetClosing&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136613" steps="670"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125427" steps="561"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.178566" steps="57"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150279" steps="703"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099183" steps="259"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.306469" steps="25627"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.491128" steps="12425"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.441241" steps="19448"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.843346" steps="23135"/></proof>
  </goal>
  <goal name="isSignedSendGetClosing&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.801590" steps="159812"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sendClaimAfterTimeout&#39;vc" expl="VC for sendClaimAfterTimeout" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendClaimAfterTimeout&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.982519" steps="145568"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.135832" steps="60"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.2" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="sendClaimAfterTimeout&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.159846" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.133360" steps="60"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.132267" steps="60"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.646033" steps="158964"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransitionForClosing">
   <goal name="sendClaimAfterTimeout&#39;vc.6.0" expl="VC for sendClaimAfterTimeout" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.6.0.0" expl="VC for sendClaimAfterTimeout" proved="true">
    <proof prover="2"><result status="valid" time="0.297877" steps="1712"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.6.0.1" expl="VC for sendClaimAfterTimeout" proved="true">
    <proof prover="2"><result status="valid" time="0.206133" steps="1143"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.6.0.2" expl="VC for sendClaimAfterTimeout" proved="true">
    <proof prover="2"><result status="valid" time="0.750833" steps="5295"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.6.0.3" expl="VC for sendClaimAfterTimeout" proved="true">
    <proof prover="2"><result status="valid" time="0.880775" steps="5463"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.6.0.4" expl="VC for sendClaimAfterTimeout" proved="true">
    <proof prover="2"><result status="valid" time="0.172269" steps="995"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.126807" steps="46221"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.522223" steps="47829"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="23.565058" steps="151913"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.938419" steps="6189"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125318" steps="65"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178381" steps="196"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099073" steps="206"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114908" steps="509"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.346044" steps="11422"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.088004" steps="150"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.17" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.183389" steps="8730"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.193594" steps="189871"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095595" steps="170"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169324" steps="1153"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="sendClaimAfterTimeout&#39;vc.21.0" expl="VC for sendClaimAfterTimeout" proved="true">
   <proof prover="2"><result status="valid" time="3.123345" steps="24510"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.22" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.371727" steps="212006"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.23" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.948656" steps="250577"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="revocationSendIfRequired">
   <goal name="sendClaimAfterTimeout&#39;vc.24.0" expl="VC for sendClaimAfterTimeout" proved="true">
   <proof prover="2"><result status="valid" time="0.175654" steps="912"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.054801" steps="246031"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.26" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendClaimAfterTimeout&#39;vc.26.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.26.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.748905" steps="4791"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.049724" steps="230183"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="sendClaimAfterTimeout&#39;vc.28.0" expl="VC for sendClaimAfterTimeout" proved="true">
   <proof prover="1"><result status="valid" time="3.200414" steps="243587"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.158806" steps="35217"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161867" steps="724"/></proof>
  </goal>
  <goal name="sendClaimAfterTimeout&#39;vc.31" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendClaimAfterTimeout&#39;vc.31.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.077626" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.0.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.087797" steps="145"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.0.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.0.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.082143" steps="183"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sendClaimAfterTimeout&#39;vc.31.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.073393" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.096482" steps="186"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.107381" steps="248"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sendClaimAfterTimeout&#39;vc.31.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.069114" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.2.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.2.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.114501" steps="353"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.2.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.2.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.132568" steps="553"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sendClaimAfterTimeout&#39;vc.31.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.079830" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.3.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.3.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.092013" steps="7081"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.3.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.3.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.098152" steps="183"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sendClaimAfterTimeout&#39;vc.31.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.4.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.075616" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.4.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.4.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.632892" steps="4139"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.4.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.4.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.330277" steps="1885"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sendClaimAfterTimeout&#39;vc.31.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendClaimAfterTimeout&#39;vc.31.5.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.081190" steps="84"/></proof>
    </goal>
    <goal name="sendClaimAfterTimeout&#39;vc.31.5.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="sendClaimAfterTimeout&#39;vc.31.5.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.087912" steps="144"/></proof>
     </goal>
     <goal name="sendClaimAfterTimeout&#39;vc.31.5.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sendClaimAfterTimeout&#39;vc.31.5.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.094700" steps="182"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="extractReturnsCorrect&#39;vc" expl="VC for extractReturnsCorrect" proved="true">
 <proof prover="1"><result status="valid" time="2.706682" steps="207747"/></proof>
 </goal>
 <goal name="openDispute&#39;vc" expl="VC for openDispute" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="openDispute&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="openDispute&#39;vc.0.0" expl="VC for openDispute" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.0.0.0" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.652369" steps="3959"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.1" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.218752" steps="178"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.2" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.078314" steps="86"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.3" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.236069" steps="266"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.4" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.340145" steps="2202"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.5" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.110100" steps="269"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.6" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.219533" steps="262"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.7" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.228900" steps="462"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.8" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.198598" steps="193"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.9" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.151654" steps="842"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.10" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.193087" steps="178"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.11" expl="VC for openDispute" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="openDispute&#39;vc.0.0.11.0" expl="VC for openDispute" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.238313" steps="496"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="openDispute&#39;vc.0.0.12" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.196078" steps="97"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.13" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.205169" steps="91"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.0.0.14" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.168560" steps="94"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDispute&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118243" steps="354"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148339" steps="54"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.077365" steps="54"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.151191" steps="147696"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.081532" steps="54"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.150625" steps="54"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.201904" steps="1208"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143717" steps="557"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185225" steps="989"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122294" steps="266"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="openDispute&#39;vc.11.0" expl="VC for openDispute" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.11.0.0" expl="VC for openDispute" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="openDispute&#39;vc.11.0.0.0" expl="VC for openDispute" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="1.228875" steps="7528"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="openDispute&#39;vc.11.0.1" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.167285" steps="699"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.2" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.094515" steps="109"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.3" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.137800" steps="392"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.4" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.433102" steps="2744"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.5" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.138811" steps="400"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.6" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.135410" steps="393"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.7" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.097655" steps="124"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.8" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.103617" steps="124"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.9" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.111500" steps="124"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.10" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.106287" steps="124"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.11" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.104598" steps="124"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.12" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.979444" steps="6126"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.13" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.121220" steps="332"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.11.0.14" expl="VC for openDispute" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.132478" steps="328"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDispute&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openDispute&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.552891" steps="10408"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDispute&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.087699" steps="85"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.085807" steps="85"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.080526" steps="85"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.134894" steps="353"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.17" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.114810" steps="142"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.247566" steps="383"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.092402" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.091437" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088430" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.22" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.093663" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.23" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="openDispute&#39;vc.23.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.23.0.0" expl="precondition" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.093986" steps="87"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDispute&#39;vc.24" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.089543" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.25" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.076359" steps="87"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.26" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="openDispute&#39;vc.26.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.26.0.0" expl="assertion" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="5.306601" steps="37309"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="openDispute&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="8.363778" steps="60918"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.211460" steps="127"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.139604" steps="364"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.30" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.131339" steps="380"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.572256" steps="18220"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.285606" steps="44729"/></proof>
  </goal>
  <goal name="openDispute&#39;vc.33" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="openDispute&#39;vc.33.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.33.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.874492" steps="159544"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.33.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDispute&#39;vc.33.0.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.084658" steps="77"/></proof>
     </goal>
     <goal name="openDispute&#39;vc.33.0.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="openDispute&#39;vc.33.0.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="openDispute&#39;vc.33.0.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.112546" steps="143"/></proof>
       </goal>
       <goal name="openDispute&#39;vc.33.0.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.085429" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="openDispute&#39;vc.33.0.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.077419" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDispute&#39;vc.33.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.33.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.251714" steps="1549"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.33.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDispute&#39;vc.33.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.086761" steps="77"/></proof>
     </goal>
     <goal name="openDispute&#39;vc.33.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="openDispute&#39;vc.33.1.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="openDispute&#39;vc.33.1.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.104407" steps="137"/></proof>
       </goal>
       <goal name="openDispute&#39;vc.33.1.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.114026" steps="167"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="openDispute&#39;vc.33.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.115894" steps="157"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDispute&#39;vc.33.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.33.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.097310" steps="165"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.33.2.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDispute&#39;vc.33.2.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.109199" steps="146"/></proof>
     </goal>
     <goal name="openDispute&#39;vc.33.2.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="openDispute&#39;vc.33.2.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="openDispute&#39;vc.33.2.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.194599" steps="800"/></proof>
       </goal>
       <goal name="openDispute&#39;vc.33.2.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.183906" steps="740"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="openDispute&#39;vc.33.2.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.135207" steps="330"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDispute&#39;vc.33.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.33.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.106286" steps="165"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.33.3.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDispute&#39;vc.33.3.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.089470" steps="77"/></proof>
     </goal>
     <goal name="openDispute&#39;vc.33.3.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="openDispute&#39;vc.33.3.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="openDispute&#39;vc.33.3.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.109332" steps="139"/></proof>
       </goal>
       <goal name="openDispute&#39;vc.33.3.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.130932" steps="347"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="openDispute&#39;vc.33.3.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.128679" steps="329"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="openDispute&#39;vc.33.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="openDispute&#39;vc.33.4.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.154406" steps="682"/></proof>
    </goal>
    <goal name="openDispute&#39;vc.33.4.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="openDispute&#39;vc.33.4.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.084208" steps="77"/></proof>
     </goal>
     <goal name="openDispute&#39;vc.33.4.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="openDispute&#39;vc.33.4.1.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="openDispute&#39;vc.33.4.1.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.119767" steps="142"/></proof>
       </goal>
       <goal name="openDispute&#39;vc.33.4.1.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.544819" steps="3198"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="openDispute&#39;vc.33.4.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.536261" steps="3157"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="extractIsSpent&#39;vc" expl="VC for extractIsSpent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="extractIsSpent&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099652" steps="137"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.889347" steps="174666"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.157123" steps="180395"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.104780" steps="181"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.402386" steps="214922"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.717926" steps="234761"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.395852" steps="276417"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.086893" steps="254218"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.819934" steps="240915"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.072262" steps="255899"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.114843" steps="305"/></proof>
  </goal>
  <goal name="extractIsSpent&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="extractIsSpent&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.129966" steps="52"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="extractIsSpent&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.082495" steps="51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="receiveOpenMessageFromPartyInner&#39;vc" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.248393" steps="1521"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.1" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.109677" steps="200"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.2" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.097061" steps="90"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.3" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.116082" steps="284"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.4" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.318754" steps="2251"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.5" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.109204" steps="290"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.6" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.118605" steps="281"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.7" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2"><result status="valid" time="0.147116" steps="523"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.8" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.119620" steps="214"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.9" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.178962" steps="1082"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.10" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.106022" steps="200"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.11" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.11.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="0.199929" steps="521"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.12" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.097704" steps="101"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.13" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.120171" steps="95"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.0.0.14" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.113852" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.825321" steps="159582"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.242531" steps="311"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.3.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="2"><result status="valid" time="2.087074" steps="17870"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170333" steps="78"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168388" steps="768"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="36.715050" steps="1404004"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.7.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.021300" steps="8892"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.567402" steps="33029"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.444408" steps="261997"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.10" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.10.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="2"><result status="valid" time="5.987149" steps="53464"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.087964" steps="133"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.694600" steps="185536"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.213544" steps="19701"/></proof>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.13.1" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="2"><result status="valid" time="0.236548" steps="1209"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.024647" steps="233962"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.15" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.15.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="1"><result status="valid" time="3.703869" steps="249852"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.065870" steps="337413"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.355641" steps="234965"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.18" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.18.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.18.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.18.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="5.459965" steps="439534"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.679395" steps="20936"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.20" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.20.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.832783" steps="14821"/></proof>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.20.1" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="2"><result status="valid" time="0.260898" steps="1715"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.21" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1=" onlyCorrectSplitsSignedInitially stateOpening myState.messagesSigned">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.105365" steps="160"/></proof>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="coherentOurSignatures sigState myState.partySide myState.messagesSigned">
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.1.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.115309" steps="259"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.1.1" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="forall sig2. num_occ (SignableSplit s, sig2) myState.messagesSigned = 0">
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.1.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="2.247475" steps="189978"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.21.1.1.1" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.133221" steps="268"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.22" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.815569" steps="180019"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.23.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.23.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.546792" steps="11442"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.165078" steps="192603"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.669547" steps="226110"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.314015" steps="249738"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.257778" steps="236772"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.28" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.118729" steps="399"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130408" steps="399"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.233481" steps="1105"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.31" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.31.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.31.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.31.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="4.146586" steps="375173"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.32" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.240293" steps="186315"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.33" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.33.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="7.281598" steps="406419"/></proof>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.33.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="7.265154" steps="406875"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120021" steps="206"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.35" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.757197" steps="216368"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.36" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.041718" steps="228329"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.120971" steps="234"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.38" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122915" steps="235"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.39" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.279036" steps="310334"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.40" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.40.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.40.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.346210" steps="1856"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.41" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.716251" steps="208719"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.42" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127140" steps="229"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.43" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signableTXOnlyAboutOurChannel">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.43.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="1"><result status="valid" time="4.341289" steps="329136"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.44" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="7.807232" steps="56442"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.182586" steps="731"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.251886" steps="14607"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137269" steps="245"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.48" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsVirtualChannelInNormal">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.48.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.48.0.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2"><result status="valid" time="0.260612" steps="266"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.48.0.1" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2"><result status="valid" time="0.675424" steps="4181"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.48.0.2" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
    <proof prover="2"><result status="valid" time="1.028087" steps="6738"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.909097" steps="11188"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.50" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.348746" steps="259329"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.51" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.105705" steps="183"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.507005" steps="3301"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.233263" steps="208"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.54" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.465378" steps="214288"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.55" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.040290" steps="226699"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.56" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.427375" steps="264908"/></proof>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.57" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.57.0" expl="VC for receiveOpenMessageFromPartyInner" proved="true">
   <proof prover="1"><result status="valid" time="4.195138" steps="301662"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receiveOpenMessageFromPartyInner&#39;vc.58" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="5.948483" steps="339768"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.997846" steps="162138"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.510386" steps="12838"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.222954" steps="341"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.4" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.251494" steps="171568"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.5.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="2.020976" steps="162327"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.104415" steps="167"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.6" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.735420" steps="161974"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.7" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.022117" steps="161882"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.132137" steps="341"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.9" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.215725" steps="171568"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="2.058768" steps="165883"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.406766" steps="12055"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="2.316089" steps="166511"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="1"><result status="valid" time="2.674335" steps="180759"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="2.780607" steps="182760"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="1"><result status="valid" time="2.896230" steps="183619"/></proof>
          </goal>
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.108112" steps="199"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.11" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.749549" steps="161978"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.463150" steps="12922"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.136317" steps="342"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.14" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.184363" steps="171572"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="2.737697" steps="189273"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="3.098632" steps="190850"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.145967" steps="423"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="1"><result status="valid" time="3.131707" steps="205668"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="3.840755" steps="250050"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.15.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.115708" steps="231"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.16" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.041729" steps="161974"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.17" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.862862" steps="162138"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.18" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.844401" steps="161882"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.129623" steps="339"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.20" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.947755" steps="162541"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.21" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.035535" steps="162705"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.22" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.957477" steps="162449"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.133028" steps="335"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.0.24" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.209583" steps="172195"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.587454" steps="4241"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.121566" steps="125"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.117439" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.207318" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.118725" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.113073" steps="127"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.130588" steps="227"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.108764" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124419" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.111946" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.115098" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.128639" steps="127"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.123504" steps="134"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.115841" steps="139"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.128332" steps="159"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.130574" steps="169"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.199365" steps="171"/></proof>
          </goal>
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.231594" steps="275"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.118295" steps="119"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.208849" steps="124"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.216155" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.115608" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.115126" steps="135"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.126748" steps="152"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.128519" steps="154"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.129681" steps="156"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.122904" steps="163"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.15.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.150585" steps="325"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.122126" steps="119"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124272" steps="124"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.116564" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.123735" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.121382" steps="117"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.235484" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.107950" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.219793" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.1.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.116362" steps="119"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.262961" steps="185"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.238109" steps="124"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.250487" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.243517" steps="123"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.176073" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.116452" steps="127"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.130051" steps="251"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.099061" steps="119"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.102958" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.105734" steps="123"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.099940" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.101649" steps="128"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.095983" steps="133"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.091307" steps="138"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.087598" steps="158"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.087154" steps="169"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.084110" steps="171"/></proof>
          </goal>
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.165473" steps="301"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.074411" steps="119"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.075983" steps="123"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.076905" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.078368" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.082026" steps="135"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.083583" steps="153"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.085182" steps="154"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.084798" steps="156"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.086046" steps="163"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.15.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.107886" steps="355"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.081879" steps="118"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086676" steps="123"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.088402" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.082306" steps="122"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.082228" steps="118"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.084972" steps="123"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.085060" steps="120"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.085154" steps="121"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.2.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.082563" steps="119"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.101754" steps="485"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087484" steps="241"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.085198" steps="233"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087440" steps="248"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086073" steps="233"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.086424" steps="244"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.104515" steps="500"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086854" steps="228"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086958" steps="233"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086952" steps="248"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086809" steps="233"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.087859" steps="243"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.089694" steps="250"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.095974" steps="258"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.098479" steps="312"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.097993" steps="308"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.098249" steps="309"/></proof>
          </goal>
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.170454" steps="593"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.090180" steps="227"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087785" steps="240"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086841" steps="248"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087834" steps="233"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.090154" steps="278"/></proof>
     </goal>
     <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.089838" steps="285"/></proof>
      </goal>
      <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.091742" steps="288"/></proof>
       </goal>
       <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.092135" steps="297"/></proof>
        </goal>
        <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.098918" steps="310"/></proof>
         </goal>
         <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.15.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.165517" steps="952"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.091687" steps="226"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.101668" steps="239"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.089350" steps="231"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087913" steps="246"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086016" steps="222"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.087070" steps="235"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086034" steps="227"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.085392" steps="242"/></proof>
    </goal>
    <goal name="receiveOpenMessageFromPartyInner&#39;vc.58.3.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.083199" steps="228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="receiveOpenMessageFromParty&#39;vc" expl="VC for receiveOpenMessageFromParty" proved="true">
 <proof prover="2"><result status="valid" time="0.110063" steps="362"/></proof>
 </goal>
 <goal name="signedConditionalSplits&#39;vc" expl="VC for signedConditionalSplits" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="signedConditionalSplits&#39;vc.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="signedConditionalSplits&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.315306" steps="1190"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="signedConditionalSplits&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty" arg2="in" arg3="goodPartyReq">
   <goal name="signedConditionalSplits&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.254148" steps="244229"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="signedConditionalSplits&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167317" steps="94"/></proof>
  </goal>
  <goal name="signedConditionalSplits&#39;vc.3" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty" arg2="in" arg3="goodPartyReq">
   <goal name="signedConditionalSplits&#39;vc.3.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="2.454737" steps="210670"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="signedConditionalSplits&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.976282" steps="218937"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="whenNormalNotDisoputeOpen&#39;vc" expl="VC for whenNormalNotDisoputeOpen" proved="true">
 <proof prover="2"><result status="valid" time="0.146934" steps="461"/></proof>
 </goal>
 <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.139513" steps="151"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.163355" steps="384"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.250645" steps="1132"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125162" steps="88"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.368447" steps="1710"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.271064" steps="991"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpec">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.6.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.6.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.6.0.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="2.231308" steps="11891"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="agreement">
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.159815" steps="119"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.164976" steps="110"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="10.040458" steps="88799"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodChannelData">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.278147" steps="1217"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.138743" steps="98"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.288942" steps="1217"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.147993" steps="103"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.214276" steps="510"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.314719" steps="1432"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.339122" steps="1236"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.295573" steps="1185"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.325511" steps="1254"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.295865" steps="1204"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.303298" steps="1335"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.317906" steps="1211"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.221836" steps="530"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="1.290963" steps="6137"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.749604" steps="4261"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.9.0.15" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.553424" steps="2739"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.10" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="agreement">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.10.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="1.247185" steps="8493"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.154011" steps="221"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.899746" steps="4791"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.13" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.724487" steps="266827"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.138752" steps="124"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.468721" steps="1602"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.243644" steps="224"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.276847" steps="777"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="1"><result status="valid" time="3.048861" steps="229040"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.466547" steps="2325"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.460501" steps="2318"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.265181" steps="249"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.231119" steps="250"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.176279" steps="250"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.157792" steps="249"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.173319" steps="250"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.173914" steps="259"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.235779" steps="705"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.14.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.162050" steps="255"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.684007" steps="255434"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.292186" steps="1298"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121898" steps="102"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.158586" steps="178"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.193219" steps="423"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.20" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.634394" steps="319025"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.376915" steps="1378"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.22" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.410712" steps="1590"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.22.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="2.134044" steps="11095"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171850" steps="208"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.259274" steps="681"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.259895" steps="551"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194910" steps="489"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.584454" steps="206836"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.154597" steps="228"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="7.325148" steps="43095"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081121" steps="265"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.31" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="17.068943" steps="722613"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="10.046019" steps="55351"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.33" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.080046" steps="397498"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.500547" steps="2966"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.365489" steps="1966"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.233469" steps="8325"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.530918" steps="3032"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.38" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.363143" steps="236849"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.39" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.39.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="signedSplitsSpec">
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.39.0.0" expl="assertion" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.39.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.306307" steps="447"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.662367" steps="3312"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodChannelData">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.525032" steps="2136"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.674993" steps="2136"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.647777" steps="2135"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.386410" steps="787"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.357560" steps="772"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.145432" steps="150"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.161802" steps="150"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.180298" steps="150"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.691095" steps="2107"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.538808" steps="2131"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.572390" steps="2233"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.552507" steps="2140"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.410946" steps="798"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.383630" steps="838"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="1.308030" steps="6628"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.41.0.15" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="1.109164" steps="5333"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.42" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.134533" steps="27161"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.43" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.200152" steps="289"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.44" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.449939" steps="241914"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.45" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.977253" steps="367588"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.612505" steps="2503"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.47" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.422554" steps="241685"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.48" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.48.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="4.571585" steps="26071"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.626635" steps="2649"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.373448" steps="917"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="unfold" proved="true" arg1="preserved">
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.2.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.2.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
     <proof prover="2"><result status="valid" time="0.350411" steps="1007"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.49.2.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
     <proof prover="2"><result status="valid" time="11.177657" steps="57537"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.50" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpec">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.50.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.50.0.0" expl="assertion" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.50.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.329563" steps="492"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.51" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.659037" steps="241409"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.52" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isRecordsChannelInNormal">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.52.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="6.698166" steps="35448"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.600414" steps="2732"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.54" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.202535" steps="316466"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="7.547291" steps="40369"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.56" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.512236" steps="288390"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.57" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.223109" steps="438"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.58" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.58.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.334524" steps="1119"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.59" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.409630" steps="1491"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.266430" steps="608"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.61" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpec">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.61.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.61.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.61.0.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
     <proof prover="2" memlimit="1000"><result status="valid" time="1.859288" steps="8438"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.62" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.334609" steps="1052"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodChannelData">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="3.396896" steps="15043"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.284239" steps="1076"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="3.085281" steps="15043"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="3.192100" steps="16963"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.327831" steps="1072"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.157226" steps="117"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.188578" steps="117"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.157977" steps="117"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.306120" steps="1059"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.433383" steps="1070"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="3.088066" steps="16049"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.791089" steps="2677"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.217149" steps="510"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.298774" steps="535"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.493830" steps="2303"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.63.0.15" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="0.421303" steps="1820"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.64" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.190901" steps="218"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.65" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.882014" steps="4829"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.66" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.108773" steps="331257"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.108116" steps="145"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.330518" steps="1797"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.155002" steps="243"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.831715" steps="4323"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="1"><result status="valid" time="3.239430" steps="236379"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.424903" steps="2362"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.749621" steps="4128"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.228986" steps="267"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.208790" steps="266"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.156665" steps="267"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.148482" steps="266"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.134616" steps="266"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.137877" steps="276"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.151210" steps="272"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.67.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.136727" steps="273"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.68" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.933950" steps="217312"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.69" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182513" steps="280"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.70" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.819850" steps="10015"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.71" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransitionForChannel">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.71.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="6.155762" steps="37099"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.72" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodChannelData">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.72.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="4.238205" steps="298966"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.73" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransitionForChannel">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.73.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.515131" steps="2352"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.74" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.516443" steps="2356"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.75" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.547595" steps="37291"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.76" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.76.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.910192" steps="267653"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.293841" steps="962"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.515861" steps="14538"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77.2" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.470183" steps="7965"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77.3" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.526516" steps="2329"/></proof>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.77.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="2"><result status="valid" time="0.196094" steps="320"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.78" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194256" steps="297"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.79" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.010362" steps="27609"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.80" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.762129" steps="4091"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.81" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.165902" steps="175"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.82" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.217215" steps="465"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.83" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.855868" steps="17087"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.84" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.186899" steps="20302"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.85" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodChannelData">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.85.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.85.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="11.269096" steps="66798"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.86" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.961460" steps="17407"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.87" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.87.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <proof prover="1"><result status="valid" time="10.077372" steps="594715"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.88" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.849159" steps="21225"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.89" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="signedSplitsSpec">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.89.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.89.0.0" expl="assertion" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.89.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="2.018521" steps="11088"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.90" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="13.973450" steps="71994"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.0" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="1.975502" steps="11576"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.1" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.296421" steps="910"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.2" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.161405" steps="160"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.3" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.239794" steps="492"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.4" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.258571" steps="698"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.5" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.236693" steps="502"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.6" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.257587" steps="495"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.7" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.211074" steps="173"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.8" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.199285" steps="173"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.9" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.185555" steps="173"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.10" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.185246" steps="173"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.11" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.178419" steps="173"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.12" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.177913" steps="181"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.13" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.234907" steps="446"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.91.0.14" expl="VC for receivePayOffChainMessageFromPartyWhenGammaCorrect" proved="true">
    <proof prover="2"><result status="valid" time="0.174389" steps="179"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.92" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173454" steps="179"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.93" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.93.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.335136" steps="1155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.94" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.172386" steps="196"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.95" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.95.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.95.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.184769" steps="204"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.96" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.96.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.974120" steps="10400"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.97" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.068002" steps="208048"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.98" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.006638" steps="23051"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.99" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.217973" steps="35613"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.100" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.100.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.100.0.0" expl="assertion" proved="true">
    <proof prover="2" memlimit="1000"><result status="valid" time="1.787389" steps="8856"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.101" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.104608" steps="5908"/></proof>
  </goal>
  <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="5.138794" steps="27884"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.189403" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.191268" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.204602" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.163772" steps="124"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.167606" steps="135"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.166775" steps="142"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.170163" steps="146"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.177330" steps="154"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.174493" steps="163"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.168159" steps="179"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.5.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.239395" steps="411"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.236024" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.259310" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.225651" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.180044" steps="125"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.177238" steps="137"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.170282" steps="143"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.173265" steps="147"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.178749" steps="155"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.179314" steps="164"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.188190" steps="180"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.179818" steps="194"/></proof>
           </goal>
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1.1.1" expl="postcondition" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.10.1.1.1.1.1.1.1.0" expl="postcondition" proved="true">
            <proof prover="2"><result status="valid" time="0.302970" steps="355"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.209612" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.304069" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.312301" steps="348"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.237161" steps="125"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.15" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.324754" steps="552"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.249101" steps="350"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.302576" steps="350"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.285944" steps="350"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.242041" steps="123"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="5.241310" steps="30834"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.233008" steps="341"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.202557" steps="341"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.167372" steps="121"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.24" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.676723" steps="179404"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.25" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.201998" steps="341"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.26" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.200477" steps="341"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.27" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.166103" steps="121"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.28" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.214524" steps="343"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.29" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.285072" steps="343"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.30" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.212448" steps="343"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.0.31" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.170194" steps="121"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.585200" steps="1674"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.233583" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.263091" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.206276" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.199739" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.194651" steps="130"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.185304" steps="136"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.185352" steps="140"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.174032" steps="147"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.174963" steps="156"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.175312" steps="173"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.5.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.299325" steps="915"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.234961" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.257381" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.229225" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.231361" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.187852" steps="131"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.182882" steps="137"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.190710" steps="142"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.186627" steps="148"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.206045" steps="158"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.198512" steps="175"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.190676" steps="188"/></proof>
           </goal>
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1.1.1" expl="postcondition" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.10.1.1.1.1.1.1.1.0" expl="postcondition" proved="true">
            <proof prover="2"><result status="valid" time="0.250269" steps="346"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.190867" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.306486" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.252893" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.269693" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.15" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.262746" steps="514"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.268087" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.304867" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.166103" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.256850" steps="118"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.144215" steps="6148"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.170233" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.166607" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.159806" steps="115"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.180729" steps="188"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.25" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.169868" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.26" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.235255" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.27" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.230729" steps="115"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.28" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.262615" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.29" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.270265" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.30" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.241278" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.1.31" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.171671" steps="115"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.391552" steps="1414"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.175247" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.235247" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.269945" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.158222" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.172662" steps="131"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.165930" steps="137"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.161196" steps="141"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.172214" steps="148"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.162824" steps="157"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.183316" steps="174"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.5.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.227971" steps="405"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.180196" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.186563" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.305020" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.323368" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.204860" steps="132"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.182040" steps="138"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.192470" steps="143"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.180942" steps="149"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.185142" steps="159"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.194903" steps="176"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.280339" steps="189"/></proof>
           </goal>
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1.1.1" expl="postcondition" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.10.1.1.1.1.1.1.1.0" expl="postcondition" proved="true">
            <proof prover="2"><result status="valid" time="0.254924" steps="348"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.196520" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.187977" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.187970" steps="133"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.186509" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.15" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.267738" steps="517"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.199962" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.200323" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.300329" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.185405" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.783790" steps="3836"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.188148" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.178968" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.183110" steps="117"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.193729" steps="188"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.25" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.302178" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.26" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.238601" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.27" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.174113" steps="117"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.28" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.302892" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.29" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.153157" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.30" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.144183" steps="129"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.2.31" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.267336" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.347510" steps="1413"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.162431" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.258988" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.277301" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.249037" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.140535" steps="131"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.134995" steps="138"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.128826" steps="141"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.131082" steps="149"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.130333" steps="158"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.125152" steps="175"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.5.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.170429" steps="404"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128231" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.127541" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128212" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124338" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.118897" steps="132"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.125235" steps="139"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.126090" steps="143"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.120957" steps="150"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.132934" steps="160"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.128887" steps="177"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.226320" steps="189"/></proof>
           </goal>
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1.1.1" expl="postcondition" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.10.1.1.1.1.1.1.1.0" expl="postcondition" proved="true">
            <proof prover="2"><result status="valid" time="0.222510" steps="347"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.132285" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.133999" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.134056" steps="134"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.113195" steps="120"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.15" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.185939" steps="518"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.160347" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.154128" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.141194" steps="132"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124242" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.622298" steps="3866"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.146434" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.152217" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.139035" steps="116"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.155574" steps="188"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.25" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.135381" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.26" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.121812" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.27" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.114160" steps="116"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.28" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.108803" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.29" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.102991" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.30" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.099038" steps="130"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.3.31" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.097509" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.228578" steps="1462"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.123106" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.132875" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128943" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.217103" steps="123"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.095665" steps="133"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.090673" steps="140"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.093474" steps="144"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.099058" steps="152"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.102344" steps="161"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.096141" steps="177"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.5.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.244533" steps="1258"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.122390" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.7" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.131088" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.8" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128170" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.9" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.102644" steps="123"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.098612" steps="135"/></proof>
     </goal>
     <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.100085" steps="142"/></proof>
      </goal>
      <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.100091" steps="145"/></proof>
       </goal>
       <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.096392" steps="153"/></proof>
        </goal>
        <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.100565" steps="162"/></proof>
         </goal>
         <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.103801" steps="178"/></proof>
          </goal>
          <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.193571" steps="192"/></proof>
           </goal>
           <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1.1.1" expl="postcondition" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.10.1.1.1.1.1.1.1.0" expl="postcondition" proved="true">
            <proof prover="2"><result status="valid" time="0.282293" steps="1032"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.11" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124408" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.12" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.132193" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.13" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.127010" steps="322"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.14" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.103509" steps="123"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.15" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.203373" steps="1015"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.16" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.124199" steps="325"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.17" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128037" steps="325"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.18" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.126467" steps="325"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.19" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.109366" steps="121"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.20" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.588506" steps="4683"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.21" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.126377" steps="320"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.22" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.134091" steps="320"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.23" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.240132" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.24" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.163224" steps="468"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.25" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.142527" steps="320"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.26" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.136728" steps="320"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.27" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.111196" steps="119"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.28" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.128976" steps="318"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.29" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.121707" steps="318"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.30" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.118006" steps="318"/></proof>
    </goal>
    <goal name="receivePayOffChainMessageFromPartyWhenGammaCorrect&#39;vc.102.4.31" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.099676" steps="119"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="receivePayOffChainMessageFromParty&#39;vc" expl="VC for receivePayOffChainMessageFromParty" proved="true">
 <proof prover="2"><result status="valid" time="0.984788" steps="6945"/></proof>
 </goal>
 <goal name="reactToDisputeInner&#39;vc" expl="VC for reactToDisputeInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="reactToDisputeInner&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.831191" steps="5746"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.123536" steps="7434"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.136875" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.117501" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.091871" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.085971" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.084467" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.084981" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.085348" steps="61"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.573396" steps="2850"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.659276" steps="16474"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.274513" steps="32273"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.524576" steps="19904"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="12.110269" steps="71194"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.920341" steps="262550"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.050144" steps="9726"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.017254" steps="6018"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148843" steps="132"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176417" steps="390"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.975154" steps="10352"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.220541" steps="24050"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.186089" steps="474"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.22" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.551998" steps="252681"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.088539" steps="6022"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.24" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="reactToDisputeInner&#39;vc.24.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.138569" steps="208"/></proof>
   </goal>
   <goal name="reactToDisputeInner&#39;vc.24.1" expl="VC for reactToDisputeInner" proved="true">
   <proof prover="1"><result status="valid" time="5.473962" steps="352470"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160044" steps="219"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.473533" steps="1827"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.27" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodParty">
   <goal name="reactToDisputeInner&#39;vc.27.0" expl="VC for reactToDisputeInner" proved="true">
   <proof prover="2"><result status="valid" time="5.964536" steps="37633"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.219381" steps="752"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.553316" steps="303158"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.236681" steps="762"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.228089" steps="786"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.709106" steps="3108"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.33" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.950343" steps="284023"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.402697" steps="1121"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.35" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.426745" steps="311362"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.147897" steps="150"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.37" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.708285" steps="359907"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.38" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.543297" steps="447911"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.193498" steps="13215"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.40" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.128603" steps="64"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.41" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.132574" steps="64"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.42" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.124077" steps="64"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.43" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.124814" steps="64"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.44" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.156760" steps="125"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.45" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.158283" steps="273"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.46" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="1.001254" steps="4821"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.386167" steps="23636"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.149080" steps="136"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.578053" steps="12224"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.801635" steps="28645"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="8.406119" steps="41157"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.148171" steps="6656"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.475384" steps="20139"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.54" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.494248" steps="225998"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.085740" steps="11706"/></proof>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.56" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="goodTransition">
   <goal name="reactToDisputeInner&#39;vc.56.0" expl="VC for reactToDisputeInner" proved="true">
   <proof prover="2"><result status="valid" time="12.542632" steps="78279"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="reactToDisputeInner&#39;vc.57" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="reactToDisputeInner&#39;vc.57.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="reactToDisputeInner&#39;vc.57.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="reactToDisputeInner&#39;vc.57.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.175718" steps="92"/></proof>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.173062" steps="89"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="5.051848" steps="24124"/></proof>
        </goal>
        <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="reactToDisputeInner&#39;vc.57.0.0.0.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.181151" steps="190"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.0.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.0.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.0.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.165183" steps="106"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.0.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.151616" steps="59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.181017" steps="92"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.0.0.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.149924" steps="91"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="reactToDisputeInner&#39;vc.57.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.052466" steps="176610"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="reactToDisputeInner&#39;vc.57.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="reactToDisputeInner&#39;vc.57.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="reactToDisputeInner&#39;vc.57.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.181861" steps="91"/></proof>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.216554" steps="89"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.194273" steps="143"/></proof>
        </goal>
        <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="reactToDisputeInner&#39;vc.57.1.0.0.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.229106" steps="189"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.1.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.1.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.1.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.188110" steps="105"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.1.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.172517" steps="59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.1.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.183668" steps="91"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.1.0.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.170712" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="reactToDisputeInner&#39;vc.57.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.156761" steps="84"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="reactToDisputeInner&#39;vc.57.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="reactToDisputeInner&#39;vc.57.2.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="reactToDisputeInner&#39;vc.57.2.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.2.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.217479" steps="165"/></proof>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.185975" steps="89"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.235505" steps="271"/></proof>
        </goal>
        <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="reactToDisputeInner&#39;vc.57.2.0.0.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.240554" steps="313"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.2.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.2.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.2.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.225057" steps="173"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.2.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.162580" steps="59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.2.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.226041" steps="171"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.2.0.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.177299" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="reactToDisputeInner&#39;vc.57.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.165008" steps="153"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="reactToDisputeInner&#39;vc.57.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="reactToDisputeInner&#39;vc.57.3.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="reactToDisputeInner&#39;vc.57.3.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.3.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.232564" steps="320"/></proof>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.165843" steps="89"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1.1" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.269846" steps="557"/></proof>
        </goal>
        <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1.1.1" expl="postcondition" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="reactToDisputeInner&#39;vc.57.3.0.0.1.1.1.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.350791" steps="782"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.3.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="reactToDisputeInner&#39;vc.57.3.0.1.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="reactToDisputeInner&#39;vc.57.3.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.296394" steps="641"/></proof>
       </goal>
       <goal name="reactToDisputeInner&#39;vc.57.3.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.182818" steps="59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="reactToDisputeInner&#39;vc.57.3.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.262366" steps="428"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="reactToDisputeInner&#39;vc.57.3.0.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.201047" steps="310"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="reactToDisputeInner&#39;vc.57.3.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.182678" steps="281"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="reactToDispute&#39;vc" expl="VC for reactToDispute" proved="true">
 <proof prover="1"><result status="valid" time="3.288669" steps="199909"/></proof>
 </goal>
 <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc" expl="VC for concludeOpeningIfFundingTxOnChainInner" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.213581" steps="13362"/></proof>
  </goal>
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.620307" steps="2571"/></proof>
  </goal>
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="10.282494" steps="63260"/></proof>
  </goal>
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.724512" steps="9324"/></proof>
  </goal>
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.918409" steps="20963"/></proof>
  </goal>
  <goal name="concludeOpeningIfFundingTxOnChainInner&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="12.636850" steps="77845"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concludeOpeningIfFundingTxOnChain&#39;vc" expl="VC for concludeOpeningIfFundingTxOnChain" proved="true">
 <proof prover="2"><result status="valid" time="1.083648" steps="6380"/></proof>
 </goal>
 <goal name="partyProcessMsg&#39;vc" expl="VC for partyProcessMsg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyProcessMsg&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.176115" steps="94"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.183607" steps="97"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159869" steps="50"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.215393" steps="231"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.177509" steps="110"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179514" steps="91"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.231505" steps="316"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.191356" steps="99"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.199787" steps="103"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157225" steps="55"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.169431" steps="121"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.236283" steps="468"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.204798" steps="152"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.255127" steps="476"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.191573" steps="154"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.114964" steps="3736"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.247204" steps="441"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.17" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.253318" steps="473"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.195346" steps="155"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.221349" steps="422"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.214640" steps="155"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.164535" steps="67"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.22" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.252586" steps="466"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.23" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.195779" steps="152"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.24" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.186063" steps="146"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.25" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182274" steps="162"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.26" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.236078" steps="420"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.27" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.195868" steps="155"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.28" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.152216" steps="67"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.29" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.260051" steps="481"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.30" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.221555" steps="157"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.31" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.716273" steps="1947"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.32" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.236683" steps="164"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.33" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.565410" steps="1953"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.34" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.751318" steps="2150"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.35" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.250842" steps="440"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.36" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.271831" steps="471"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.37" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.205981" steps="155"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.38" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="1.034029" steps="3475"/></proof>
  </goal>
  <goal name="partyProcessMsg&#39;vc.39" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partyProcessMsg&#39;vc.39.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.159987" steps="63"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.0.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.384930" steps="715"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.388993" steps="764"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.360221" steps="686"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.3.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.365886" steps="744"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.193250" steps="69"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.167597" steps="69"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.6" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.6.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.399907" steps="712"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.7" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.7.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.371053" steps="742"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.8" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.8.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.378855" steps="738"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.172461" steps="69"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.0.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.0.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.361391" steps="684"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="partyProcessMsg&#39;vc.39.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.193311" steps="119"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.1.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.223705" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.239068" steps="162"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.222860" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.3.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.241887" steps="160"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.211170" steps="135"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.222775" steps="130"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.6" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.6.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.215601" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.7" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.7.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.238424" steps="160"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.8" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.8.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.233253" steps="161"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.218592" steps="130"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.1.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.1.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.235723" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="partyProcessMsg&#39;vc.39.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.234407" steps="358"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.2.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.2.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.337425" steps="626"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.341932" steps="657"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.328282" steps="666"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.3.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.324422" steps="638"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.251226" steps="439"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.244016" steps="424"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.6" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.6.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.332247" steps="624"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.7" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.7.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.337627" steps="636"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.8" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.8.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.330184" steps="647"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.268388" steps="423"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.2.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.2.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.343961" steps="664"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="partyProcessMsg&#39;vc.39.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.022710" steps="3683"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.3.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.3.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.363556" steps="656"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.461022" steps="1326"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.339427" steps="632"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.3.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.357518" steps="681"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.291256" steps="484"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.266897" steps="467"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.6" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.6.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.372914" steps="653"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.7" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.7.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.353981" steps="679"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.8" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.8.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.353448" steps="681"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.277633" steps="465"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.3.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.3.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.358762" steps="630"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="partyProcessMsg&#39;vc.39.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.4.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.948217" steps="3627"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.4.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.4.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.367413" steps="656"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.375986" steps="701"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.357381" steps="632"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.3.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.355922" steps="682"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.285853" steps="484"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.290531" steps="467"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.6" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.6.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.376680" steps="653"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.7" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.7.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.348486" steps="680"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.8" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.8.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.371455" steps="681"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.284233" steps="465"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.4.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.4.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.341889" steps="630"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="partyProcessMsg&#39;vc.39.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyProcessMsg&#39;vc.39.5.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.604663" steps="2702"/></proof>
    </goal>
    <goal name="partyProcessMsg&#39;vc.39.5.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="partyProcessMsg&#39;vc.39.5.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.221719" steps="136"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.223359" steps="142"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.5.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.243960" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.3" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.222954" steps="142"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.4" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.220973" steps="139"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.5" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.225930" steps="134"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.6" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.220168" steps="136"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.7" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.213258" steps="142"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.8" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.219484" steps="142"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.9" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.216698" steps="134"/></proof>
     </goal>
     <goal name="partyProcessMsg&#39;vc.39.5.1.10" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="partyProcessMsg&#39;vc.39.5.1.10.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.235789" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="initialPartyState&#39;vc" expl="VC for initialPartyState" proved="true">
 <proof prover="2"><result status="valid" time="0.454082" steps="4402"/></proof>
 </goal>
 <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168181" steps="132"/></proof>
  </goal>
  <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.164639" steps="133"/></proof>
  </goal>
  <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.2" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="coherentOurSignatures">
   <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.2.0" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.2.0.0" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
    <proof prover="2"><result status="valid" time="0.305669" steps="1067"/></proof>
    </goal>
    <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.2.0.1" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
    <proof prover="2"><result status="valid" time="1.151265" steps="9361"/></proof>
    </goal>
    <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.2.0.2" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
    <proof prover="1"><result status="valid" time="2.661870" steps="241399"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.147218" steps="54"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="HonestPartyImplementationSpec&#39;impl" proved="true">
 <goal name="initialPartyState&#39;vc" expl="VC for initialPartyState" proved="true">
 <proof prover="2"><result status="valid" time="0.091279" steps="45"/></proof>
 </goal>
 <goal name="partyProcessMsg&#39;vc" expl="VC for partyProcessMsg" proved="true">
 <proof prover="2"><result status="valid" time="0.101558" steps="65"/></proof>
 </goal>
 <goal name="partyInitialInvariant&#39;vc" expl="VC for partyInitialInvariant" proved="true">
 <proof prover="1"><result status="valid" time="21.686863" steps="2741051"/></proof>
 </goal>
 <goal name="partyInitialCorrectSide&#39;vc" expl="VC for partyInitialCorrectSide" proved="true">
 <proof prover="2"><result status="valid" time="0.112190" steps="132"/></proof>
 </goal>
 <goal name="partyInitalOnChainBalance&#39;vc" expl="VC for partyInitalOnChainBalance" proved="true">
 <proof prover="2"><result status="valid" time="0.231704" steps="126"/></proof>
 </goal>
 <goal name="partyInitialChannelClose&#39;vc" expl="VC for partyInitialChannelClose" proved="true">
 <proof prover="2"><result status="valid" time="0.126906" steps="480"/></proof>
 </goal>
 <goal name="partyInitialNotClosing&#39;vc" expl="VC for partyInitialNotClosing" proved="true">
 <proof prover="2"><result status="valid" time="0.128504" steps="484"/></proof>
 </goal>
 <goal name="partyInvariantPreservedWhenProcessMsg&#39;vc" expl="VC for partyInvariantPreservedWhenProcessMsg" proved="true">
 <proof prover="2"><result status="valid" time="0.136639" steps="458"/></proof>
 </goal>
 <goal name="partyInvariantPreservedWhenAdversarySigns&#39;vc" expl="VC for partyInvariantPreservedWhenAdversarySigns" proved="true">
 <proof prover="2"><result status="valid" time="0.199880" steps="666"/></proof>
 </goal>
 <goal name="partyInvariantSoGoodSplitsAndRevocationsRecord&#39;vc" expl="VC for partyInvariantSoGoodSplitsAndRevocationsRecord" proved="true">
 <proof prover="2"><result status="valid" time="0.110220" steps="66"/></proof>
 </goal>
 <goal name="partyProcessMsgGoodTransition&#39;vc" expl="VC for partyProcessMsgGoodTransition" proved="true">
 <proof prover="2"><result status="valid" time="0.281286" steps="774"/></proof>
 </goal>
 <goal name="upToDateAfterProcessMsg&#39;vc" expl="VC for upToDateAfterProcessMsg" proved="true">
 <proof prover="2"><result status="valid" time="0.263477" steps="501"/></proof>
 </goal>
 <goal name="partyProcessMsgSpendsWhatMsgAllows&#39;vc" expl="VC for partyProcessMsgSpendsWhatMsgAllows" proved="true">
 <proof prover="2"><result status="valid" time="0.317721" steps="861"/></proof>
 </goal>
 <goal name="partyClosingAfterClosingRequest&#39;vc" expl="VC for partyClosingAfterClosingRequest" proved="true">
 <proof prover="2"><result status="valid" time="0.340881" steps="1149"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.initialPartyState&#39;refn&#39;vc" expl="VC for initialPartyState&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.211629" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyProcessMsg&#39;refn&#39;vc" expl="VC for partyProcessMsg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.097369" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInitialInvariant&#39;refn&#39;vc" expl="VC for partyInitialInvariant&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.202441" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInitialCorrectSide&#39;refn&#39;vc" expl="VC for partyInitialCorrectSide&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.098783" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInitalOnChainBalance&#39;refn&#39;vc" expl="VC for partyInitalOnChainBalance&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.098043" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInitialChannelClose&#39;refn&#39;vc" expl="VC for partyInitialChannelClose&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.097223" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInitialNotClosing&#39;refn&#39;vc" expl="VC for partyInitialNotClosing&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.214257" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInvariantPreservedWhenProcessMsg&#39;refn&#39;vc" expl="VC for partyInvariantPreservedWhenProcessMsg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.206998" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyProcessMsgGoodTransition&#39;refn&#39;vc" expl="VC for partyProcessMsgGoodTransition&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.098077" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.upToDateAfterProcessMsg&#39;refn&#39;vc" expl="VC for upToDateAfterProcessMsg&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.097598" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyProcessMsgSpendsWhatMsgAllows&#39;refn&#39;vc" expl="VC for partyProcessMsgSpendsWhatMsgAllows&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.097827" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyClosingAfterClosingRequest&#39;refn&#39;vc" expl="VC for partyClosingAfterClosingRequest&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.203971" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInvariantPreservedWhenAdversarySigns&#39;refn&#39;vc" expl="VC for partyInvariantPreservedWhenAdversarySigns&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.213914" steps="45"/></proof>
 </goal>
 <goal name="AbstractPartySpec&#39;impl_of.partyInvariantSoGoodSplitsAndRevocationsRecord&#39;refn&#39;vc" expl="VC for partyInvariantSoGoodSplitsAndRevocationsRecord&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.095216" steps="45"/></proof>
 </goal>
</theory>
</file>
<file format="whyml" proved="true">
<path name="honestPartyVsAdversary.mlw"/>
<theory name="HonestPartyVsAdversary" proved="true">
 <goal name="systemPartyProcessMsg&#39;vc" expl="VC for systemPartyProcessMsg" proved="true">
 <proof prover="2"><result status="valid" time="0.091220" steps="73"/></proof>
 </goal>
 <goal name="applyAdversaryMove&#39;vc" expl="VC for applyAdversaryMove" proved="true">
 <proof prover="1"><result status="valid" time="1.371332" steps="184627"/></proof>
 </goal>
 <goal name="initialSystemState&#39;vc" expl="VC for initialSystemState" proved="true">
 <proof prover="2"><result status="valid" time="0.090512" steps="47"/></proof>
 </goal>
 <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc" expl="VC for applyAdversaryMovePreservesSimpleInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.070963" steps="33"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.083860" steps="244"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.277516" steps="166902"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.086910" steps="195"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.189472" steps="557"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.192188" steps="573"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.321761" steps="2639"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.242724" steps="1259"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182343" steps="136"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.120115" steps="138"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.188099" steps="141"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.149617" steps="339"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.524820" steps="183145"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.169222" steps="1070"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.077485" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141611" steps="127"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.054843" steps="331"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.054812" steps="361"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159530" steps="133"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.149525" steps="348"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148547" steps="315"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153794" steps="128"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.070522" steps="84"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.114803" steps="542"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.065013" steps="84"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.3.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.078809" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.4" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.065278" steps="100"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.5" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.075819" steps="87"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesSimpleInvariant&#39;vc.22.6" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.072501" steps="84"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="applyMoves&#39;vc" expl="VC for applyMoves" proved="true">
 <proof prover="2"><result status="valid" time="0.111993" steps="129"/></proof>
 </goal>
</theory>
<theory name="ClosingWorksProofs&#39;impl" proved="true">
 <goal name="computeActualcontractStatusNeqPublicKeyAccount&#39;vc" expl="VC for computeActualcontractStatusNeqPublicKeyAccount" proved="true">
 <proof prover="2"><result status="valid" time="0.147321" steps="484"/></proof>
 </goal>
 <goal name="computeActualcontractStatusPresentOnGammaCorrect&#39;vc" expl="VC for computeActualcontractStatusPresentOnGammaCorrect" proved="true">
 <proof prover="2"><result status="valid" time="0.152171" steps="527"/></proof>
 </goal>
 <goal name="inputPresentOnGamma&#39;vc" expl="VC for inputPresentOnGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.105410" steps="77"/></proof>
 </goal>
 <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc" expl="VC for invariantAndLateSoClosedOrAlmostClosed" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.071694" steps="65"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102641" steps="66"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096874" steps="321"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153099" steps="687"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155697" steps="63"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.206362" steps="21691"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.145209" steps="47"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.070137" steps="67"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.147302" steps="67"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.124147" steps="9156"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.044856" steps="51"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.149275" steps="67"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.089340" steps="69"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094060" steps="474"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179801" steps="1373"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168582" steps="143"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.594376" steps="179205"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148064" steps="97"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.18" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.139661" steps="58"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127993" steps="67"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066264" steps="49"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.044395" steps="69"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.128367" steps="475"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.23" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.402916" steps="215942"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144962" steps="73"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.25" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.065965" steps="53"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.259348" steps="1923"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131518" steps="73"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.28" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.327563" steps="226195"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081074" steps="170"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141703" steps="219"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.31" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.082120" steps="65"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.32" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.127538" steps="67"/></proof>
  </goal>
  <goal name="invariantAndLateSoClosedOrAlmostClosed&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.310122" steps="2318"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc" expl="VC for channelClosedOrAlmostClosedSoChannelExpectations0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.0" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeVirtualContract">
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.433419" steps="156722"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.1" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="2" memlimit="1000"><result status="valid" time="0.314090" steps="1036"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.212608" steps="432"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.497998" steps="155820"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.466547" steps="155829"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.560229" steps="208464"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeVirtualContract">
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.716797" steps="222363"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.883790" steps="168762"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.570863" steps="211289"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.518847" steps="200191"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.10" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.10.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.145803" steps="884"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.113773" steps="211"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.242781" steps="583"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.405736" steps="36231"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.143327" steps="691"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.15" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.169564" steps="119"/></proof>
  </goal>
  <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.076685" steps="43"/></proof>
   </goal>
   <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.065387" steps="49"/></proof>
    </goal>
    <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="channelClosedOrAlmostClosedSoChannelExpectations0&#39;vc.16.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.173220" steps="1076"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="channelClosedOrAlmostClosedSoImmediateGeqExpected&#39;vc" expl="VC for channelClosedOrAlmostClosedSoImmediateGeqExpected" proved="true">
 <proof prover="2"><result status="valid" time="0.142847" steps="308"/></proof>
 </goal>
 <goal name="initialStateInvariant&#39;vc" expl="VC for initialStateInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.403230" steps="3265"/></proof>
 </goal>
 <goal name="progressTrackerMainCaseTimeMonotone&#39;vc" expl="VC for progressTrackerMainCaseTimeMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074973" steps="92"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.082224" steps="92"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114808" steps="526"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.3" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.233129" steps="689"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.4" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.174536" steps="59"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseTimeMonotone&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.115332" steps="367"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="progressTrackerSysTimeMonotone&#39;vc" expl="VC for progressTrackerSysTimeMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.149373" steps="288"/></proof>
 </goal>
 <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc" expl="VC for isCorrectChannelOpeningOnQueueSignaturesMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.172897" steps="80"/></proof>
  </goal>
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.207333" steps="1117"/></proof>
  </goal>
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123551" steps="46"/></proof>
  </goal>
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148446" steps="46"/></proof>
  </goal>
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.075418" steps="104"/></proof>
  </goal>
  <goal name="isCorrectChannelOpeningOnQueueSignaturesMonotone&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.125296" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc" expl="VC for isCorrectDisputeOpeningOnQueueSignaturesMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.150446" steps="80"/></proof>
  </goal>
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.312340" steps="2402"/></proof>
  </goal>
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.065752" steps="46"/></proof>
  </goal>
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125282" steps="46"/></proof>
  </goal>
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180070" steps="104"/></proof>
  </goal>
  <goal name="isCorrectDisputeOpeningOnQueueSignaturesMonotone&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.126541" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc" expl="VC for isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.055691" steps="80"/></proof>
  </goal>
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194094" steps="1080"/></proof>
  </goal>
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.159877" steps="46"/></proof>
  </goal>
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.172119" steps="46"/></proof>
  </goal>
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124165" steps="104"/></proof>
  </goal>
  <goal name="isCorrectClaimAfterTimeoutOnQueueSignaturesMonotone&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.147540" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc" expl="VC for progressTrackerMainCaseSignaturesMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155093" steps="168"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127541" steps="55"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088919" steps="42"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.146695" steps="42"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="1.148165" steps="148412"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.149444" steps="113"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.6.0" expl="VC for progressTrackerMainCaseSignaturesMonotone" proved="true">
   <proof prover="1"><result status="valid" time="1.794946" steps="157724"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.7" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.7.0" expl="VC for progressTrackerMainCaseSignaturesMonotone" proved="true">
   <proof prover="1"><result status="valid" time="1.764426" steps="157689"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.8" expl="unreachable point" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.8.0" expl="unreachable point" proved="true">
   <proof prover="1"><result status="valid" time="1.468606" steps="150786"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSignaturesMonotone&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.106575" steps="369"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="progessTrackerSysMonotone&#39;vc" expl="VC for progessTrackerSysMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.268778" steps="1760"/></proof>
 </goal>
 <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc" expl="VC for whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126920" steps="41"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114802" steps="429"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.2" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.081825" steps="66"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130467" steps="51"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.289804" steps="1957"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150356" steps="278"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178392" steps="41"/></proof>
  </goal>
  <goal name="whenCommitedToNotYetOpenedOpenerOnQueueSignaturesMonotone&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.129188" steps="165"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.206432" steps="154"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.181410" steps="87"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.110886" steps="90"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.3" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.194977" steps="200"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178842" steps="49"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.233559" steps="330"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.178026" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.116059" steps="369"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121451" steps="94"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.666984" steps="4222"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143286" steps="55"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.200320" steps="102"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.12" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.363508" steps="14778"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123199" steps="404"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.205760" steps="109"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.112423" steps="64"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.118627" steps="295"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.17" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.115122" steps="272"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.681211" steps="4462"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.840787" steps="13026"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.452992" steps="2765"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.21.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="2.152856" steps="15188"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.176867" steps="741"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174539" steps="67"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173595" steps="314"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.25" expl="witness existence" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.25.0" expl="witness existence" proved="true">
   <proof prover="2"><result status="valid" time="0.130796" steps="292"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.26" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.090589" steps="7300"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.470253" steps="3535"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.28" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.28.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.229890" steps="1065"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.629154" steps="11021"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.30" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.30.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="1.408340" steps="9367"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.385540" steps="2198"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.383321" steps="2114"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.33" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.33.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.33.0.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.33.0.0.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
     <proof prover="2"><result status="valid" time="0.232256" steps="1368"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220022" steps="861"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097908" steps="160"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148270" steps="491"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.37" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeActualcontractStatus" arg2="in" arg3="H3">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.37.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.248849" steps="184457"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.38" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaim" arg2="in" arg3="Assert1">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.38.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.140124" steps="180566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.39" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.39.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="10.300938" steps="59160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.40" expl="witness existence" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.40.0" expl="witness existence" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.40.0.0" expl="witness existence" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.40.0.0.0" expl="witness existence" proved="true">
     <proof prover="2"><result status="valid" time="0.263844" steps="245"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.41" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.467287" steps="27591"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.42" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.091066" steps="88"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.43" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.142951" steps="392"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.44" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.188941" steps="90"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137313" steps="376"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.885607" steps="13311"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.47" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.47.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="0.588878" steps="3865"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.912790" steps="6142"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.064219" steps="13283"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185655" steps="810"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.137149" steps="390"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.52" expl="witness existence" proved="true">
  <transf name="unfold" proved="true" arg1="computeActualcontractStatus" arg2="in" arg3="H3">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.52.0" expl="witness existence" proved="true">
   <proof prover="1"><result status="valid" time="2.196705" steps="181976"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.53" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.53.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.582130" steps="3350"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.54" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.54.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.54.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.178128" steps="70"/></proof>
    </goal>
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.54.0.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.727519" steps="4813"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144772" steps="417"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.56" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.146957" steps="15099"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.57" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.57.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="2.125661" steps="15214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.58" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.58.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="1"><result status="valid" time="2.137193" steps="176669"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.59" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.182175" steps="774"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.60" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.60.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.187404" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.61" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122693" steps="190"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.62" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.166233" steps="572"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.63" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeActualcontractStatus" arg2="in" arg3="H8">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.63.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.329756" steps="185260"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.64" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="whenDisputeOpenAfterTimeoutAndCorrectSideSendClaim" arg2="in" arg3="Assert1">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.64.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="4.629963" steps="286619"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.65" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.179911" steps="155"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.66" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.66.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="5.677005" steps="36995"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.67" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.734403" steps="4638"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.68" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.68.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.68.0.0" expl="assertion" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.68.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.243236" steps="790"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.69" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.69.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.174886" steps="70"/></proof>
   </goal>
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.69.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.69.1.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.175667" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.70" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150760" steps="469"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.71" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.71.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.71.0.0" expl="assertion" proved="true">
    <proof prover="2" steplimit="80000"><result status="valid" time="0.040684" steps="70"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.71.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.71.1.0" expl="assertion" proved="true">
    <proof prover="2" steplimit="80000"><result status="valid" time="0.945297" steps="15173"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.72" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.72.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="0.592067" steps="4046"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.73" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.211678" steps="114"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.74" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.74.0" expl="VC for sendMsgToPartyWhenClosingAndTracing" proved="true">
   <proof prover="2"><result status="valid" time="1.709852" steps="11529"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.057550" steps="80"/></proof>
   </goal>
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.063192" steps="75"/></proof>
    </goal>
    <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.059295" steps="82"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sendMsgToPartyWhenClosingAndTracing&#39;vc.75.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.060243" steps="65"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="closingOrderSoCloseNow&#39;vc" expl="VC for closingOrderSoCloseNow" proved="true">
 <proof prover="2"><result status="valid" time="0.233342" steps="251"/></proof>
 </goal>
 <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc" expl="VC for sendMsgToPartyPreservesWhenClosingInvariantThanClosing" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.105493" steps="53"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.208595" steps="95"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.068978" steps="41"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.196338" steps="62"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.185620" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.129177" steps="136"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156593" steps="560"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.106339" steps="227"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.219079" steps="103"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097799" steps="87"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.162938" steps="231"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.11" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="1.670936" steps="161762"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.12" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="2.951604" steps="213659"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.091207" steps="83"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.403166" steps="162998"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143693" steps="56"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167518" steps="84"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.065957" steps="170962"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.18" expl="unreachable point" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.18.0" expl="unreachable point" proved="true">
   <proof prover="2"><result status="valid" time="0.145862" steps="51"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.18.1" expl="unreachable point" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.18.1.0" expl="unreachable point" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.18.1.0.0" expl="unreachable point" proved="true">
     <proof prover="2"><result status="valid" time="0.162819" steps="132"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.182618" steps="53"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.19.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.084534" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135327" steps="103"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.21" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.704931" steps="163016"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.22" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.714299" steps="163015"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.23" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.149330" steps="92"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.24" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.207383" steps="94"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.25" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.105300" steps="82"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.26" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.142052" steps="89"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.063642" steps="57"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.064529" steps="57"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.061645" steps="56"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.068206" steps="56"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.4" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.069052" steps="57"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.5" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.060047" steps="57"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.6" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.062605" steps="57"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesWhenClosingInvariantThanClosing&#39;vc.27.7" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.060258" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sendMsgToPartyWhenClosingRequest&#39;vc" expl="VC for sendMsgToPartyWhenClosingRequest" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.075569" steps="149"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.069961" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.2" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.2.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.076938" steps="89"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.3.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.092298" steps="191"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.121681" steps="176442"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.091896" steps="101"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.690634" steps="4597"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.7" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.111729" steps="104"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.227879" steps="996"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.9" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.074598" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.10" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.071271" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.088567" steps="112"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.751053" steps="6018"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.13" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeActualcontractStatus" arg2="in" arg3="H">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.376918" steps="2803"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.186873" steps="520"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.146795" steps="518"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.327893" steps="190378"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.920541" steps="14325"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.745422" steps="4992"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.308927" steps="189630"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.172661" steps="92"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInNormal">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.21.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.168324" steps="183489"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.22" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.358403" steps="301187"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.23" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.186462" steps="99"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.925982" steps="231575"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.432310" steps="3167"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.26" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.26.0" expl="VC for sendMsgToPartyWhenClosingRequest" proved="true">
   <proof prover="2"><result status="valid" time="0.342573" steps="2525"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.293480" steps="1516"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.243630" steps="335"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174917" steps="706"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.30" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="12.699275" steps="720253"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.113224" steps="59"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.32" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.32.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.147621" steps="66"/></proof>
   </goal>
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.32.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.141076" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130756" steps="69"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.223355" steps="432"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.268587" steps="463"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.198788" steps="135"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143349" steps="512"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.38" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.153708" steps="81"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.39" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.39.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.39.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.148008" steps="64"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.40" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.251604" steps="183911"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.41" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.779469" steps="270460"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.42" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.195994" steps="108"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.43" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.255534" steps="247459"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.44" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.465201" steps="197507"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.176880" steps="71"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.46" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="9.530718" steps="54563"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.47" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.47.0" expl="VC for sendMsgToPartyWhenClosingRequest" proved="true">
   <proof prover="2"><result status="valid" time="4.197799" steps="29862"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.48" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.255020" steps="182900"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.255218" steps="393"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.143650" steps="428"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.524910" steps="3366"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.602609" steps="11005"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.53" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.159809" steps="76"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.54" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="computeActualcontractStatus" arg2="in" arg3="H">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.54.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.507080" steps="3284"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.105859" steps="14047"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.56" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179050" steps="89"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.57" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInNormal">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.57.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.179060" steps="89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.58" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167420" steps="92"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.59" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155449" steps="488"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.60" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.213260" steps="151"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.61" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.162560" steps="542"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.62" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.177905" steps="95"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.63" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160033" steps="81"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.64" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.381004" steps="184870"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.65" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.204157" steps="127"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.66" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.036914" steps="6427"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.67" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.201180" steps="133"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.68" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.522180" steps="254312"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.69" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.618282" steps="198442"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.70" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173696" steps="95"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.71" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.71.0" expl="VC for sendMsgToPartyWhenClosingRequest" proved="true">
   <proof prover="2"><result status="valid" time="1.114105" steps="8383"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.72" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.72.0" expl="VC for sendMsgToPartyWhenClosingRequest" proved="true">
   <proof prover="2"><result status="valid" time="4.936380" steps="32516"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.73" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.195111" steps="98"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.74" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.010478" steps="39259"/></proof>
  </goal>
  <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.304645" steps="1448"/></proof>
   </goal>
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.133001" steps="569"/></proof>
    </goal>
    <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.139814" steps="633"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sendMsgToPartyWhenClosingRequest&#39;vc.75.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.169847" steps="52"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc" expl="VC for sendMsgToPartyPreservesProgressTracker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.192923" steps="105"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.181995" steps="67"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.204892" steps="69"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.191903" steps="144"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.465442" steps="2456"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159231" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.166507" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.167399" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.162597" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148134" steps="361"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171080" steps="52"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.11" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="2.954008" steps="223737"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.163814" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.180821" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.132516" steps="327"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.171147" steps="51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182023" steps="723"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170729" steps="51"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.525944" steps="2934"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.201991" steps="859"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.239554" steps="1747"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.072505" steps="50"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreservesProgressTracker&#39;vc.20.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.065172" steps="48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc" expl="VC for sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.175549" steps="105"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.173612" steps="67"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.192372" steps="69"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.200062" steps="157"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.084702" steps="166566"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.405606" steps="2132"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.228181" steps="177386"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.471942" steps="2448"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.8" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.210335" steps="89"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.292864" steps="9627"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.244652" steps="275"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.160655" steps="543"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.190766" steps="99"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.300643" steps="663"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.256178" steps="450"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.277559" steps="175950"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="7.622767" steps="404146"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.312624" steps="1713"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.18" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.104980" steps="87"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.089506" steps="224151"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.154633" steps="523"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.267910" steps="435"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isOurChannelInNormal">
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.247185" steps="366"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.23" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.260513" steps="1326"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.24.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.121453" steps="430"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.24.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.108758" steps="408"/></proof>
   </goal>
   <goal name="sendMsgToPartyPreserveswhenCommitedToNotYetOpenedOpenerOnQueue&#39;vc.24.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.069041" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="skipNonImportantPreservesProgressTracker&#39;vc" expl="VC for skipNonImportantPreservesProgressTracker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.165081" steps="65"/></proof>
   </goal>
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.169749" steps="69"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.115663" steps="69"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.395697" steps="1957"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.3.0" expl="VC for skipNonImportantPreservesProgressTracker" proved="true">
   <proof prover="2"><result status="valid" time="0.160922" steps="1230"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.232769" steps="973"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.5" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.5.0" expl="VC for skipNonImportantPreservesProgressTracker" proved="true">
   <proof prover="2"><result status="valid" time="0.176675" steps="77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.408583" steps="2364"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170109" steps="80"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.938072" steps="8256"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.104079" steps="220627"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.147906" steps="453"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.280211" steps="462"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.12" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.510533" steps="2805"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.443594" steps="11347"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.14" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant" arg2="in" arg3="Assert">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.699595" steps="209548"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173250" steps="55"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.827429" steps="405376"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.152416" steps="498"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.325648" steps="11375"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.739981" steps="209990"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.20" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.228493" steps="227"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.175289" steps="76"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant" arg2="in" arg3="Assert">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.156410" steps="698"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.191914" steps="78"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.24" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.24.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.259135" steps="1412"/></proof>
   </goal>
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.24.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.171429" steps="58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.104587" steps="80"/></proof>
   </goal>
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.25.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.111384" steps="80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.26" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant" arg2="in" arg3="Assert">
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.017096" steps="14960"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.27" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.733539" steps="210746"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.212871" steps="156"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.970830" steps="219245"/></proof>
  </goal>
  <goal name="skipNonImportantPreservesProgressTracker&#39;vc.30" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.30.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.057542" steps="58"/></proof>
   </goal>
   <goal name="skipNonImportantPreservesProgressTracker&#39;vc.30.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.987994" steps="7830"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inputSpentSoNotImportant&#39;vc" expl="VC for inputSpentSoNotImportant" proved="true">
 <proof prover="1"><result status="valid" time="3.829846" steps="241460"/></proof>
 </goal>
 <goal name="inputNotOnGammaSoNoImportant&#39;vc" expl="VC for inputNotOnGammaSoNoImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160811" steps="38"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157855" steps="38"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.140386" steps="57"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.315174" steps="1487"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.200502" steps="147"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.401118" steps="1843"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.097281" steps="72"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.547604" steps="3826"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.8" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.079725" steps="48"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.9" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.255192" steps="1448"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.10" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.340101" steps="177525"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.105396" steps="72"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.102681" steps="145"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.076297" steps="48"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.802761" steps="5606"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.377733" steps="7567"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.180476" steps="72"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.175740" steps="144"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.18" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.083145" steps="48"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.19" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.712999" steps="5046"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.20" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.087774" steps="65"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.21" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.107780" steps="115"/></proof>
  </goal>
  <goal name="inputNotOnGammaSoNoImportant&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.124763" steps="339"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="verificationCheckFailSoNotImportant&#39;vc" expl="VC for verificationCheckFailSoNotImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="verificationCheckFailSoNotImportant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.085409" steps="58"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.710705" steps="6262"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="verificationCheckFailSoNotImportant&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="verificationCheckFailSoNotImportant&#39;vc.2.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="verificationCheckFailSoNotImportant&#39;vc.2.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.334543" steps="2260"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.383396" steps="174672"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.880493" steps="13110"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="verificationCheckFailSoNotImportant&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="verificationCheckFailSoNotImportant&#39;vc.5.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="4.062527" steps="266540"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.764677" steps="12013"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.174737" steps="65"/></proof>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="verificationCheckFailSoNotImportant&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="verificationCheckFailSoNotImportant&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.207696" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="verificationCheckFailSoNotImportant&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="verificationCheckFailSoNotImportant&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.063743" steps="41"/></proof>
   </goal>
   <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.068886" steps="48"/></proof>
    </goal>
    <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.064981" steps="43"/></proof>
    </goal>
    <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.2.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.079905" steps="49"/></proof>
     </goal>
     <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.2.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.083939" steps="45"/></proof>
     </goal>
     <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.2.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.074487" steps="49"/></proof>
     </goal>
     <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.2.3" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.079426" steps="45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="verificationCheckFailSoNotImportant&#39;vc.9.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.073733" steps="43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="msgNotApplicableSoNotImportant&#39;vc" expl="VC for msgNotApplicableSoNotImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgNotApplicableSoNotImportant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.183161" steps="58"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.125507" steps="132"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgNotApplicableSoNotImportant&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgNotApplicableSoNotImportant&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.009649" steps="6303"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgNotApplicableSoNotImportant&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.303368" steps="1870"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.400896" steps="174898"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.237756" steps="8595"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.451506" steps="2982"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.694190" steps="10948"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.8" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.106901" steps="65"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220140" steps="132"/></proof>
  </goal>
  <goal name="msgNotApplicableSoNotImportant&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgNotApplicableSoNotImportant&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgNotApplicableSoNotImportant&#39;vc.10.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.109258" steps="41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.050369" steps="49"/></proof>
    </goal>
    <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.064794" steps="43"/></proof>
    </goal>
    <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.2.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.064173" steps="49"/></proof>
     </goal>
     <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.2.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.065249" steps="45"/></proof>
     </goal>
     <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.2.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.069646" steps="49"/></proof>
     </goal>
     <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.2.3" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.064760" steps="45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="msgNotApplicableSoNotImportant&#39;vc.10.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.086892" steps="43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="timeCheckFailsSoNotImportant&#39;vc" expl="VC for timeCheckFailsSoNotImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="timeCheckFailsSoNotImportant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.174329" steps="65"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant">
   <goal name="timeCheckFailsSoNotImportant&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.206919" steps="566"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeCheckFailsSoNotImportant&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.133028" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.3" expl="unreachable point" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeCheckFailsSoNotImportant&#39;vc.3.0" expl="unreachable point" proved="true">
   <proof prover="2"><result status="valid" time="0.126572" steps="179"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant">
   <goal name="timeCheckFailsSoNotImportant&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.532291" steps="3454"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeCheckFailsSoNotImportant&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.258512" steps="491"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.225558" steps="186"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.700671" steps="199926"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.391129" steps="2160"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.9" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.249872" steps="1334"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.193505" steps="71"/></proof>
  </goal>
  <goal name="timeCheckFailsSoNotImportant&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeCheckFailsSoNotImportant&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.062570" steps="45"/></proof>
   </goal>
   <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.067849" steps="48"/></proof>
    </goal>
    <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.072521" steps="48"/></proof>
    </goal>
    <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1.2.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.059900" steps="49"/></proof>
     </goal>
     <goal name="timeCheckFailsSoNotImportant&#39;vc.11.1.2.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.075493" steps="53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc" expl="VC for gammaProcessMsgNoneSoNonImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.157728" steps="41"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.157188" steps="42"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158787" steps="43"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.535709" steps="192985"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.193382" steps="68"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.5.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.183132" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.475376" steps="2939"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.210021" steps="69"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.747332" steps="208823"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.739398" steps="209051"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.229958" steps="163"/></proof>
  </goal>
  <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.064880" steps="44"/></proof>
   </goal>
   <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.11.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.11.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.070968" steps="46"/></proof>
    </goal>
    <goal name="gammaProcessMsgNoneSoNonImportant&#39;vc.11.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.142377" steps="544"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="msgNotFreshSoAdversaryError&#39;vc" expl="VC for msgNotFreshSoAdversaryError" proved="true">
 <proof prover="2"><result status="valid" time="0.180161" steps="55"/></proof>
 </goal>
 <goal name="correctGammaSoMsgFresh&#39;vc" expl="VC for correctGammaSoMsgFresh" proved="true">
 <proof prover="2"><result status="valid" time="0.201722" steps="56"/></proof>
 </goal>
 <goal name="msgImportantIdIndependent&#39;vc" expl="VC for msgImportantIdIndependent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgImportantIdIndependent&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.199572" steps="66"/></proof>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgImportantIdIndependent&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgImportantIdIndependent&#39;vc.1.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.294956" steps="9745"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="msgImportantIdIndependent&#39;vc.1.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.229368" steps="8973"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.650737" steps="4191"/></proof>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant">
   <goal name="msgImportantIdIndependent&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="correctDisputeOpen">
    <goal name="msgImportantIdIndependent&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="3.363699" steps="229497"/></proof>
    <proof prover="2"><result status="valid" time="1.290483" steps="10066"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant">
   <goal name="msgImportantIdIndependent&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="correctClaimAfterTimeout">
    <goal name="msgImportantIdIndependent&#39;vc.4.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="1.282969" steps="9539"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.5" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="isMsgImportant">
   <goal name="msgImportantIdIndependent&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="correctClaimAfterTimeout">
    <goal name="msgImportantIdIndependent&#39;vc.5.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="3.186822" steps="218499"/></proof>
    <proof prover="2"><result status="valid" time="1.015538" steps="7765"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.445509" steps="30020"/></proof>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgImportantIdIndependent&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.207131" steps="75"/></proof>
   </goal>
   <goal name="msgImportantIdIndependent&#39;vc.7.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgImportantIdIndependent&#39;vc.7.1.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.201533" steps="75"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.250568" steps="294"/></proof>
  </goal>
  <goal name="msgImportantIdIndependent&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgImportantIdIndependent&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgImportantIdIndependent&#39;vc.9.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.074250" steps="41"/></proof>
    </goal>
    <goal name="msgImportantIdIndependent&#39;vc.9.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="msgImportantIdIndependent&#39;vc.9.0.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.085243" steps="48"/></proof>
     </goal>
     <goal name="msgImportantIdIndependent&#39;vc.9.0.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.083536" steps="43"/></proof>
     </goal>
     <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.089267" steps="47"/></proof>
      </goal>
      <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.086390" steps="46"/></proof>
      </goal>
      <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.094244" steps="47"/></proof>
      </goal>
      <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2.3" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.090520" steps="46"/></proof>
      </goal>
      <goal name="msgImportantIdIndependent&#39;vc.9.0.1.2.4" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.094111" steps="47"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="msgImportantIdIndependent&#39;vc.9.0.1.3" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.088536" steps="43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="msgImportantIdIndependent&#39;vc.9.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="4.433975" steps="33031"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="computeActualcontractStatusCorrect&#39;vc" expl="VC for computeActualcontractStatusCorrect" proved="true">
 <proof prover="2"><result status="valid" time="0.258491" steps="521"/></proof>
 </goal>
 <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc" expl="VC for msgFundingIrrelevantSoNotMsgImportant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.189196" steps="62"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.214597" steps="79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.214259" steps="166"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.531227" steps="3332"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.177706" steps="53"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.415783" steps="2347"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.201218" steps="67"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.236057" steps="180"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.242082" steps="229"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.538209" steps="184776"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.173391" steps="55"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.234748" steps="210650"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.225683" steps="187"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.868499" steps="206055"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.185245" steps="61"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.473001" steps="182269"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.197882" steps="74"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.217729" steps="166"/></proof>
  </goal>
  <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.079185" steps="44"/></proof>
   </goal>
   <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.076402" steps="54"/></proof>
    </goal>
    <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.071639" steps="48"/></proof>
    </goal>
    <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.085315" steps="56"/></proof>
      </goal>
      <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.0.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.082258" steps="52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.060167" steps="60"/></proof>
      </goal>
      <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.074128" steps="55"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.2.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.129546" steps="53"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="msgFundingIrrelevantSoNotMsgImportant&#39;vc.18.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.076285" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="idDifferentSoExpectedDifferent&#39;vc" expl="VC for idDifferentSoExpectedDifferent" proved="true">
 <proof prover="2"><result status="valid" time="0.180281" steps="890"/></proof>
 </goal>
 <goal name="expectedChanelInputPreservesIdT&#39;vc" expl="VC for expectedChanelInputPreservesIdT" proved="true">
 <proof prover="2"><result status="valid" time="0.195351" steps="1011"/></proof>
 </goal>
 <goal name="msgFreshSoNewIds&#39;vc" expl="VC for msgFreshSoNewIds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgFreshSoNewIds&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.305683" steps="173406"/></proof>
  </goal>
  <goal name="msgFreshSoNewIds&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.579878" steps="4801"/></proof>
  </goal>
  <goal name="msgFreshSoNewIds&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.567754" steps="4809"/></proof>
  </goal>
  <goal name="msgFreshSoNewIds&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.543741" steps="175778"/></proof>
  </goal>
  <goal name="msgFreshSoNewIds&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoNewIds&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.204789" steps="65"/></proof>
   </goal>
   <goal name="msgFreshSoNewIds&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.187956" steps="65"/></proof>
   </goal>
   <goal name="msgFreshSoNewIds&#39;vc.4.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.204319" steps="67"/></proof>
   </goal>
   <goal name="msgFreshSoNewIds&#39;vc.4.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.194207" steps="67"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="extractChannelIdExtractChannelIds&#39;vc" expl="VC for extractChannelIdExtractChannelIds" proved="true">
 <proof prover="2"><result status="valid" time="0.250434" steps="272"/></proof>
 </goal>
 <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc" expl="VC for gammaProcessMsgUnrelatedPreservesProgressTrackerMain" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.237359" steps="195"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.1" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.1.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="usedIds">
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.1.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.136180" steps="57"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.157151" steps="57"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.3" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.142564" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.159850" steps="57"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.5" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.5.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="usedIds">
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.5.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.140983" steps="57"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.6" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.157966" steps="58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.208054" steps="845"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.163300" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.9" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.9.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="usedIds">
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.9.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="5.791242" steps="365068"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.251634" steps="312"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.196939" steps="92"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.402176" steps="1176"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.138356" steps="208"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.281126" steps="913"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.208788" steps="243"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123507" steps="243"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.17" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.17.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.663916" steps="3495"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.645432" steps="3955"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.507985" steps="2484"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.292675" steps="1669"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.21" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.21.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.352464" steps="1169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.257133" steps="509"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.314853" steps="1122"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.24.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.402366" steps="240596"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.204354" steps="118"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.26" expl="witness existence" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.26.0" expl="witness existence" proved="true">
   <proof prover="2"><result status="valid" time="0.462456" steps="2111"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.839690" steps="16855"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.283661" steps="608"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.29" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="usedIds">
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.510360" steps="2274"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.30" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.051932" steps="183197"/></proof>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.31" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.31.0" expl="VC for gammaProcessMsgUnrelatedPreservesProgressTrackerMain" proved="true">
   <proof prover="1"><result status="valid" time="2.472836" steps="194449"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.32" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.32.0" expl="VC for gammaProcessMsgUnrelatedPreservesProgressTrackerMain" proved="true">
   <proof prover="1"><result status="valid" time="2.450983" steps="194462"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.33" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.33.0" expl="VC for gammaProcessMsgUnrelatedPreservesProgressTrackerMain" proved="true">
   <proof prover="2"><result status="valid" time="0.120466" steps="126"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.091157" steps="83"/></proof>
   </goal>
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.078607" steps="72"/></proof>
   </goal>
   <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.067878" steps="75"/></proof>
    </goal>
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.2.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.074868" steps="75"/></proof>
    </goal>
    <goal name="gammaProcessMsgUnrelatedPreservesProgressTrackerMain&#39;vc.34.2.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.060078" steps="75"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc" expl="VC for progressTrackerMainCaseSoArgsInputUsed" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.201766" steps="65"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.1" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.230931" steps="127"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.258601" steps="287"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.925507" steps="6544"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.157705" steps="469"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.251446" steps="329"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.6.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.146321" steps="432"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.221231" steps="68"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.596315" steps="198740"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.950655" steps="198195"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.215419" steps="71"/></proof>
  </goal>
  <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.11.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.062900" steps="64"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.076079" steps="52"/></proof>
   </goal>
   <goal name="progressTrackerMainCaseSoArgsInputUsed&#39;vc.11.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.697859" steps="192945"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="badArgsSoClosed&#39;vc" expl="VC for badArgsSoClosed" proved="true">
 <proof prover="1"><result status="valid" time="3.724261" steps="238743"/></proof>
 </goal>
 <goal name="extractMsgFundingIdIndependent&#39;vc" expl="VC for extractMsgFundingIdIndependent" proved="true">
 <proof prover="2"><result status="valid" time="0.222312" steps="1067"/></proof>
 </goal>
 <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc" expl="VC for normalIdTSameButIdDifferentSoClosed" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.079128" steps="87"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.079389" steps="79"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.077757" steps="91"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.419766" steps="180857"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.131043" steps="431"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.104478" steps="73"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114775" steps="401"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.506268" steps="228605"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135010" steps="441"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.9" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.090240" steps="78"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.096631" steps="182"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.336445" steps="377781"/></proof>
  </goal>
  <goal name="normalIdTSameButIdDifferentSoClosed&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.203173" steps="483"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="timeLimitCorrect&#39;vc" expl="VC for timeLimitCorrect" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="timeLimitCorrect&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.211416" steps="68"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.213391" steps="69"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.212134" steps="77"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.222861" steps="83"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108041" steps="85"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.5" expl="unreachable point" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeLimitCorrect&#39;vc.5.0" expl="unreachable point" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="timeLimitCorrect&#39;vc.5.0.0" expl="unreachable point" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="timeLimitCorrect&#39;vc.5.0.0.0" expl="unreachable point" proved="true">
     <proof prover="2"><result status="valid" time="0.205642" steps="82"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.289115" steps="1698"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.117709" steps="195"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeLimitCorrect&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="timeLimitCorrect&#39;vc.8.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="timeLimitCorrect&#39;vc.8.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.241421" steps="215"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.254879" steps="1392"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.189923" steps="53"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.129169" steps="238"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.12" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase" arg2="in" arg3="Assert1">
   <goal name="timeLimitCorrect&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="3.664914" steps="27841"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.267701" steps="411"/></proof>
  </goal>
  <goal name="timeLimitCorrect&#39;vc.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="timeLimitCorrect&#39;vc.14.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="timeLimitCorrect&#39;vc.14.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="timeLimitCorrect&#39;vc.14.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.066050" steps="53"/></proof>
     </goal>
     <goal name="timeLimitCorrect&#39;vc.14.0.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="timeLimitCorrect&#39;vc.14.0.0.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.070346" steps="56"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="msgFreshSoExtractAccountId&#39;vc" expl="VC for msgFreshSoExtractAccountId" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="msgFreshSoExtractAccountId&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.512480" steps="349474"/></proof>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.386158" steps="3348"/></proof>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.416711" steps="3420"/></proof>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.484054" steps="3618"/></proof>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoExtractAccountId&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="9.122484" steps="551377"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoExtractAccountId&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="8.322275" steps="496074"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="msgFreshSoExtractAccountId&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="msgFreshSoExtractAccountId&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.208014" steps="71"/></proof>
   </goal>
   <goal name="msgFreshSoExtractAccountId&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.191473" steps="71"/></proof>
   </goal>
   <goal name="msgFreshSoExtractAccountId&#39;vc.6.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.117475" steps="72"/></proof>
   </goal>
   <goal name="msgFreshSoExtractAccountId&#39;vc.6.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.132853" steps="249"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc" expl="VC for progressTrackerMainCasePreservedWhenProcessingMatchingIds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.184491" steps="96"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.305442" steps="1746"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123946" steps="296"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.3" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.134977" steps="298"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.945513" steps="212719"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.087282" steps="95"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.205730" steps="638"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.145072" steps="363"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.295118" steps="1473"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.386715" steps="1645"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.112290" steps="140"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126217" steps="365"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.231808" steps="1462"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.079459" steps="103"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.14" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.081701" steps="149"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.094007" steps="161"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.16" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.448778" steps="241666"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163720" steps="580"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.18" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="idFreshForGamma">
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="3.648237" steps="260166"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155477" steps="120"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156952" steps="122"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.349815" steps="2301"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144818" steps="126"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.198084" steps="184"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.123036" steps="187"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.836295" steps="257396"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.26" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.056776" steps="273275"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.232565" steps="198"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.191561" steps="681"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.315378" steps="773"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.124835" steps="6840"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.560629" steps="27148"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178642" steps="106"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.144875" steps="102"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.34" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.280938" steps="362929"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.35" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.384335" steps="2100"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.36" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153265" steps="467"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.37" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.849969" steps="27884"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.38" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.087135" steps="29255"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.237593" steps="299"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.40" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.250936" steps="300"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.41" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.366598" steps="1097"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.42" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.924718" steps="206522"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.43" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.735722" steps="4289"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.44" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.280231" steps="1338"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.207592" steps="151"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.46" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.973066" steps="346261"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.647488" steps="4059"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.48" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.155308" steps="458"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.49" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.339369" steps="1789"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.50" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.202833" steps="502"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.51" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124625" steps="191"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.52" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.105757" steps="142"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.090739" steps="60"/></proof>
   </goal>
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53.1.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="idFreshForGamma">
     <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53.1.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.093283" steps="68"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.53.1.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.149897" steps="492"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.54" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.54.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.54.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.088815" steps="60"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.54.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.359213" steps="2406"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.55" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099576" steps="206"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.56" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101800" steps="208"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.57" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170370" steps="724"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.58" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="12.320406" steps="73863"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.59" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135817" steps="290"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.60" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.119392" steps="291"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.61" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.61.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.082564" steps="60"/></proof>
   </goal>
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.61.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.61.1.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.074739" steps="68"/></proof>
    </goal>
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.61.1.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.201281" steps="1081"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.62" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.890942" steps="212379"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.63" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="6.968783" steps="413250"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.64" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.506053" steps="3253"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.65" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.908460" steps="215914"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.66" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.601351" steps="299175"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.67" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.383641" steps="8043"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.68" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156904" steps="403"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.69" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="8.485047" steps="464437"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.70" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.538405" steps="3618"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.71" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.217723" steps="292"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.72" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.139182" steps="294"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.73" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.238298" steps="1098"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.74" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.961201" steps="212108"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.75" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="7.035506" steps="413876"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.76" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.515993" steps="3258"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.77" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.000637" steps="13304"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.78" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.607123" steps="298629"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.79" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.425695" steps="8221"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.80" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.291512" steps="405"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.81" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="8.520872" steps="467662"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.82" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.587546" steps="3622"/></proof>
  </goal>
  <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.079932" steps="63"/></proof>
   </goal>
   <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.082671" steps="109"/></proof>
    </goal>
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.082882" steps="120"/></proof>
    </goal>
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.079913" steps="109"/></proof>
    </goal>
    <goal name="progressTrackerMainCasePreservedWhenProcessingMatchingIds&#39;vc.83.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.085109" steps="111"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc" expl="VC for deliverMsgoToGammaPreservesProgressTracker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.087066" steps="181"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.091869" steps="242"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.063899" steps="57"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.3.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.172271" steps="1003"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.4.0" expl="VC for deliverMsgoToGammaPreservesProgressTracker" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.4.0.0" expl="VC for deliverMsgoToGammaPreservesProgressTracker" proved="true">
    <proof prover="2"><result status="valid" time="1.312569" steps="8503"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.130197" steps="304"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.110693" steps="212"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.344816" steps="2172"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.067758" steps="8604"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.149295" steps="260"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.094418" steps="89"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.095803" steps="89"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.232835" steps="1084"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081882" steps="91"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.14" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerSys">
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.14.0" expl="VC for deliverMsgoToGammaPreservesProgressTracker" proved="true">
   <transf name="unfold" proved="true" arg1="progressTracker">
    <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.14.0.0" expl="VC for deliverMsgoToGammaPreservesProgressTracker" proved="true">
    <proof prover="2"><result status="valid" time="0.126942" steps="292"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109852" steps="225"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.864110" steps="11804"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.263159" steps="235070"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.233687" steps="247"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.19" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.510211" steps="2708"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.168108" steps="87"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.103953" steps="87"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.22" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.122992" steps="269"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.23" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.119503" steps="256"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.24" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.076123" steps="95"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.25" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.076083" steps="95"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.26" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.118547" steps="270"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.27" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.181660" steps="786"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.076950" steps="86"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.370614" steps="238266"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.077405" steps="76"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.134943" steps="256"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.484848" steps="2673"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148516" steps="259"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.34" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119684" steps="263"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.35" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.315381" steps="241511"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.36" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.140745" steps="333"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.37" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.140950" steps="350"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.38" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.359364" steps="241752"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.593243" steps="3130"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.40" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.961300" steps="6775"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.41" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.000353" steps="265534"/></proof>
  </goal>
  <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.42" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.42.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.081235" steps="65"/></proof>
   </goal>
   <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.42.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.42.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.172430" steps="68"/></proof>
    </goal>
    <goal name="deliverMsgoToGammaPreservesProgressTracker&#39;vc.42.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="5.678682" steps="39728"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="notYetOpenedTrichotomy&#39;vc" expl="VC for notYetOpenedTrichotomy" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="notYetOpenedTrichotomy&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.096994" steps="43"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099966" steps="43"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.112023" steps="67"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.174423" steps="205919"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.247624" steps="291"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.199618" steps="208357"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.197605" steps="151"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.244199" steps="289"/></proof>
  </goal>
  <goal name="notYetOpenedTrichotomy&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.402279" steps="2567"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="gammaProcessMsgPrserservesSpent&#39;vc" expl="VC for gammaProcessMsgPrserservesSpent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.247239" steps="328"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.090555" steps="43"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108919" steps="63"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.444307" steps="223646"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124940" steps="67"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.335189" steps="1313"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.178742" steps="271"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114284" steps="72"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150134" steps="295"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101343" steps="44"/></proof>
  </goal>
  <goal name="gammaProcessMsgPrserservesSpent&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.244435" steps="1087"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="checkFreshnessWhenFreshIds&#39;vc" expl="VC for checkFreshnessWhenFreshIds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="checkFreshnessWhenFreshIds&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.766274" steps="6206"/></proof>
  </goal>
  <goal name="checkFreshnessWhenFreshIds&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.025639" steps="6650"/></proof>
  </goal>
  <goal name="checkFreshnessWhenFreshIds&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="checkFreshnessWhenFreshIds&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="13.548103" steps="77851"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="checkFreshnessWhenFreshIds&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.850438" steps="6191"/></proof>
  </goal>
  <goal name="checkFreshnessWhenFreshIds&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="checkFreshnessWhenFreshIds&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.093217" steps="46"/></proof>
   </goal>
   <goal name="checkFreshnessWhenFreshIds&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.085798" steps="47"/></proof>
   </goal>
   <goal name="checkFreshnessWhenFreshIds&#39;vc.4.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.091864" steps="47"/></proof>
   </goal>
   <goal name="checkFreshnessWhenFreshIds&#39;vc.4.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.096129" steps="46"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correctChannelOpeningIdIndependent&#39;vc" expl="VC for correctChannelOpeningIdIndependent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correctChannelOpeningIdIndependent&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.175478" steps="559"/></proof>
  </goal>
  <goal name="correctChannelOpeningIdIndependent&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.125847" steps="161"/></proof>
  </goal>
  <goal name="correctChannelOpeningIdIndependent&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correctChannelOpeningIdIndependent&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.106157" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="correctChannelOpenerOpens&#39;vc" expl="VC for correctChannelOpenerOpens" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correctChannelOpenerOpens&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.199681" steps="68"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.265490" steps="376"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.277846" steps="454"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.283649" steps="557"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.203933" steps="172"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.803184" steps="199863"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.574249" steps="3321"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="5.006164" steps="34864"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.208608" steps="214699"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.433942" steps="3002"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.532785" steps="10997"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.142549" steps="295"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correctChannelOpenerOpens&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.235178" steps="107"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="1.455533" steps="10150"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.225723" steps="236"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.963913" steps="275582"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correctChannelOpenerOpens&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.338738" steps="2117"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.17" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.149337" steps="433"/></proof>
  </goal>
  <goal name="correctChannelOpenerOpens&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="correctChannelOpenerOpens&#39;vc.18.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.090224" steps="50"/></proof>
   </goal>
   <goal name="correctChannelOpenerOpens&#39;vc.18.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.169484" steps="581"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc" expl="VC for allContractsPreservedGammaProcessMsgFresh" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.076880" steps="111"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.064008" steps="42"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.088469" steps="121"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.3" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.075385" steps="126"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.561060" steps="170696"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.093009" steps="150"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.072407" steps="45"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.067130" steps="45"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.061045" steps="45"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.239869" steps="1623"/></proof>
  </goal>
  <goal name="allContractsPreservedGammaProcessMsgFresh&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.151101" steps="888"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc" expl="VC for correctChannelOpeningPreservedWhenNotYetOpened" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.080903" steps="68"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092265" steps="128"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.121941" steps="360"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.068346" steps="56"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.103131" steps="454"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.692415" steps="11086"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.087640" steps="83"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.106514" steps="187"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.290602" steps="1956"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.142903" steps="205"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.126662" steps="220"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.11" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="11.324778" steps="598143"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.194606" steps="839"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.127839" steps="398"/></proof>
  </goal>
  <goal name="correctChannelOpeningPreservedWhenNotYetOpened&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.139408" steps="432"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc" expl="VC for deliverMsgToGammaPreservesChannelOpeningInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088035" steps="120"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.105140" steps="165"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.093090" steps="160"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.103543" steps="167"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.832112" steps="5449"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168370" steps="612"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.112806" steps="201"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.104691" steps="206"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.077491" steps="65"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.069873" steps="65"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.078793" steps="65"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.104201" steps="205"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.077116" steps="64"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.165626" steps="715"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.14" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.840369" steps="203918"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.15" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.120284" steps="209"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.090989" steps="73"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.079502" steps="75"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.201742" steps="1068"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.413045" steps="223673"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.188457" steps="759"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124976" steps="231"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220815" steps="871"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.199878" steps="704"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.177188" steps="590"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.127731" steps="209"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.113920" steps="285"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.27" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.359658" steps="2010"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.093374" steps="81"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.29" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124143" steps="224"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.30" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122555" steps="233"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.110157" steps="228"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.766833" steps="5271"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.201198" steps="768"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.34" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.34.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.080587" steps="62"/></proof>
   </goal>
   <goal name="deliverMsgToGammaPreservesChannelOpeningInvariant&#39;vc.34.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.215510" steps="8343"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="processDeliverMsgToGammaGamma&#39;vc" expl="VC for processDeliverMsgToGammaGamma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="processDeliverMsgToGammaGamma&#39;vc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="applyAdversaryMove&#39;spec">
   <goal name="processDeliverMsgToGammaGamma&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.624485" steps="4691"/></proof>
   </goal>
   <goal name="processDeliverMsgToGammaGamma&#39;vc.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.079730" steps="46"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="processDeliverMsgToGammaMsgQueue&#39;vc" expl="VC for processDeliverMsgToGammaMsgQueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="processDeliverMsgToGammaMsgQueue&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101156" steps="71"/></proof>
  </goal>
  <goal name="processDeliverMsgToGammaMsgQueue&#39;vc.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="applyAdversaryMove&#39;spec">
   <goal name="processDeliverMsgToGammaMsgQueue&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.981256" steps="205096"/></proof>
   </goal>
   <goal name="processDeliverMsgToGammaMsgQueue&#39;vc.1.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.068768" steps="46"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="processDeliverMsgToGammaInvariants&#39;vc" expl="VC for processDeliverMsgToGammaInvariants" proved="true">
 <proof prover="1"><result status="valid" time="2.717066" steps="183343"/></proof>
 </goal>
 <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc" expl="VC for deliverMsgToGammaPreservesTimeCoherent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.097567" steps="46"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.812227" steps="24018"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.147165" steps="170"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.3" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.157858" steps="485"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.163172" steps="507"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.112506" steps="181"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.165743" steps="516"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.076980" steps="68"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.094078" steps="68"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.113838" steps="68"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.571981" steps="3035"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.451475" steps="44274"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesTimeCoherent&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.098554" steps="6592"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc" expl="VC for progressTrackerSysMsgtoGammaMonotone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160399" steps="367"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.208629" steps="719"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.134485" steps="5757"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.156580" steps="331"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.485266" steps="2443"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.225980" steps="145"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.845572" steps="4714"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.559299" steps="2458"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220612" steps="170"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.978398" steps="6884"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.10" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.117752" steps="73"/></proof>
  </goal>
  <goal name="progressTrackerSysMsgtoGammaMonotone&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.596679" steps="3355"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="closingInvariantFullMsgMonotone&#39;vc" expl="VC for closingInvariantFullMsgMonotone" proved="true">
 <proof prover="2"><result status="valid" time="0.936087" steps="6546"/></proof>
 </goal>
 <goal name="closingInvariantSysMsgEquiv&#39;vc" expl="VC for closingInvariantSysMsgEquiv" proved="true">
 <proof prover="2"><result status="valid" time="0.196229" steps="563"/></proof>
 </goal>
 <goal name="processSendMsgToGammaGamma&#39;vc" expl="VC for processSendMsgToGammaGamma" proved="true">
 <proof prover="2"><result status="valid" time="0.240325" steps="762"/></proof>
 </goal>
 <goal name="processSendMsgToGammaInvariants&#39;vc" expl="VC for processSendMsgToGammaInvariants" proved="true">
 <proof prover="2"><result status="valid" time="0.417042" steps="2696"/></proof>
 </goal>
 <goal name="checkFreshnessSoExistCorrectIds&#39;vc" expl="VC for checkFreshnessSoExistCorrectIds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.0" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.165417" steps="435"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.108564" steps="178"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.080485" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.310393" steps="2007"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092457" steps="51"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.5" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.144726" steps="439"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114594" steps="181"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.074305" steps="51"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.312143" steps="2007"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.089785" steps="51"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.10" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.148579" steps="435"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.111614" steps="178"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.12" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.080836" steps="50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.321843" steps="2007"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.080534" steps="51"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.103182" steps="119"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.114318" steps="199"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.080841" steps="46"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.18" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness" arg2="in" arg3="Assert">
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="16.079493" steps="646581"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119330" steps="211"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.160274" steps="508"/></proof>
  </goal>
  <goal name="checkFreshnessSoExistCorrectIds&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.204909" steps="81"/></proof>
   </goal>
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.21.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.194578" steps="82"/></proof>
   </goal>
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.21.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.125400" steps="81"/></proof>
   </goal>
   <goal name="checkFreshnessSoExistCorrectIds&#39;vc.21.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.108416" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="partyProcessMsgNewQueueSpec&#39;vc" expl="VC for partyProcessMsgNewQueueSpec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.114679" steps="63"/></proof>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partyProcessMsgNewQueueSpec&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.116176" steps="65"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.118322" steps="67"/></proof>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.092277" steps="45"/></proof>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partyProcessMsgNewQueueSpec&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="17.534708" steps="681180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.380770" steps="928"/></proof>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.238526" steps="207"/></proof>
  </goal>
  <goal name="partyProcessMsgNewQueueSpec&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partyProcessMsgNewQueueSpec&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.104968" steps="51"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc" expl="VC for transferMoneyFromVoidPreservesProgressTracker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.184986" steps="96"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.195081" steps="123"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.236045" steps="227"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.316095" steps="1266"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.4" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="correctChannelOpening">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.793279" steps="4604"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.790093" steps="203193"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.310177" steps="352"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.7.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.384747" steps="1781"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179762" steps="397"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.327988" steps="1295"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.004903" steps="6151"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.245453" steps="177"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.197467" steps="92"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.967352" steps="5060"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.622847" steps="10550"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.15" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.936257" steps="5930"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.277143" steps="335"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.17" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.17.0" expl="VC for transferMoneyFromVoidPreservesProgressTracker" proved="true">
   <proof prover="1"><result status="valid" time="6.325022" steps="368960"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.18" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="correctChannelOpening">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.18.0" expl="VC for transferMoneyFromVoidPreservesProgressTracker" proved="true">
   <proof prover="2"><result status="valid" time="1.174822" steps="7283"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.219046" steps="7821"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.20" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.183974" steps="234130"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.21" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.969712" steps="261361"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.22" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.22.0" expl="VC for transferMoneyFromVoidPreservesProgressTracker" proved="true">
   <proof prover="1"><result status="valid" time="3.256542" steps="235515"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.23" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.153962" steps="234006"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.24" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="progressTrackerMainCase">
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.24.0" expl="VC for transferMoneyFromVoidPreservesProgressTracker" proved="true">
   <proof prover="1"><result status="valid" time="3.185832" steps="235485"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.25" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.187994" steps="233972"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.26" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.140388" steps="180"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.100767" steps="59"/></proof>
   </goal>
   <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.102105" steps="90"/></proof>
    </goal>
    <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.098458" steps="87"/></proof>
     </goal>
     <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.080578" steps="103"/></proof>
      </goal>
      <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.079430" steps="101"/></proof>
      </goal>
      <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1.2" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1.2.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.090256" steps="105"/></proof>
       </goal>
       <goal name="transferMoneyFromVoidPreservesProgressTracker&#39;vc.27.1.1.1.2.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.095596" steps="105"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc" expl="VC for transferMoneyFromVoidPreservesOpeningOnQueue" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.119809" steps="96"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.236073" steps="119"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.148991" steps="227"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168354" steps="334"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.171173" steps="327"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.5" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.305743" steps="1271"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.280995" steps="382"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.292253" steps="1223"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.8" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="correctChannelOpening">
   <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.860578" steps="5422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141064" steps="171"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.187336" steps="88"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.913267" steps="4910"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.397247" steps="9376"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.873253" steps="5458"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.153556" steps="336"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.15" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="correctChannelOpening">
   <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.264230" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.16" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inputPresentOnGamma">
   <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.16.0" expl="VC for transferMoneyFromVoidPreservesOpeningOnQueue" proved="true">
   <proof prover="1"><result status="valid" time="6.228820" steps="377528"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="5.332505" steps="32771"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.899397" steps="5083"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.704237" steps="4259"/></proof>
  </goal>
  <goal name="transferMoneyFromVoidPreservesOpeningOnQueue&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.212191" steps="595"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="applyAdversaryMovePreservesInvariant&#39;vc" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.242123" steps="259"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.026366" steps="6314"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.195504" steps="41"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.184964" steps="41"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.181169" steps="42"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.151069" steps="42"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.224660" steps="129"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.161195" steps="45"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.216637" steps="99"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.216396" steps="101"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.160969" steps="193"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.150782" steps="269"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.135245" steps="182"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.136236" steps="109"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.124640" steps="111"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170755" steps="356"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.168116" steps="356"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.138499" steps="126"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.167037" steps="292"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.159491" steps="6392"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.141106" steps="142"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.425335" steps="6606"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.272417" steps="16377"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.23" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.159584" steps="400"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.847309" steps="5227"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.238882" steps="121"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.179095" steps="463"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.27" expl="witness existence" proved="true">
  <proof prover="2"><result status="valid" time="0.238034" steps="137"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.28" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.885443" steps="5689"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.668943" steps="194529"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.30" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.242401" steps="489"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.682288" steps="3363"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.32" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.100374" steps="78"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.33" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.151508" steps="391"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.34" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.092567" steps="79"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.35" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088940" steps="79"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.36" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.079750" steps="79"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.37" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="4.230024" steps="283959"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.38" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.227925" steps="1079"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.39" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.087055" steps="89"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.40" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.078438" steps="89"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.41" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.080679" steps="89"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.42" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.081873" steps="89"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.43" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.072725" steps="89"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.44" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.276892" steps="1445"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.45" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.084096" steps="93"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.46" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.171976" steps="225004"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.47" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.206829" steps="693"/></proof>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.48" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.48.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="applyAdversaryMovePreservesInvariant&#39;vc.48.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.093153" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="applyAdversaryMove&#39;spec">
    <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="closingInvariantFull">
     <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.0" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="1.853774" steps="162384"/></proof>
      <proof prover="2"><result status="valid" time="0.095580" steps="167"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.1" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="2.264654" steps="172395"/></proof>
      <proof prover="2"><result status="valid" time="0.146070" steps="714"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.2" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="2.133563" steps="167997"/></proof>
      <proof prover="2"><result status="valid" time="0.124212" steps="315"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.3" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="1.847928" steps="162389"/></proof>
      <proof prover="2"><result status="valid" time="0.114876" steps="165"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.4" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="2.599170" steps="189088"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.5" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="2.683910" steps="189247"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.6" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="2.199881" steps="167770"/></proof>
      <proof prover="2"><result status="valid" time="0.265896" steps="648"/></proof>
      </goal>
      <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.0.0.7" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
      <proof prover="1"><result status="valid" time="11.049872" steps="728376"/></proof>
      <proof prover="2"><result status="valid" time="0.505396" steps="3383"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="applyAdversaryMovePreservesInvariant&#39;vc.49.0.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="2.347093" steps="168820"/></proof>
    <proof prover="2"><result status="valid" time="0.093860" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.079568" steps="42"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.090540" steps="69"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.100832" steps="44"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.098225" steps="57"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.4" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.084247" steps="42"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.5" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.098886" steps="78"/></proof>
   </goal>
   <goal name="applyAdversaryMovePreservesInvariant&#39;vc.50.6" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.088359" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="applyMovesClosingInvariant&#39;vc" expl="VC for applyMovesClosingInvariant" proved="true">
 <proof prover="2"><result status="valid" time="1.306639" steps="6769"/></proof>
 </goal>
 <goal name="stateReachableSoInvariantHolds&#39;vc" expl="VC for stateReachableSoInvariantHolds" proved="true">
 <proof prover="2"><result status="valid" time="0.239000" steps="322"/></proof>
 </goal>
 <goal name="closingWorks&#39;vc" expl="VC for closingWorks" proved="true">
 <proof prover="2"><result status="valid" time="0.193533" steps="64"/></proof>
 </goal>
 <goal name="ClosingWorksLemmas&#39;impl_of.closingWorks&#39;refn&#39;vc" expl="VC for closingWorks&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.168944" steps="37"/></proof>
 </goal>
</theory>
<theory name="ProtocolSecureProofs&#39;impl" proved="true">
 <goal name="initialStateInvariant&#39;vc" expl="VC for initialStateInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="initialStateInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.057071" steps="33"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.055773" steps="33"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.071749" steps="157"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.052791" steps="57"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.065644" steps="59"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.062887" steps="64"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.069196" steps="69"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.068173" steps="75"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.065407" steps="80"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.055287" steps="82"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.063611" steps="83"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.063579" steps="83"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.059360" steps="65"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.101703" steps="680"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.062776" steps="92"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.059182" steps="94"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.066884" steps="110"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.873600" steps="20914"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.18" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.081885" steps="118"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.19" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.191161" steps="6909"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.20" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.208601" steps="778"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.622553" steps="19361"/></proof>
  </goal>
  <goal name="initialStateInvariant&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.138943" steps="90"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="signMsgMovePreservesInvariant&#39;vc" expl="VC for signMsgMovePreservesInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="signMsgMovePreservesInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.107751" steps="90"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.099404" steps="55"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.110255" steps="55"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.170412" steps="100"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.054855" steps="59"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.157652" steps="59"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.175454" steps="76"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.167422" steps="85"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.177341" steps="106"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.119167" steps="195"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.095556" steps="64"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.109444" steps="95"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.12" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.092326" steps="66"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.495528" steps="2989"/></proof>
  </goal>
  <goal name="signMsgMovePreservesInvariant&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148593" steps="70"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.827489" steps="5407"/></proof>
  </goal>
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness">
   <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.1.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
   <proof prover="2"><result status="valid" time="1.086256" steps="7180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.833627" steps="5412"/></proof>
  </goal>
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.3" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness">
   <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.3.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
   <proof prover="1"><result status="valid" time="3.576200" steps="248942"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.170852" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="checkFreshness">
   <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.0.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.156639" steps="65"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.0.1" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.147763" steps="65"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.0.2" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.150067" steps="65"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.0.3" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.103854" steps="71"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.1" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.1.0" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.135227" steps="394"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.1.1" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.122863" steps="394"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.1.2" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.139656" steps="398"/></proof>
     </goal>
     <goal name="replaceIdsWithFreshSoMsgFresh&#39;vc.5.0.1.3" expl="VC for replaceIdsWithFreshSoMsgFresh" proved="true">
     <proof prover="2"><result status="valid" time="0.140371" steps="495"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="deliverMsgToGammaPreservesInvariant&#39;vc" expl="VC for deliverMsgToGammaPreservesInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.137202" steps="741"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.122108" steps="340"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.2" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.108499" steps="131"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.3" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="applyAdversaryMove&#39;spec">
   <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.411389" steps="10358"/></proof>
   </goal>
   <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.3.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.089076" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.803893" steps="23033"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158987" steps="103"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.324595" steps="241141"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.388037" steps="245033"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.316361" steps="240411"/></proof>
  </goal>
  <goal name="deliverMsgToGammaPreservesInvariant&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.204811" steps="879"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sendMsgToGammaPreservesInvariant&#39;vc" expl="VC for sendMsgToGammaPreservesInvariant" proved="true">
 <proof prover="1"><result status="valid" time="4.128270" steps="297030"/></proof>
 </goal>
 <goal name="sendMsgToPartyPreservesInvariant&#39;vc" expl="VC for sendMsgToPartyPreservesInvariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.169374" steps="91"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesInvariant&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.169429" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.167400" steps="61"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.187379" steps="124"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.004894" steps="158148"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.104496" steps="167895"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesInvariant&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.799881" steps="199712"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesInvariant&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="systemStateInvariant">
    <goal name="sendMsgToPartyPreservesInvariant&#39;vc.7.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.217208" steps="252"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="4.643082" steps="38345"/></proof>
  </goal>
  <goal name="sendMsgToPartyPreservesInvariant&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sendMsgToPartyPreservesInvariant&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.113016" steps="304"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="applyAdversaryMovePreservesInvariant&#39;vc" expl="VC for applyAdversaryMovePreservesInvariant" proved="true">
 <proof prover="1"><result status="valid" time="3.463877" steps="277304"/></proof>
 </goal>
 <goal name="applyMovesInvariant&#39;vc" expl="VC for applyMovesInvariant" proved="true">
 <proof prover="2"><result status="valid" time="0.368348" steps="2258"/></proof>
 </goal>
 <goal name="invariantSoExpectedAmountHigh&#39;vc" expl="VC for invariantSoExpectedAmountHigh" proved="true">
 <proof prover="2"><result status="valid" time="0.222171" steps="174"/></proof>
 </goal>
 <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc" expl="VC for imediateAmountOnChainGeqChannelExpectations" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="2.373008" steps="183475"/></proof>
  </goal>
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.505067" steps="10522"/></proof>
  </goal>
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.207709" steps="147"/></proof>
  </goal>
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.176026" steps="51"/></proof>
  </goal>
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.158253" steps="57"/></proof>
  </goal>
  <goal name="imediateAmountOnChainGeqChannelExpectations&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.179219" steps="61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="fundsSecurityAux&#39;vc" expl="VC for fundsSecurityAux" proved="true">
 <proof prover="2"><result status="valid" time="0.194236" steps="775"/></proof>
 </goal>
 <goal name="protocolSecure&#39;vc" expl="VC for protocolSecure" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="protocolSecure&#39;vc.0" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="honestPartyWins">
   <goal name="protocolSecure&#39;vc.0.0" expl="VC for protocolSecure" proved="true">
   <transf name="unfold" proved="true" arg1="adversaryWinningState">
    <goal name="protocolSecure&#39;vc.0.0.0" expl="VC for protocolSecure" proved="true">
    <proof prover="2"><result status="valid" time="0.175411" steps="55"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ProtocolSecureLemmas&#39;impl_of.protocolSecure&#39;refn&#39;vc" expl="VC for protocolSecure&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.084304" steps="32"/></proof>
 </goal>
</theory>
</file>
</why3session>
